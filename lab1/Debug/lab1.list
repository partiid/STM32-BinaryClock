
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bea8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800c048  0800c048  0001c048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c66c  0800c66c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c66c  0800c66c  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c66c  0800c66c  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c66c  0800c66c  0001c66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c670  0800c670  0001c670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800c674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          00000950  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a3c  20000a3c  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d830  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003db9  00000000  00000000  0003d94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  00041708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001368  00000000  00000000  00042c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024637  00000000  00000000  00043f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000238c6  00000000  00000000  000685a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d486c  00000000  00000000  0008be6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001606d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006284  00000000  00000000  0016072c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c030 	.word	0x0800c030

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	0800c030 	.word	0x0800c030

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <splitNumber>:
	int seconds;
};



int splitNumber(int num, int return_val){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	      int arr[3];
          int i =0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
         if(num != 0 || num != 00){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d131      	bne.n	8000328 <splitNumber+0x78>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d039      	beq.n	800033e <splitNumber+0x8e>
             while(num > 0 ){
 80002ca:	e02d      	b.n	8000328 <splitNumber+0x78>
              arr[i++] = num % 10;
 80002cc:	6978      	ldr	r0, [r7, #20]
 80002ce:	1c43      	adds	r3, r0, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	6879      	ldr	r1, [r7, #4]
 80002d4:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <splitNumber+0x98>)
 80002d6:	fb83 2301 	smull	r2, r3, r3, r1
 80002da:	109a      	asrs	r2, r3, #2
 80002dc:	17cb      	asrs	r3, r1, #31
 80002de:	1ad2      	subs	r2, r2, r3
 80002e0:	4613      	mov	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	4413      	add	r3, r2
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	1aca      	subs	r2, r1, r3
 80002ea:	0083      	lsls	r3, r0, #2
 80002ec:	f107 0118 	add.w	r1, r7, #24
 80002f0:	440b      	add	r3, r1
 80002f2:	f843 2c10 	str.w	r2, [r3, #-16]
	          num = num / 10;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <splitNumber+0x98>)
 80002fa:	fb82 1203 	smull	r1, r2, r2, r3
 80002fe:	1092      	asrs	r2, r2, #2
 8000300:	17db      	asrs	r3, r3, #31
 8000302:	1ad3      	subs	r3, r2, r3
 8000304:	607b      	str	r3, [r7, #4]
              if(num == 0){
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d109      	bne.n	8000320 <splitNumber+0x70>
                  arr[i++] = 0;
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	1c5a      	adds	r2, r3, #1
 8000310:	617a      	str	r2, [r7, #20]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	f107 0218 	add.w	r2, r7, #24
 8000318:	4413      	add	r3, r2
 800031a:	2200      	movs	r2, #0
 800031c:	f843 2c10 	str.w	r2, [r3, #-16]
              }
	            printf("%d", num);
 8000320:	6879      	ldr	r1, [r7, #4]
 8000322:	480a      	ldr	r0, [pc, #40]	; (800034c <splitNumber+0x9c>)
 8000324:	f00a f898 	bl	800a458 <iprintf>
             while(num > 0 ){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b00      	cmp	r3, #0
 800032c:	dcce      	bgt.n	80002cc <splitNumber+0x1c>


            }
        return arr[return_val];
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	f107 0218 	add.w	r2, r7, #24
 8000336:	4413      	add	r3, r2
 8000338:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800033c:	e000      	b.n	8000340 <splitNumber+0x90>
         } else {
             return 0;
 800033e:	2300      	movs	r3, #0
         }


}
 8000340:	4618      	mov	r0, r3
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	66666667 	.word	0x66666667
 800034c:	0800c048 	.word	0x0800c048

08000350 <convertToBinary>:

int convertToBinary(int num){
 8000350:	b480      	push	{r7}
 8000352:	b08f      	sub	sp, #60	; 0x3c
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
          int count = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	637b      	str	r3, [r7, #52]	; 0x34
          int arr[8];
          int i = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 8000360:	e015      	b.n	800038e <convertToBinary+0x3e>
              arr[i] = num % 2;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b00      	cmp	r3, #0
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	bfb8      	it	lt
 800036c:	425b      	neglt	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000378:	440b      	add	r3, r1
 800037a:	f843 2c2c 	str.w	r2, [r3, #-44]
              num = num / 2;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	0fda      	lsrs	r2, r3, #31
 8000382:	4413      	add	r3, r2
 8000384:	105b      	asrs	r3, r3, #1
 8000386:	607b      	str	r3, [r7, #4]
              i++;
 8000388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800038a:	3301      	adds	r3, #1
 800038c:	633b      	str	r3, [r7, #48]	; 0x30
          while(num != 0){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1e6      	bne.n	8000362 <convertToBinary+0x12>
          }
          for(int j = i - 1; j >= 0; j--){
 8000394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000396:	3b01      	subs	r3, #1
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800039a:	e005      	b.n	80003a8 <convertToBinary+0x58>
              count++;
 800039c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800039e:	3301      	adds	r3, #1
 80003a0:	637b      	str	r3, [r7, #52]	; 0x34
          for(int j = i - 1; j >= 0; j--){
 80003a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003a4:	3b01      	subs	r3, #1
 80003a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	daf6      	bge.n	800039c <convertToBinary+0x4c>

          }
          return count;
 80003ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	373c      	adds	r7, #60	; 0x3c
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <setTime>:



void setTime(RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate, int8_t hours, uint8_t minutes, uint8_t seconds){
 80003bc:	b084      	sub	sp, #16
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	f107 0c08 	add.w	ip, r7, #8
 80003c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80003ca:	4816      	ldr	r0, [pc, #88]	; (8000424 <setTime+0x68>)
 80003cc:	f007 fe2e 	bl	800802c <HAL_RTCEx_DeactivateWakeUpTimer>


	sTime.Hours = hours;
 80003d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003d4:	723b      	strb	r3, [r7, #8]
	sTime.Minutes = minutes;
 80003d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003da:	727b      	strb	r3, [r7, #9]
	sTime.Seconds = seconds;
 80003dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003e0:	72bb      	strb	r3, [r7, #10]



	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80003e2:	2200      	movs	r2, #0
 80003e4:	f107 0108 	add.w	r1, r7, #8
 80003e8:	480e      	ldr	r0, [pc, #56]	; (8000424 <setTime+0x68>)
 80003ea:	f006 fd79 	bl	8006ee0 <HAL_RTC_SetTime>

	sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80003ee:	2307      	movs	r3, #7
 80003f0:	773b      	strb	r3, [r7, #28]
	sDate.Date = 30;
 80003f2:	231e      	movs	r3, #30
 80003f4:	77bb      	strb	r3, [r7, #30]
	sDate.Month = 1;
 80003f6:	2301      	movs	r3, #1
 80003f8:	777b      	strb	r3, [r7, #29]
	sDate.Year = 22;
 80003fa:	2316      	movs	r3, #22
 80003fc:	77fb      	strb	r3, [r7, #31]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80003fe:	f107 031c 	add.w	r3, r7, #28
 8000402:	2200      	movs	r2, #0
 8000404:	4619      	mov	r1, r3
 8000406:	4807      	ldr	r0, [pc, #28]	; (8000424 <setTime+0x68>)
 8000408:	f006 ff42 	bl	8007290 <HAL_RTC_SetDate>

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800040c:	2200      	movs	r2, #0
 800040e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000412:	4804      	ldr	r0, [pc, #16]	; (8000424 <setTime+0x68>)
 8000414:	f007 fd34 	bl	8007e80 <HAL_RTCEx_SetWakeUpTimer_IT>



}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr
 8000424:	20000564 	.word	0x20000564

08000428 <displayHour>:


//display hour if clock is set to second mode

void displayHour(uint8_t hour, uint8_t minute, uint8_t second){
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
 8000432:	460b      	mov	r3, r1
 8000434:	71bb      	strb	r3, [r7, #6]
 8000436:	4613      	mov	r3, r2
 8000438:	717b      	strb	r3, [r7, #5]
	resetPins();
 800043a:	f000 f8d1 	bl	80005e0 <resetPins>

	int bits_count = convertToBinary(hour);
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff85 	bl	8000350 <convertToBinary>
 8000446:	60b8      	str	r0, [r7, #8]
	if(bits_count > 5 ){
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	2b05      	cmp	r3, #5
 800044c:	dd03      	ble.n	8000456 <displayHour+0x2e>
		Send("Fail: {Data Not acceptable}\r\n");
 800044e:	4858      	ldr	r0, [pc, #352]	; (80005b0 <displayHour+0x188>)
 8000450:	f000 ff3c 	bl	80012cc <Send>
		hour_displayed = 1;

	}


}
 8000454:	e0a7      	b.n	80005a6 <displayHour+0x17e>
		for(int i = 0; i <= 5; i++){
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
 800045a:	e016      	b.n	800048a <displayHour+0x62>
				if(hour & (1 << i)){ //if bit is set
 800045c:	79fa      	ldrb	r2, [r7, #7]
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	fa42 f303 	asr.w	r3, r2, r3
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	2b00      	cmp	r3, #0
 800046a:	d00b      	beq.n	8000484 <displayHour+0x5c>
					HAL_GPIO_WritePin(port_hour[i], pin_hour[i], 1);
 800046c:	4a51      	ldr	r2, [pc, #324]	; (80005b4 <displayHour+0x18c>)
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000474:	4a50      	ldr	r2, [pc, #320]	; (80005b8 <displayHour+0x190>)
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800047c:	2201      	movs	r2, #1
 800047e:	4619      	mov	r1, r3
 8000480:	f002 fcb4 	bl	8002dec <HAL_GPIO_WritePin>
		for(int i = 0; i <= 5; i++){
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	3301      	adds	r3, #1
 8000488:	61fb      	str	r3, [r7, #28]
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	2b05      	cmp	r3, #5
 800048e:	dde5      	ble.n	800045c <displayHour+0x34>
				for(int i = 0; i <= 4; i++){
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
 8000494:	e01b      	b.n	80004ce <displayHour+0xa6>
					if(splitNumber(minute, 0) & (1 << i)){
 8000496:	79bb      	ldrb	r3, [r7, #6]
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff08 	bl	80002b0 <splitNumber>
 80004a0:	4602      	mov	r2, r0
 80004a2:	69bb      	ldr	r3, [r7, #24]
 80004a4:	fa42 f303 	asr.w	r3, r2, r3
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d00b      	beq.n	80004c8 <displayHour+0xa0>
							HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], 1);
 80004b0:	4a42      	ldr	r2, [pc, #264]	; (80005bc <displayHour+0x194>)
 80004b2:	69bb      	ldr	r3, [r7, #24]
 80004b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004b8:	4a41      	ldr	r2, [pc, #260]	; (80005c0 <displayHour+0x198>)
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004c0:	2201      	movs	r2, #1
 80004c2:	4619      	mov	r1, r3
 80004c4:	f002 fc92 	bl	8002dec <HAL_GPIO_WritePin>
				for(int i = 0; i <= 4; i++){
 80004c8:	69bb      	ldr	r3, [r7, #24]
 80004ca:	3301      	adds	r3, #1
 80004cc:	61bb      	str	r3, [r7, #24]
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	2b04      	cmp	r3, #4
 80004d2:	dde0      	ble.n	8000496 <displayHour+0x6e>
				for(int i = 0; i <= 3; i++){
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	e01b      	b.n	8000512 <displayHour+0xea>
					 if(splitNumber(minute, 1) & (1 << i)){
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	2101      	movs	r1, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff fee6 	bl	80002b0 <splitNumber>
 80004e4:	4602      	mov	r2, r0
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	fa42 f303 	asr.w	r3, r2, r3
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d00b      	beq.n	800050c <displayHour+0xe4>
						HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], 1);
 80004f4:	4a33      	ldr	r2, [pc, #204]	; (80005c4 <displayHour+0x19c>)
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004fc:	4a32      	ldr	r2, [pc, #200]	; (80005c8 <displayHour+0x1a0>)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000504:	2201      	movs	r2, #1
 8000506:	4619      	mov	r1, r3
 8000508:	f002 fc70 	bl	8002dec <HAL_GPIO_WritePin>
				for(int i = 0; i <= 3; i++){
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	3301      	adds	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	2b03      	cmp	r3, #3
 8000516:	dde0      	ble.n	80004da <displayHour+0xb2>
			for (int i = 0; i <= 4; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	e01b      	b.n	8000556 <displayHour+0x12e>
					    if (splitNumber(second, 0) & (1 << i)){
 800051e:	797b      	ldrb	r3, [r7, #5]
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fec4 	bl	80002b0 <splitNumber>
 8000528:	4602      	mov	r2, r0
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	fa42 f303 	asr.w	r3, r2, r3
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00b      	beq.n	8000550 <displayHour+0x128>
					        HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], 1);
 8000538:	4a24      	ldr	r2, [pc, #144]	; (80005cc <displayHour+0x1a4>)
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000540:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <displayHour+0x1a8>)
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000548:	2201      	movs	r2, #1
 800054a:	4619      	mov	r1, r3
 800054c:	f002 fc4e 	bl	8002dec <HAL_GPIO_WritePin>
			for (int i = 0; i <= 4; i++){
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	3301      	adds	r3, #1
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	2b04      	cmp	r3, #4
 800055a:	dde0      	ble.n	800051e <displayHour+0xf6>
					for (int i = 0; i <= 3; i++){
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	e01b      	b.n	800059a <displayHour+0x172>
					    if (splitNumber(second, 1) & (1 << i)){
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fea2 	bl	80002b0 <splitNumber>
 800056c:	4602      	mov	r2, r0
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	fa42 f303 	asr.w	r3, r2, r3
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00b      	beq.n	8000594 <displayHour+0x16c>
					        HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], 1);
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <displayHour+0x1ac>)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000584:	4a14      	ldr	r2, [pc, #80]	; (80005d8 <displayHour+0x1b0>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058c:	2201      	movs	r2, #1
 800058e:	4619      	mov	r1, r3
 8000590:	f002 fc2c 	bl	8002dec <HAL_GPIO_WritePin>
					for (int i = 0; i <= 3; i++){
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3301      	adds	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2b03      	cmp	r3, #3
 800059e:	dde0      	ble.n	8000562 <displayHour+0x13a>
		hour_displayed = 1;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <displayHour+0x1b4>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	3720      	adds	r7, #32
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	0800c04c 	.word	0x0800c04c
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000014 	.word	0x20000014
 80005bc:	20000020 	.word	0x20000020
 80005c0:	20000030 	.word	0x20000030
 80005c4:	20000038 	.word	0x20000038
 80005c8:	20000044 	.word	0x20000044
 80005cc:	20000060 	.word	0x20000060
 80005d0:	20000070 	.word	0x20000070
 80005d4:	2000004c 	.word	0x2000004c
 80005d8:	20000058 	.word	0x20000058
 80005dc:	20000125 	.word	0x20000125

080005e0 <resetPins>:

void resetPins(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
	//reset hours pins

	for(int i = 0; i < 5; i++){
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e00e      	b.n	800060a <resetPins+0x2a>
		HAL_GPIO_WritePin(port_hour[i], pin_hour[i], GPIO_PIN_RESET);
 80005ec:	4a2c      	ldr	r2, [pc, #176]	; (80006a0 <resetPins+0xc0>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f4:	4a2b      	ldr	r2, [pc, #172]	; (80006a4 <resetPins+0xc4>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005fc:	2200      	movs	r2, #0
 80005fe:	4619      	mov	r1, r3
 8000600:	f002 fbf4 	bl	8002dec <HAL_GPIO_WritePin>
	for(int i = 0; i < 5; i++){
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b04      	cmp	r3, #4
 800060e:	dded      	ble.n	80005ec <resetPins+0xc>
	}

	for(int i = 0; i < 3; i++){
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	e01a      	b.n	800064c <resetPins+0x6c>
		HAL_GPIO_WritePin(port_minute_tens[i], pin_minute_tens[i], GPIO_PIN_RESET);
 8000616:	4a24      	ldr	r2, [pc, #144]	; (80006a8 <resetPins+0xc8>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800061e:	4a23      	ldr	r2, [pc, #140]	; (80006ac <resetPins+0xcc>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000626:	2200      	movs	r2, #0
 8000628:	4619      	mov	r1, r3
 800062a:	f002 fbdf 	bl	8002dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_tens[i], pin_second_tens[i], GPIO_PIN_RESET);
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <resetPins+0xd0>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000636:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <resetPins+0xd4>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	f002 fbd3 	bl	8002dec <HAL_GPIO_WritePin>
	for(int i = 0; i < 3; i++){
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	3301      	adds	r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	2b02      	cmp	r3, #2
 8000650:	dde1      	ble.n	8000616 <resetPins+0x36>
	}
	for(int i = 0; i < 4; i++){
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e01a      	b.n	800068e <resetPins+0xae>
		HAL_GPIO_WritePin(port_minute_ones[i], pin_minute_ones[i], GPIO_PIN_RESET);
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <resetPins+0xd8>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <resetPins+0xdc>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f002 fbbe 	bl	8002dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(port_second_ones[i], pin_second_ones[i], GPIO_PIN_RESET);
 8000670:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <resetPins+0xe0>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <resetPins+0xe4>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000680:	2200      	movs	r2, #0
 8000682:	4619      	mov	r1, r3
 8000684:	f002 fbb2 	bl	8002dec <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++){
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3301      	adds	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b03      	cmp	r3, #3
 8000692:	dde1      	ble.n	8000658 <resetPins+0x78>
	}



}
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000014 	.word	0x20000014
 80006a8:	20000038 	.word	0x20000038
 80006ac:	20000044 	.word	0x20000044
 80006b0:	2000004c 	.word	0x2000004c
 80006b4:	20000058 	.word	0x20000058
 80006b8:	20000020 	.word	0x20000020
 80006bc:	20000030 	.word	0x20000030
 80006c0:	20000060 	.word	0x20000060
 80006c4:	20000070 	.word	0x20000070

080006c8 <getNumOfDaysInMonth>:





uint8_t getNumOfDaysInMonth(uint8_t N){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]



	    // Check for 31 Days
	    if (N == 1 || N == 3 || N == 5
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d011      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d00e      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b05      	cmp	r3, #5
 80006e2:	d00b      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
	        || N == 7 || N == 8 || N == 10
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	d008      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d005      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b0a      	cmp	r3, #10
 80006f4:	d002      	beq.n	80006fc <getNumOfDaysInMonth+0x34>
	        || N == 12) {
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b0c      	cmp	r3, #12
 80006fa:	d101      	bne.n	8000700 <getNumOfDaysInMonth+0x38>
	        return 31;
 80006fc:	231f      	movs	r3, #31
 80006fe:	e013      	b.n	8000728 <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 30 Days
	    else if (N == 4 || N == 6
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b04      	cmp	r3, #4
 8000704:	d008      	beq.n	8000718 <getNumOfDaysInMonth+0x50>
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b06      	cmp	r3, #6
 800070a:	d005      	beq.n	8000718 <getNumOfDaysInMonth+0x50>
	             || N == 9 || N == 11) {
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b09      	cmp	r3, #9
 8000710:	d002      	beq.n	8000718 <getNumOfDaysInMonth+0x50>
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b0b      	cmp	r3, #11
 8000716:	d101      	bne.n	800071c <getNumOfDaysInMonth+0x54>
	        return 30;
 8000718:	231e      	movs	r3, #30
 800071a:	e005      	b.n	8000728 <getNumOfDaysInMonth+0x60>
	    }

	    // Check for 28/29 Days
	    else if (N == 2) {
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b02      	cmp	r3, #2
 8000720:	d101      	bne.n	8000726 <getNumOfDaysInMonth+0x5e>
	        return 28;
 8000722:	231c      	movs	r3, #28
 8000724:	e000      	b.n	8000728 <getNumOfDaysInMonth+0x60>
	    }

	    // Else Invalid Input
	    else {
	        return 0;
 8000726:	2300      	movs	r3, #0
	    }

}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <FLASH_init>:


/* ===== FLASH INIT ===== */


void FLASH_init(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0


	FlashTx_empty = 0;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <FLASH_init+0x20>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
	FlashTx_busy = 0;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <FLASH_init+0x24>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	memset(FlashTx_buff, 0x255, FLASHTX_BUFF_SIZE);
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	f240 2155 	movw	r1, #597	; 0x255
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <FLASH_init+0x28>)
 800074c:	f009 fe7c 	bl	800a448 <memset>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000010c 	.word	0x2000010c
 8000758:	2000010d 	.word	0x2000010d
 800075c:	20000168 	.word	0x20000168

08000760 <HAL_I2C_MemTxCpltCallback>:



void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
//
//			HAL_Delay(5);
//
//		}

}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <Flash_flush>:





void Flash_flush(){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af02      	add	r7, sp, #8
	uint8_t zero = 0xff;
 800077a:	23ff      	movs	r3, #255	; 0xff
 800077c:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i <= FLASHTX_BUFF_SIZE; i++){
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	e010      	b.n	80007a6 <Flash_flush+0x32>
		HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, i, 1 , (uint8_t*)&zero, sizeof(zero));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b29a      	uxth	r2, r3
 8000788:	2301      	movs	r3, #1
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	1cfb      	adds	r3, r7, #3
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	21a0      	movs	r1, #160	; 0xa0
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <Flash_flush+0x44>)
 8000796:	f002 fde7 	bl	8003368 <HAL_I2C_Mem_Write_IT>
		HAL_Delay(5);
 800079a:	2005      	movs	r0, #5
 800079c:	f001 feac 	bl	80024f8 <HAL_Delay>
	for(int i = 0; i <= FLASHTX_BUFF_SIZE; i++){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3301      	adds	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b80      	cmp	r3, #128	; 0x80
 80007aa:	ddeb      	ble.n	8000784 <Flash_flush+0x10>
	}
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000268 	.word	0x20000268

080007bc <Flash_write>:



uint8_t bt = 0;

void Flash_write(int data[], int start_idx){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]

		counter = start_idx;
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <Flash_write+0x88>)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	6013      	str	r3, [r2, #0]


		uint8_t arr_idx = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	72fb      	strb	r3, [r7, #11]
		uint8_t arr_size = 6;
 80007d0:	2306      	movs	r3, #6
 80007d2:	72bb      	strb	r3, [r7, #10]

		//control memory
		if(counter >= FLASHTX_BUFF_SIZE - arr_size - 1){
 80007d4:	7abb      	ldrb	r3, [r7, #10]
 80007d6:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <Flash_write+0x88>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dc02      	bgt.n	80007e8 <Flash_write+0x2c>
			counter = 0;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <Flash_write+0x88>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
		}

		Send("Counter at: %d\r\n", counter);
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <Flash_write+0x88>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4816      	ldr	r0, [pc, #88]	; (8000848 <Flash_write+0x8c>)
 80007f0:	f000 fd6c 	bl	80012cc <Send>

		for(int i = 0; i < arr_size; i++){
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	e01a      	b.n	8000830 <Flash_write+0x74>
			HAL_I2C_Mem_Write_IT(&hi2c1, 0xa0, counter, 1 , (uint8_t*)&data[i], sizeof(data[i]));
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <Flash_write+0x88>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	b299      	uxth	r1, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	2204      	movs	r2, #4
 800080a:	9201      	str	r2, [sp, #4]
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2301      	movs	r3, #1
 8000810:	460a      	mov	r2, r1
 8000812:	21a0      	movs	r1, #160	; 0xa0
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <Flash_write+0x90>)
 8000816:	f002 fda7 	bl	8003368 <HAL_I2C_Mem_Write_IT>
			//FlashTx_buff[FlashTx_busy++] = data[i];
			counter++;
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <Flash_write+0x88>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	4a08      	ldr	r2, [pc, #32]	; (8000844 <Flash_write+0x88>)
 8000822:	6013      	str	r3, [r2, #0]
			HAL_Delay(5);
 8000824:	2005      	movs	r0, #5
 8000826:	f001 fe67 	bl	80024f8 <HAL_Delay>
		for(int i = 0; i < arr_size; i++){
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	3301      	adds	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	7abb      	ldrb	r3, [r7, #10]
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	dbe0      	blt.n	80007fa <Flash_write+0x3e>





}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000108 	.word	0x20000108
 8000848:	0800c06c 	.word	0x0800c06c
 800084c:	20000268 	.word	0x20000268

08000850 <Flash_read>:


int *Flash_read(){
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af04      	add	r7, sp, #16
	FLASH_init();
 8000856:	f7ff ff6d 	bl	8000734 <FLASH_init>
	uint8_t byte = 0x00;
 800085a:	2300      	movs	r3, #0
 800085c:	717b      	strb	r3, [r7, #5]
	uint8_t data_found = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]


	uint8_t page = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	71bb      	strb	r3, [r7, #6]
	for(page = 0; page <= 128; page++){
 8000866:	2300      	movs	r3, #0
 8000868:	71bb      	strb	r3, [r7, #6]
 800086a:	e031      	b.n	80008d0 <Flash_read+0x80>
		HAL_I2C_Mem_Read(&hi2c1, 0xa1, page, 1, (uint8_t*)&byte, sizeof(byte), HAL_MAX_DELAY);
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	b29a      	uxth	r2, r3
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	9302      	str	r3, [sp, #8]
 8000876:	2301      	movs	r3, #1
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	1d7b      	adds	r3, r7, #5
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	21a1      	movs	r1, #161	; 0xa1
 8000882:	4817      	ldr	r0, [pc, #92]	; (80008e0 <Flash_read+0x90>)
 8000884:	f002 fc48 	bl	8003118 <HAL_I2C_Mem_Read>

		//if byte is found then start downloading bytes to buffer
		if(byte != 0x00 && byte != 0x255){
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <Flash_read+0x42>
			//FlashTx_buff[Tx_busy++] = byte;
			data_found = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]

		}

		if(data_found == 1){
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d118      	bne.n	80008ca <Flash_read+0x7a>
				FlashTx_buff[FlashTx_busy++] = byte;
 8000898:	7979      	ldrb	r1, [r7, #5]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <Flash_read+0x94>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	b2d0      	uxtb	r0, r2
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <Flash_read+0x94>)
 80008a4:	7010      	strb	r0, [r2, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	b289      	uxth	r1, r1
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <Flash_read+0x98>)
 80008ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				if(FlashTx_busy >= FLASHTX_BUFF_SIZE){
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <Flash_read+0x94>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da02      	bge.n	80008c0 <Flash_read+0x70>
					FlashTx_busy = 0;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <Flash_read+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
				}
				//if too many zeros found stop downlaoding to save only data
				if(byte == 0x00 || byte == 0x255){
 80008c0:	797b      	ldrb	r3, [r7, #5]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d101      	bne.n	80008ca <Flash_read+0x7a>
					data_found = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	71fb      	strb	r3, [r7, #7]
	for(page = 0; page <= 128; page++){
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	3301      	adds	r3, #1
 80008ce:	71bb      	strb	r3, [r7, #6]
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	2b80      	cmp	r3, #128	; 0x80
 80008d4:	d9ca      	bls.n	800086c <Flash_read+0x1c>
				}
		}

}

	return FlashTx_buff;
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <Flash_read+0x98>)

}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000268 	.word	0x20000268
 80008e4:	2000010d 	.word	0x2000010d
 80008e8:	20000168 	.word	0x20000168

080008ec <Flash_getFreeSpace>:

// function to get first free address to write to
int Flash_getFreeSpace(){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af04      	add	r7, sp, #16
	uint8_t byte = 0x00;
 80008f2:	2300      	movs	r3, #0
 80008f4:	70fb      	strb	r3, [r7, #3]
	int i = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]

	while(byte != 0xff){
 80008fa:	e010      	b.n	800091e <Flash_getFreeSpace+0x32>
		HAL_I2C_Mem_Read(&hi2c1, 0xa1, i, 1, (uint8_t*)&byte, sizeof(byte), 1000);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	2301      	movs	r3, #1
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	1cfb      	adds	r3, r7, #3
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2301      	movs	r3, #1
 8000910:	21a1      	movs	r1, #161	; 0xa1
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <Flash_getFreeSpace+0x44>)
 8000914:	f002 fc00 	bl	8003118 <HAL_I2C_Mem_Read>
		i++;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3301      	adds	r3, #1
 800091c:	607b      	str	r3, [r7, #4]
	while(byte != 0xff){
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	2bff      	cmp	r3, #255	; 0xff
 8000922:	d1eb      	bne.n	80008fc <Flash_getFreeSpace+0x10>

	}
	return i;
 8000924:	687b      	ldr	r3, [r7, #4]


}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000268 	.word	0x20000268

08000934 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b69      	ldr	r3, [pc, #420]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a68      	ldr	r2, [pc, #416]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b66      	ldr	r3, [pc, #408]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000962:	4b63      	ldr	r3, [pc, #396]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a62      	ldr	r2, [pc, #392]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000968:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b60      	ldr	r3, [pc, #384]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b5d      	ldr	r3, [pc, #372]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a5c      	ldr	r2, [pc, #368]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b5a      	ldr	r3, [pc, #360]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b57      	ldr	r3, [pc, #348]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a56      	ldr	r2, [pc, #344]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 8000998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800099c:	6153      	str	r3, [r2, #20]
 800099e:	4b54      	ldr	r3, [pc, #336]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	4b51      	ldr	r3, [pc, #324]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a50      	ldr	r2, [pc, #320]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 80009b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b4e      	ldr	r3, [pc, #312]	; (8000af0 <MX_GPIO_Init+0x1bc>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 80009c2:	2200      	movs	r2, #0
 80009c4:	f641 515f 	movw	r1, #7519	; 0x1d5f
 80009c8:	484a      	ldr	r0, [pc, #296]	; (8000af4 <MX_GPIO_Init+0x1c0>)
 80009ca:	f002 fa0f 	bl	8002dec <HAL_GPIO_WritePin>
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 51ef 	mov.w	r1, #7648	; 0x1de0
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f002 fa08 	bl	8002dec <HAL_GPIO_WritePin>
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 80009dc:	2200      	movs	r2, #0
 80009de:	f24e 0107 	movw	r1, #57351	; 0xe007
 80009e2:	4845      	ldr	r0, [pc, #276]	; (8000af8 <MX_GPIO_Init+0x1c4>)
 80009e4:	f002 fa02 	bl	8002dec <HAL_GPIO_WritePin>
                          |NIE_Pin|ZIE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ZOLSO_GPIO_Port, ZOLSO_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2104      	movs	r1, #4
 80009ec:	4843      	ldr	r0, [pc, #268]	; (8000afc <MX_GPIO_Init+0x1c8>)
 80009ee:	f002 f9fd 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	483a      	ldr	r0, [pc, #232]	; (8000af4 <MX_GPIO_Init+0x1c0>)
 8000a0a:	f001 ff5d 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BIAM_Pin|FIOM_Pin|ZIEM_Pin|NIEM_Pin
 8000a0e:	f641 535f 	movw	r3, #7519	; 0x1d5f
 8000a12:	617b      	str	r3, [r7, #20]
                          |BIASO_Pin|BRO_Pin|BIA_Pin|FIOSO_Pin
                          |ZIESO_Pin|NIESO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4833      	ldr	r0, [pc, #204]	; (8000af4 <MX_GPIO_Init+0x1c0>)
 8000a28:	f001 ff4e 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA9
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9
 8000a2c:	f248 2313 	movw	r3, #33299	; 0x8213
 8000a30:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a32:	2303      	movs	r3, #3
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f001 ff40 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SZASO_Pin|CZASO_Pin|SEC_Pin
 8000a48:	f44f 53ef 	mov.w	r3, #7648	; 0x1de0
 8000a4c:	617b      	str	r3, [r7, #20]
                          |POMMO_Pin|BROMO_Pin|CZEMO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f001 ff30 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8000a68:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481d      	ldr	r0, [pc, #116]	; (8000af4 <MX_GPIO_Init+0x1c0>)
 8000a7e:	f001 ff23 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ZOLM_Pin|ZOL_Pin|CZE_Pin|FIO_Pin
 8000a82:	f24e 0307 	movw	r3, #57351	; 0xe007
 8000a86:	617b      	str	r3, [r7, #20]
                          |NIE_Pin|ZIE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <MX_GPIO_Init+0x1c4>)
 8000a9c:	f001 ff14 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4
 8000aa0:	f641 7330 	movw	r3, #7984	; 0x1f30
 8000aa4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <MX_GPIO_Init+0x1c4>)
 8000ab6:	f001 ff07 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZOLSO_Pin;
 8000aba:	2304      	movs	r3, #4
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ZOLSO_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <MX_GPIO_Init+0x1c8>)
 8000ad2:	f001 fef9 	bl	80028c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2028      	movs	r0, #40	; 0x28
 8000adc:	f001 fe20 	bl	8002720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae0:	2028      	movs	r0, #40	; 0x28
 8000ae2:	f001 fe49 	bl	8002778 <HAL_NVIC_EnableIRQ>

}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000800 	.word	0x48000800
 8000af8:	48000400 	.word	0x48000400
 8000afc:	48000c00 	.word	0x48000c00

08000b00 <handleSetClockMode>:



//handler for setMode

void handleSetClockMode(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

		int mode = parseIntData();
 8000b06:	f000 fe6d 	bl	80017e4 <parseIntData>
 8000b0a:	6078      	str	r0, [r7, #4]

		if(mode == 1 || mode == 2){
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d002      	beq.n	8000b18 <handleSetClockMode+0x18>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d117      	bne.n	8000b48 <handleSetClockMode+0x48>

			clock_mode = mode;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <handleSetClockMode+0x58>)
 8000b1e:	701a      	strb	r2, [r3, #0]

			if(mode == 2){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d10c      	bne.n	8000b40 <handleSetClockMode+0x40>
				resetPins();
 8000b26:	f7ff fd5b 	bl	80005e0 <resetPins>
				displayHour(hour_to_show, minute_to_show, second_to_show);
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <handleSetClockMode+0x5c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <handleSetClockMode+0x60>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <handleSetClockMode+0x64>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	f7ff fc74 	bl	8000428 <displayHour>
			}

			Send("$Success=1#\r\n");
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <handleSetClockMode+0x68>)
 8000b42:	f000 fbc3 	bl	80012cc <Send>
		if(mode == 1 || mode == 2){
 8000b46:	e003      	b.n	8000b50 <handleSetClockMode+0x50>

		}else {
				sendFail(4);
 8000b48:	2004      	movs	r0, #4
 8000b4a:	f001 f811 	bl	8001b70 <sendFail>
		}


}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000078 	.word	0x20000078
 8000b5c:	20000140 	.word	0x20000140
 8000b60:	20000141 	.word	0x20000141
 8000b64:	20000142 	.word	0x20000142
 8000b68:	0800c080 	.word	0x0800c080

08000b6c <handleShowHour>:


//handler for showHour
void handleShowHour(uint8_t  hour, uint8_t  minute, uint8_t second){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	460b      	mov	r3, r1
 8000b78:	71bb      	strb	r3, [r7, #6]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	717b      	strb	r3, [r7, #5]
	resetPins();
 8000b7e:	f7ff fd2f 	bl	80005e0 <resetPins>

		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00c      	beq.n	8000ba2 <handleShowHour+0x36>
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b16      	cmp	r3, #22
 8000b8c:	d809      	bhi.n	8000ba2 <handleShowHour+0x36>
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	2b3b      	cmp	r3, #59	; 0x3b
 8000b92:	d806      	bhi.n	8000ba2 <handleShowHour+0x36>
 8000b94:	797b      	ldrb	r3, [r7, #5]
 8000b96:	2b3b      	cmp	r3, #59	; 0x3b
 8000b98:	d803      	bhi.n	8000ba2 <handleShowHour+0x36>

			 hour_displayed = 0;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <handleShowHour+0x48>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e003      	b.n	8000baa <handleShowHour+0x3e>

			} else {
				sendFail(4);
 8000ba2:	2004      	movs	r0, #4
 8000ba4:	f000 ffe4 	bl	8001b70 <sendFail>
	        }


}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000125 	.word	0x20000125

08000bb8 <compareAlarms>:

//compare alarms that are set
/**
 * @returns earlier alarm in form of 1/2
 */
uint8_t compareAlarms(RTC_AlarmTypeDef alarmA, RTC_AlarmTypeDef alarmB){
 8000bb8:	b084      	sub	sp, #16
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	f107 0c10 	add.w	ip, r7, #16
 8000bc4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			//todo
			//add month checking
			uint8_t alarmA_day = alarmA.AlarmDateWeekDay;
 8000bc8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bcc:	71fb      	strb	r3, [r7, #7]
			uint8_t alarmA_hours = alarmA.AlarmTime.Hours;
 8000bce:	7c3b      	ldrb	r3, [r7, #16]
 8000bd0:	71bb      	strb	r3, [r7, #6]
			uint8_t alarmA_minutes = alarmA.AlarmTime.Minutes;
 8000bd2:	7c7b      	ldrb	r3, [r7, #17]
 8000bd4:	717b      	strb	r3, [r7, #5]
			uint8_t alarmA_seconds = alarmA.AlarmTime.Seconds;
 8000bd6:	7cbb      	ldrb	r3, [r7, #18]
 8000bd8:	713b      	strb	r3, [r7, #4]

			uint8_t alarmB_day = alarmB.AlarmDateWeekDay;
 8000bda:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000bde:	70fb      	strb	r3, [r7, #3]
			uint8_t alarmB_hours = alarmB.AlarmTime.Hours;
 8000be0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000be4:	70bb      	strb	r3, [r7, #2]
			uint8_t alarmB_minutes = alarmB.AlarmTime.Minutes;
 8000be6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000bea:	707b      	strb	r3, [r7, #1]
			uint8_t alarmB_seconds = alarmB.AlarmTime.Seconds;
 8000bec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000bf0:	703b      	strb	r3, [r7, #0]

			if(alarmA_day == alarmB_day){ //check if day is same if yes - check if hour is the same
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d125      	bne.n	8000c46 <compareAlarms+0x8e>

				if(alarmA_hours == alarmB_hours){
 8000bfa:	79ba      	ldrb	r2, [r7, #6]
 8000bfc:	78bb      	ldrb	r3, [r7, #2]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d119      	bne.n	8000c36 <compareAlarms+0x7e>

					if(alarmA_minutes == alarmB_minutes){
 8000c02:	797a      	ldrb	r2, [r7, #5]
 8000c04:	787b      	ldrb	r3, [r7, #1]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d10d      	bne.n	8000c26 <compareAlarms+0x6e>


						if(alarmA_seconds == alarmB_seconds){
 8000c0a:	793a      	ldrb	r2, [r7, #4]
 8000c0c:	783b      	ldrb	r3, [r7, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d101      	bne.n	8000c16 <compareAlarms+0x5e>
							return 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e01e      	b.n	8000c54 <compareAlarms+0x9c>
						} else {
							if(alarmA_seconds < alarmB_seconds){
 8000c16:	793a      	ldrb	r2, [r7, #4]
 8000c18:	783b      	ldrb	r3, [r7, #0]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d201      	bcs.n	8000c22 <compareAlarms+0x6a>
								return 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e018      	b.n	8000c54 <compareAlarms+0x9c>
							} else {
								return 2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	e016      	b.n	8000c54 <compareAlarms+0x9c>



					}else {

						if(alarmA_minutes < alarmB_minutes){
 8000c26:	797a      	ldrb	r2, [r7, #5]
 8000c28:	787b      	ldrb	r3, [r7, #1]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d201      	bcs.n	8000c32 <compareAlarms+0x7a>
							return 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e010      	b.n	8000c54 <compareAlarms+0x9c>
						} else {
							return 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	e00e      	b.n	8000c54 <compareAlarms+0x9c>
						}
					}

				} else {

					if(alarmA_hours < alarmB_hours){
 8000c36:	79ba      	ldrb	r2, [r7, #6]
 8000c38:	78bb      	ldrb	r3, [r7, #2]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d201      	bcs.n	8000c42 <compareAlarms+0x8a>

						return 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e008      	b.n	8000c54 <compareAlarms+0x9c>
					} else {
						return 2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	e006      	b.n	8000c54 <compareAlarms+0x9c>
					}

				}
			} else {
				if(alarmA_day < alarmB_day){
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d201      	bcs.n	8000c52 <compareAlarms+0x9a>
					return 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e000      	b.n	8000c54 <compareAlarms+0x9c>
				} else {
					return 2;
 8000c52:	2302      	movs	r3, #2
				}

			}


}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	b004      	add	sp, #16
 8000c60:	4770      	bx	lr
	...

08000c64 <getAlarm>:


/**
 * @param INT {alarm} 1 for alarm A 2 for alarmB
 */
RTC_AlarmTypeDef getAlarm(uint8_t whichAlarm){
 8000c64:	b5b0      	push	{r4, r5, r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
	RTC_AlarmTypeDef alarm;

	switch(whichAlarm){
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d002      	beq.n	8000c7c <getAlarm+0x18>
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d009      	beq.n	8000c8e <getAlarm+0x2a>
 8000c7a:	e011      	b.n	8000ca0 <getAlarm+0x3c>
	case 1:
		HAL_RTC_GetAlarm(&hrtc, &alarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8000c7c:	f107 0108 	add.w	r1, r7, #8
 8000c80:	2300      	movs	r3, #0
 8000c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <getAlarm+0x5c>)
 8000c88:	f006 ff7a 	bl	8007b80 <HAL_RTC_GetAlarm>
		break;
 8000c8c:	e008      	b.n	8000ca0 <getAlarm+0x3c>
	case 2:
		HAL_RTC_GetAlarm(&hrtc, &alarm, RTC_ALARM_B, RTC_FORMAT_BIN);
 8000c8e:	f107 0108 	add.w	r1, r7, #8
 8000c92:	2300      	movs	r3, #0
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <getAlarm+0x5c>)
 8000c9a:	f006 ff71 	bl	8007b80 <HAL_RTC_GetAlarm>
		break;
 8000c9e:	bf00      	nop
	}



	return alarm;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	461d      	mov	r5, r3
 8000ca4:	f107 0408 	add.w	r4, r7, #8
 8000ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cb4:	e885 0003 	stmia.w	r5, {r0, r1}




}
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	3730      	adds	r7, #48	; 0x30
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc0:	20000564 	.word	0x20000564

08000cc4 <handleSetAlarm>:

//handler for setAlarm
void handleSetAlarm(RTC_DateTypeDef sDate, uint8_t day, uint8_t month, uint16_t year, uint8_t hour, uint8_t minute, uint8_t second){
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	b0d9      	sub	sp, #356	; 0x164
 8000cc8:	af10      	add	r7, sp, #64	; 0x40
 8000cca:	1d3c      	adds	r4, r7, #4
 8000ccc:	6020      	str	r0, [r4, #0]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	1cfb      	adds	r3, r7, #3
 8000cd6:	4622      	mov	r2, r4
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	1cbb      	adds	r3, r7, #2
 8000cdc:	4602      	mov	r2, r0
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	460a      	mov	r2, r1
 8000ce4:	801a      	strh	r2, [r3, #0]

	uint8_t max_days = getNumOfDaysInMonth(month); //get maximum days in a month
 8000ce6:	1cbb      	adds	r3, r7, #2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fcec 	bl	80006c8 <getNumOfDaysInMonth>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	//Send("Encoded: %d\r\n", encoded);




	if(year >= 22 && (day > 0 && day <= max_days) && (month > 0 && month <= 12)){
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	2b15      	cmp	r3, #21
 8000cfc:	f240 813b 	bls.w	8000f76 <handleSetAlarm+0x2b2>
 8000d00:	1cfb      	adds	r3, r7, #3
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8136 	beq.w	8000f76 <handleSetAlarm+0x2b2>
 8000d0a:	1cfb      	adds	r3, r7, #3
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000d12:	429a      	cmp	r2, r3
 8000d14:	f200 812f 	bhi.w	8000f76 <handleSetAlarm+0x2b2>
 8000d18:	1cbb      	adds	r3, r7, #2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 812a 	beq.w	8000f76 <handleSetAlarm+0x2b2>
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b0c      	cmp	r3, #12
 8000d28:	f200 8125 	bhi.w	8000f76 <handleSetAlarm+0x2b2>

		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000d2c:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 811c 	beq.w	8000f6e <handleSetAlarm+0x2aa>
 8000d36:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8000d3a:	2b16      	cmp	r3, #22
 8000d3c:	f200 8117 	bhi.w	8000f6e <handleSetAlarm+0x2aa>
 8000d40:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8000d44:	2b3b      	cmp	r3, #59	; 0x3b
 8000d46:	f200 8112 	bhi.w	8000f6e <handleSetAlarm+0x2aa>
 8000d4a:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8000d4e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d50:	f200 810d 	bhi.w	8000f6e <handleSetAlarm+0x2aa>
				alarm_to_set[0] = day;
 8000d54:	1cfb      	adds	r3, r7, #3
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				alarm_to_set[1] = month;
 8000d5c:	1cbb      	adds	r3, r7, #2
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				alarm_to_set[2] = year;
 8000d64:	463b      	mov	r3, r7
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				alarm_to_set[3] = hour;
 8000d6c:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8000d70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				alarm_to_set[4] = minute;
 8000d74:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8000d78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				alarm_to_set[5] = second;
 8000d7c:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8000d80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			Send("$Success=1#\r\n");
 8000d84:	4880      	ldr	r0, [pc, #512]	; (8000f88 <handleSetAlarm+0x2c4>)
 8000d86:	f000 faa1 	bl	80012cc <Send>



			sAlarm.AlarmTime.Hours = hour;
 8000d8a:	4a80      	ldr	r2, [pc, #512]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000d8c:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8000d90:	7013      	strb	r3, [r2, #0]
			sAlarm.AlarmTime.Minutes = minute;
 8000d92:	4a7e      	ldr	r2, [pc, #504]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000d94:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 8000d98:	7053      	strb	r3, [r2, #1]
			sAlarm.AlarmTime.Seconds = second;
 8000d9a:	4a7c      	ldr	r2, [pc, #496]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000d9c:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8000da0:	7093      	strb	r3, [r2, #2]
			sAlarm.AlarmDateWeekDay = day;
 8000da2:	4a7a      	ldr	r2, [pc, #488]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000da4:	1cfb      	adds	r3, r7, #3
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	f882 3020 	strb.w	r3, [r2, #32]


			int start_idx = Flash_getFreeSpace() - 1;
 8000dac:	f7ff fd9e 	bl	80008ec <Flash_getFreeSpace>
 8000db0:	4603      	mov	r3, r0
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

			Send("Start idx: %d\r\n", start_idx);
 8000db8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000dbc:	4874      	ldr	r0, [pc, #464]	; (8000f90 <handleSetAlarm+0x2cc>)
 8000dbe:	f000 fa85 	bl	80012cc <Send>

			//Flash_write(alarm_to_set, start_idx);

			//=========get alarms from eeprom to check whether to set new alarm or not===========

			int *alarms = Flash_read();
 8000dc2:	f7ff fd45 	bl	8000850 <Flash_read>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114


			//get two already defined alarms
			RTC_AlarmTypeDef alarmA = getAlarm((uint8_t)1);
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff46 	bl	8000c64 <getAlarm>
			RTC_AlarmTypeDef alarmB = getAlarm((uint8_t)2);
 8000dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff40 	bl	8000c64 <getAlarm>
//			Send("AlarmA: %d/%d:%d\r\n AlarmB: %d/%d:%d\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes,
//					alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes);


			//check which of the two is earlier
			uint8_t earlierAlarm = compareAlarms(alarmA, alarmB);
 8000de4:	f107 0608 	add.w	r6, r7, #8
 8000de8:	ad06      	add	r5, sp, #24
 8000dea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dfe:	466d      	mov	r5, sp
 8000e00:	f106 0410 	add.w	r4, r6, #16
 8000e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e14:	f7ff fed0 	bl	8000bb8 <compareAlarms>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

			//if alarm is earlier set that alarm instead and set the other alarm to oposite of next alarm


			//check alarm to set with earlier alarm
			uint8_t alarmToRecheck = compareAlarms(getAlarm(earlierAlarm)/* wczesniejszy z dwoch zdefiniowanych*/ , sAlarm); //will return 1 if earlier is earlier
 8000e1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e22:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff1b 	bl	8000c64 <getAlarm>
 8000e2e:	4b57      	ldr	r3, [pc, #348]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000e30:	ac06      	add	r4, sp, #24
 8000e32:	461d      	mov	r5, r3
 8000e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e40:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e44:	466d      	mov	r5, sp
 8000e46:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e52:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e5c:	f7ff feac 	bl	8000bb8 <compareAlarms>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112



			//if alarm to set is earlier than earlier alarm - zastąp
			if(alarmToRecheck == 2){
 8000e66:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d116      	bne.n	8000e9c <handleSetAlarm+0x1d8>

				//set earlier alarm to alarm b - SET ALARM A TO BE B
				RTC_AlarmTypeDef swapAlarmAtoB = getAlarm(earlierAlarm);
 8000e6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e72:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fef3 	bl	8000c64 <getAlarm>
				swapAlarmAtoB.Alarm = RTC_ALARM_B;
 8000e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e82:	67fb      	str	r3, [r7, #124]	; 0x7c

				HAL_RTC_SetAlarm_IT(&hrtc, &swapAlarmAtoB, RTC_FORMAT_BIN);
 8000e84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4841      	ldr	r0, [pc, #260]	; (8000f94 <handleSetAlarm+0x2d0>)
 8000e8e:	f006 fb8b 	bl	80075a8 <HAL_RTC_SetAlarm_IT>

				//set alarm to set to primary ALARM
				sAlarm.Alarm = RTC_ALARM_A;
 8000e92:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
 8000e9a:	e059      	b.n	8000f50 <handleSetAlarm+0x28c>


			} else {	//else check second  // later alarm
				if(compareAlarms(getAlarm(1), sAlarm) == 2){
 8000e9c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fede 	bl	8000c64 <getAlarm>
 8000ea8:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000eaa:	ac06      	add	r4, sp, #24
 8000eac:	461d      	mov	r5, r3
 8000eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eba:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ebe:	466d      	mov	r5, sp
 8000ec0:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ecc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ed0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed6:	f7ff fe6f 	bl	8000bb8 <compareAlarms>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d104      	bne.n	8000eea <handleSetAlarm+0x226>
					sAlarm.Alarm = RTC_ALARM_A;
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ee8:	e032      	b.n	8000f50 <handleSetAlarm+0x28c>



				} else {
					//compare if alarm to set is later than alarm B
					if(compareAlarms(getAlarm(2), sAlarm) == 1){
 8000eea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000eee:	2102      	movs	r1, #2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff feb7 	bl	8000c64 <getAlarm>
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000ef8:	ac06      	add	r4, sp, #24
 8000efa:	461d      	mov	r5, r3
 8000efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f08:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f0c:	466d      	mov	r5, sp
 8000f0e:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8000f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f24:	f7ff fe48 	bl	8000bb8 <compareAlarms>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d106      	bne.n	8000f3c <handleSetAlarm+0x278>
						//if alarm is later than alarm B, store it in flash
						Flash_write(alarm_to_set, start_idx);
 8000f2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f32:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fc40 	bl	80007bc <Flash_write>
					}

					sAlarm.Alarm = RTC_ALARM_B;				// jesli jest wczesniejszy to 1 przechodzi na 2 a on jest 1
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24

			}



			while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8000f44:	e004      	b.n	8000f50 <handleSetAlarm+0x28c>
				Error_Handler();
 8000f46:	f000 ff37 	bl	8001db8 <Error_Handler>
				sendFail(4);
 8000f4a:	2004      	movs	r0, #4
 8000f4c:	f000 fe10 	bl	8001b70 <sendFail>
			while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 8000f50:	2200      	movs	r2, #0
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <handleSetAlarm+0x2c8>)
 8000f54:	480f      	ldr	r0, [pc, #60]	; (8000f94 <handleSetAlarm+0x2d0>)
 8000f56:	f006 fb27 	bl	80075a8 <HAL_RTC_SetAlarm_IT>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f2      	bne.n	8000f46 <handleSetAlarm+0x282>
			};

			HAL_Delay(5);
 8000f60:	2005      	movs	r0, #5
 8000f62:	f001 fac9 	bl	80024f8 <HAL_Delay>
//
//			Send("\r\nAlarmA: %d/%d:%d\r\n AlarmB: %d/%d:%d\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes,
//				alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes);

			//get alarms to display it
			handleGetAlarms();
 8000f66:	f000 f825 	bl	8000fb4 <handleGetAlarms>
		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000f6a:	bf00      	nop
 8000f6c:	e007      	b.n	8000f7e <handleSetAlarm+0x2ba>

			} else { //send fail if data not correct
				sendFail(2);
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f000 fdfe 	bl	8001b70 <sendFail>
		if((hour > 0 && hour < 23) && (minute >= 0 && minute <= 59) && (second >= 0 && second <= 59)){
 8000f74:	e003      	b.n	8000f7e <handleSetAlarm+0x2ba>
			}

	} else {
		sendFail(2);
 8000f76:	2002      	movs	r0, #2
 8000f78:	f000 fdfa 	bl	8001b70 <sendFail>
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f88:	0800c080 	.word	0x0800c080
 8000f8c:	20000338 	.word	0x20000338
 8000f90:	0800c090 	.word	0x0800c090
 8000f94:	20000564 	.word	0x20000564

08000f98 <handleResetAlarms>:


void handleResetAlarms(){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

	Flash_flush();
 8000f9c:	f7ff fbea 	bl	8000774 <Flash_flush>
	FLASH_init();
 8000fa0:	f7ff fbc8 	bl	8000734 <FLASH_init>
	Send("$Success=1#\r\n");
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <handleResetAlarms+0x18>)
 8000fa6:	f000 f991 	bl	80012cc <Send>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	0800c080 	.word	0x0800c080

08000fb4 <handleGetAlarms>:



void handleGetAlarms(){
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb6:	b09b      	sub	sp, #108	; 0x6c
 8000fb8:	af06      	add	r7, sp, #24

	RTC_AlarmTypeDef alarmA = getAlarm((uint8_t)1);
 8000fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fe4f 	bl	8000c64 <getAlarm>
	RTC_AlarmTypeDef alarmB = getAlarm((uint8_t)2);
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fe4a 	bl	8000c64 <getAlarm>


		Send("$Success={AlarmA: %d/%d:%d:%d  AlarmB: %d/%d:%d:%d}#\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes, alarmA.AlarmTime.Seconds,
 8000fd0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000fd4:	461d      	mov	r5, r3
 8000fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fda:	461e      	mov	r6, r3
 8000fdc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fe0:	469c      	mov	ip, r3
 8000fe2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
							alarmB.AlarmDateWeekDay, alarmB.AlarmTime.Hours, alarmB.AlarmTime.Minutes, alarmA.AlarmTime.Seconds);
 8000fe6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fea:	7839      	ldrb	r1, [r7, #0]
 8000fec:	7878      	ldrb	r0, [r7, #1]
 8000fee:	f897 402a 	ldrb.w	r4, [r7, #42]	; 0x2a
		Send("$Success={AlarmA: %d/%d:%d:%d  AlarmB: %d/%d:%d:%d}#\r\n", alarmA.AlarmDateWeekDay, alarmA.AlarmTime.Hours, alarmA.AlarmTime.Minutes, alarmA.AlarmTime.Seconds,
 8000ff2:	9404      	str	r4, [sp, #16]
 8000ff4:	9003      	str	r0, [sp, #12]
 8000ff6:	9102      	str	r1, [sp, #8]
 8000ff8:	9201      	str	r2, [sp, #4]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4663      	mov	r3, ip
 8000ffe:	4632      	mov	r2, r6
 8001000:	4629      	mov	r1, r5
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <handleGetAlarms+0x5c>)
 8001004:	f000 f962 	bl	80012cc <Send>




}
 8001008:	bf00      	nop
 800100a:	3754      	adds	r7, #84	; 0x54
 800100c:	46bd      	mov	sp, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	0800c0a0 	.word	0x0800c0a0

08001014 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_I2C1_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_I2C1_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_I2C1_Init+0x74>)
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <MX_I2C1_Init+0x7c>)
 8001022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_I2C1_Init+0x74>)
 800102c:	2201      	movs	r2, #1
 800102e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_I2C1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_I2C1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <MX_I2C1_Init+0x74>)
 8001050:	f001 ff48 	bl	8002ee4 <HAL_I2C_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105a:	f000 fead 	bl	8001db8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105e:	2100      	movs	r1, #0
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <MX_I2C1_Init+0x74>)
 8001062:	f003 fe29 	bl	8004cb8 <HAL_I2CEx_ConfigAnalogFilter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800106c:	f000 fea4 	bl	8001db8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001070:	2100      	movs	r1, #0
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_I2C1_Init+0x74>)
 8001074:	f003 fe90 	bl	8004d98 <HAL_I2CEx_ConfigDigitalFilter>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107e:	f000 fe9b 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000268 	.word	0x20000268
 800108c:	40005400 	.word	0x40005400
 8001090:	2000090e 	.word	0x2000090e

08001094 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <HAL_I2C_MspInit+0x8c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d12f      	bne.n	8001116 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6153      	str	r3, [r2, #20]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ce:	23c0      	movs	r3, #192	; 0xc0
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d2:	2312      	movs	r3, #18
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010de:	2304      	movs	r3, #4
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	480f      	ldr	r0, [pc, #60]	; (8001128 <HAL_I2C_MspInit+0x94>)
 80010ea:	f001 fbed 	bl	80028c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_I2C_MspInit+0x90>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	201f      	movs	r0, #31
 800110c:	f001 fb08 	bl	8002720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001110:	201f      	movs	r0, #31
 8001112:	f001 fb31 	bl	8002778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40005400 	.word	0x40005400
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400

0800112c <delay_1hz>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay_1hz(){
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	x1hzTime++;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <delay_1hz+0x30>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <delay_1hz+0x30>)
 800113a:	801a      	strh	r2, [r3, #0]
	if( x1hzTime >= 1000){
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <delay_1hz+0x30>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001144:	d305      	bcc.n	8001152 <delay_1hz+0x26>
		x1hz = 1;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <delay_1hz+0x34>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
		x1hzTime = 0;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <delay_1hz+0x30>)
 800114e:	2200      	movs	r2, #0
 8001150:	801a      	strh	r2, [r3, #0]
	}
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	2000010e 	.word	0x2000010e
 8001160:	20000112 	.word	0x20000112

08001164 <delay_4hz>:

void delay_4hz(){
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
	x4hzTime++;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <delay_4hz+0x30>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <delay_4hz+0x30>)
 8001172:	801a      	strh	r2, [r3, #0]

	if(x4hzTime >= 250){
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <delay_4hz+0x30>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	2bf9      	cmp	r3, #249	; 0xf9
 800117a:	d905      	bls.n	8001188 <delay_4hz+0x24>
		x4hz = 1;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <delay_4hz+0x34>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
		x4hzTime = 0;
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <delay_4hz+0x30>)
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]
	}

}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000110 	.word	0x20000110
 8001198:	20000113 	.word	0x20000113

0800119c <delayUs>:

/* TIMER DELAYS */
void delayUs(uint16_t us){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <delayUs+0x30>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 80011ae:	bf00      	nop
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <delayUs+0x34>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3f9      	bcc.n	80011b0 <delayUs+0x14>
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000958 	.word	0x20000958
 80011d0:	2000090c 	.word	0x2000090c

080011d4 <delayMs>:

void delayMs(uint16_t ms){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 80011de:	2300      	movs	r3, #0
 80011e0:	81fb      	strh	r3, [r7, #14]
 80011e2:	e006      	b.n	80011f2 <delayMs+0x1e>
		delayUs(1000); //1ms delay
 80011e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e8:	f7ff ffd8 	bl	800119c <delayUs>
	for(uint16_t i = 0; i < ms; i++){
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	3301      	adds	r3, #1
 80011f0:	81fb      	strh	r3, [r7, #14]
 80011f2:	89fa      	ldrh	r2, [r7, #14]
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d3f4      	bcc.n	80011e4 <delayMs+0x10>
	}
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <handleBlinkCommand>:
	blink_mode = 1;



}
void handleBlinkCommand(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	if(led_delay <= time_on){
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <handleBlinkCommand+0x60>)
 800120a:	881a      	ldrh	r2, [r3, #0]
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <handleBlinkCommand+0x64>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	b29b      	uxth	r3, r3
 8001212:	429a      	cmp	r2, r3
 8001214:	d805      	bhi.n	8001222 <handleBlinkCommand+0x1e>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2140      	movs	r1, #64	; 0x40
 800121a:	4814      	ldr	r0, [pc, #80]	; (800126c <handleBlinkCommand+0x68>)
 800121c:	f001 fde6 	bl	8002dec <HAL_GPIO_WritePin>
		if(blink_count <= 0){
			blink_mode = 0;
		}
	}

}
 8001220:	e01e      	b.n	8001260 <handleBlinkCommand+0x5c>
	} else if(led_delay <= time_off){
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <handleBlinkCommand+0x60>)
 8001224:	881a      	ldrh	r2, [r3, #0]
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <handleBlinkCommand+0x6c>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	429a      	cmp	r2, r3
 800122e:	d805      	bhi.n	800123c <handleBlinkCommand+0x38>
		HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <handleBlinkCommand+0x68>)
 8001236:	f001 fdd9 	bl	8002dec <HAL_GPIO_WritePin>
}
 800123a:	e011      	b.n	8001260 <handleBlinkCommand+0x5c>
		led_delay = 0;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <handleBlinkCommand+0x60>)
 800123e:	2200      	movs	r2, #0
 8001240:	801a      	strh	r2, [r3, #0]
		blink_count -= 1;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <handleBlinkCommand+0x70>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	3b01      	subs	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <handleBlinkCommand+0x70>)
 800124e:	801a      	strh	r2, [r3, #0]
		if(blink_count <= 0){
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <handleBlinkCommand+0x70>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <handleBlinkCommand+0x5c>
			blink_mode = 0;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <handleBlinkCommand+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000158 	.word	0x20000158
 8001268:	2000007a 	.word	0x2000007a
 800126c:	48000800 	.word	0x48000800
 8001270:	2000014c 	.word	0x2000014c
 8001274:	2000014e 	.word	0x2000014e
 8001278:	2000014b 	.word	0x2000014b

0800127c <UART_init>:
/* ===== init usart ==== */
void UART_init(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	Rx_empty = 0;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <UART_init+0x38>)
 8001282:	2200      	movs	r2, #0
 8001284:	801a      	strh	r2, [r3, #0]
	Rx_busy = 0;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <UART_init+0x3c>)
 8001288:	2200      	movs	r2, #0
 800128a:	801a      	strh	r2, [r3, #0]
	Tx_empty = 0;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <UART_init+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	801a      	strh	r2, [r3, #0]
	Tx_busy = 0;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <UART_init+0x44>)
 8001294:	2200      	movs	r2, #0
 8001296:	801a      	strh	r2, [r3, #0]
	memset(Rx_buff, 0, RX_BUFF_SIZE);
 8001298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129c:	2100      	movs	r1, #0
 800129e:	4809      	ldr	r0, [pc, #36]	; (80012c4 <UART_init+0x48>)
 80012a0:	f009 f8d2 	bl	800a448 <memset>
	memset(Tx_buff, 0, TX_BUFF_SIZE);
 80012a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a8:	2100      	movs	r1, #0
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <UART_init+0x4c>)
 80012ac:	f009 f8cc 	bl	800a448 <memset>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000116 	.word	0x20000116
 80012b8:	20000118 	.word	0x20000118
 80012bc:	2000011a 	.word	0x2000011a
 80012c0:	2000011c 	.word	0x2000011c
 80012c4:	20000708 	.word	0x20000708
 80012c8:	20000364 	.word	0x20000364

080012cc <Send>:

/*send poprawiony - dodano flage */



void Send(char* message, ...){
 80012cc:	b40f      	push	{r0, r1, r2, r3}
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b0c4      	sub	sp, #272	; 0x110
 80012d2:	af00      	add	r7, sp, #0
	char temp[256];

	volatile int idx = Tx_empty;
 80012d4:	4b41      	ldr	r3, [pc, #260]	; (80013dc <Send+0x110>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	601a      	str	r2, [r3, #0]
	int i;

	va_list arglist;
	va_start(arglist, message);
 80012e2:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	601a      	str	r2, [r3, #0]

	vsprintf(temp, message, arglist);
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	f107 000c 	add.w	r0, r7, #12
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80012f6:	f009 f94f 	bl	800a598 <vsiprintf>

	va_end(arglist);

	for(i = 0; i < strlen(temp); i++){
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001300:	e020      	b.n	8001344 <Send+0x78>
		Tx_buff[idx] = temp[i];
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f107 010c 	add.w	r1, r7, #12
 800130c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001310:	440a      	add	r2, r1
 8001312:	7811      	ldrb	r1, [r2, #0]
 8001314:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <Send+0x114>)
 8001316:	54d1      	strb	r1, [r2, r3]
		idx++;
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	601a      	str	r2, [r3, #0]
		if(idx >= TX_BUFF_SIZE){
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001330:	db03      	blt.n	800133a <Send+0x6e>
			idx = 0;
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
	for(i = 0; i < strlen(temp); i++){
 800133a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800133e:	3301      	adds	r3, #1
 8001340:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4618      	mov	r0, r3
 800134a:	f7fe ff53 	bl	80001f4 <strlen>
 800134e:	4602      	mov	r2, r0
 8001350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001354:	429a      	cmp	r2, r3
 8001356:	d8d4      	bhi.n	8001302 <Send+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
		}

	}
	__disable_irq();

	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <Send+0x110>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <Send+0x118>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	429a      	cmp	r2, r3
 800136a:	d127      	bne.n	80013bc <Send+0xf0>
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <Send+0x11c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	69db      	ldr	r3, [r3, #28]
		Tx_empty = idx;
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <Send+0x110>)
 800137c:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = Tx_buff[Tx_busy];
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <Send+0x118>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <Send+0x114>)
 8001388:	5c9a      	ldrb	r2, [r3, r2]
 800138a:	1cfb      	adds	r3, r7, #3
 800138c:	701a      	strb	r2, [r3, #0]
		Tx_busy++;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <Send+0x118>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	3301      	adds	r3, #1
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <Send+0x118>)
 800139a:	801a      	strh	r2, [r3, #0]
		if(Tx_busy >= TX_BUFF_SIZE){
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <Send+0x118>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a6:	d302      	bcc.n	80013ae <Send+0xe2>
			Tx_busy = 0;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <Send+0x118>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	801a      	strh	r2, [r3, #0]
		}

		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80013ae:	1cfb      	adds	r3, r7, #3
 80013b0:	2201      	movs	r2, #1
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <Send+0x11c>)
 80013b6:	f007 fc3b 	bl	8008c30 <HAL_UART_Transmit_IT>
	if((Tx_empty == Tx_busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE == SET))){
 80013ba:	e005      	b.n	80013c8 <Send+0xfc>

	} else {
		Tx_empty = idx;
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <Send+0x110>)
 80013c6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013c8:	b662      	cpsie	i
}
 80013ca:	bf00      	nop
	}
	__enable_irq();


}
 80013cc:	bf00      	nop
 80013ce:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80013d2:	46bd      	mov	sp, r7
 80013d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013d8:	b004      	add	sp, #16
 80013da:	4770      	bx	lr
 80013dc:	2000011a 	.word	0x2000011a
 80013e0:	20000364 	.word	0x20000364
 80013e4:	2000011c 	.word	0x2000011c
 80013e8:	200009a4 	.word	0x200009a4

080013ec <HAL_UART_TxCpltCallback>:


/* send usart callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if(Tx_busy != Tx_empty){
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_UART_TxCpltCallback+0x60>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	429a      	cmp	r2, r3
 8001402:	d01d      	beq.n	8001440 <HAL_UART_TxCpltCallback+0x54>

		uint8_t temp = Tx_buff[Tx_busy];
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_UART_TxCpltCallback+0x64>)
 800140e:	5c9b      	ldrb	r3, [r3, r2]
 8001410:	73fb      	strb	r3, [r7, #15]
		Tx_busy++;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	3301      	adds	r3, #1
 800141a:	b29a      	uxth	r2, r3
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 800141e:	801a      	strh	r2, [r3, #0]

		if(Tx_busy >= TX_BUFF_SIZE){
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800142a:	d302      	bcc.n	8001432 <HAL_UART_TxCpltCallback+0x46>
			Tx_busy = 0;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_UART_TxCpltCallback+0x5c>)
 800142e:	2200      	movs	r2, #0
 8001430:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, &temp, 1);
 8001432:	f107 030f 	add.w	r3, r7, #15
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <HAL_UART_TxCpltCallback+0x68>)
 800143c:	f007 fbf8 	bl	8008c30 <HAL_UART_Transmit_IT>
	}
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000011c 	.word	0x2000011c
 800144c:	2000011a 	.word	0x2000011a
 8001450:	20000364 	.word	0x20000364
 8001454:	200009a4 	.word	0x200009a4

08001458 <HAL_UART_RxCpltCallback>:



/* ===== receive usart callback ===== */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <HAL_UART_RxCpltCallback+0x50>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d11a      	bne.n	80014a0 <HAL_UART_RxCpltCallback+0x48>
		Rx_empty++;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_UART_RxCpltCallback+0x54>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	3301      	adds	r3, #1
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <HAL_UART_RxCpltCallback+0x54>)
 8001476:	801a      	strh	r2, [r3, #0]
		if(Rx_empty >= RX_BUFF_SIZE){
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_UART_RxCpltCallback+0x54>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001482:	d302      	bcc.n	800148a <HAL_UART_RxCpltCallback+0x32>
			Rx_empty = 0;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_UART_RxCpltCallback+0x54>)
 8001486:	2200      	movs	r2, #0
 8001488:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_UART_RxCpltCallback+0x54>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_UART_RxCpltCallback+0x58>)
 8001494:	4413      	add	r3, r2
 8001496:	2201      	movs	r2, #1
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <HAL_UART_RxCpltCallback+0x5c>)
 800149c:	f007 fc36 	bl	8008d0c <HAL_UART_Receive_IT>


	}
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40004400 	.word	0x40004400
 80014ac:	20000116 	.word	0x20000116
 80014b0:	20000708 	.word	0x20000708
 80014b4:	200009a4 	.word	0x200009a4

080014b8 <uart_ready>:

/* ===== check if data stopped being received ===== */

uint8_t uart_ready(){
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	if(Rx_empty == Rx_busy){
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <uart_ready+0x24>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <uart_ready+0x28>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d101      	bne.n	80014d0 <uart_ready+0x18>
		return 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e000      	b.n	80014d2 <uart_ready+0x1a>
	} else {
		return 1;
 80014d0:	2301      	movs	r3, #1
	}
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	20000116 	.word	0x20000116
 80014e0:	20000118 	.word	0x20000118

080014e4 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* ======== RTC =========== */



void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	//2. sprawdzenie czy alarm jest na wczesniejsza date od tego nowego
	//3. jeśli jest wczesniejszy -> ustawienie tego alarmu
	//4. przy callbacku alarmu pobrac alarmy z flasha i sprawdzic kolejny i ustawić go


	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80014ec:	2200      	movs	r2, #0
 80014ee:	4910      	ldr	r1, [pc, #64]	; (8001530 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f005 fe61 	bl	80071b8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 80014f6:	2200      	movs	r2, #0
 80014f8:	490e      	ldr	r1, [pc, #56]	; (8001534 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f005 fff8 	bl	80074f0 <HAL_RTC_GetDate>

	//Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);
	//HAL_GPIO_TogglePin(SEC_GPIO_Port, SEC_Pin);

	 uint8_t hours = sTime.Hours;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	73fb      	strb	r3, [r7, #15]
	 uint8_t minutes = sTime.Minutes;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	73bb      	strb	r3, [r7, #14]
	 uint8_t seconds = sTime.Seconds;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	737b      	strb	r3, [r7, #13]


	 if(clock_mode == 1){
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_RTCEx_WakeUpTimerEventCallback+0x54>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>
		 displayHour(hours, minutes, seconds);
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	7bb9      	ldrb	r1, [r7, #14]
 8001520:	7b7a      	ldrb	r2, [r7, #13]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe ff80 	bl	8000428 <displayHour>





}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000128 	.word	0x20000128
 8001534:	2000013c 	.word	0x2000013c
 8001538:	20000078 	.word	0x20000078

0800153c <HAL_RTC_AlarmAEventCallback>:
/* alarm a callback */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BRO_GPIO_Port, BRO_Pin, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <HAL_RTC_AlarmAEventCallback+0x1c>)
 800154a:	f001 fc4f 	bl	8002dec <HAL_GPIO_WritePin>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	48000800 	.word	0x48000800

0800155c <parseCommand>:


/* ===== PARSERS ===== */

uint8_t test2 = 0;
void parseCommand(){
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af06      	add	r7, sp, #24
	uint8_t picked_command = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	71fb      	strb	r3, [r7, #7]


	//porównywać znak po znaku każdą komendę?
	//todo

	if(strcmp("setMode", command) == 0){
 8001566:	495c      	ldr	r1, [pc, #368]	; (80016d8 <parseCommand+0x17c>)
 8001568:	485c      	ldr	r0, [pc, #368]	; (80016dc <parseCommand+0x180>)
 800156a:	f7fe fe39 	bl	80001e0 <strcmp>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <parseCommand+0x1e>

		handleSetClockMode();
 8001574:	f7ff fac4 	bl	8000b00 <handleSetClockMode>
 8001578:	e0a2      	b.n	80016c0 <parseCommand+0x164>


	} else if (strcmp("setTime", command) == 0){
 800157a:	4957      	ldr	r1, [pc, #348]	; (80016d8 <parseCommand+0x17c>)
 800157c:	4858      	ldr	r0, [pc, #352]	; (80016e0 <parseCommand+0x184>)
 800157e:	f7fe fe2f 	bl	80001e0 <strcmp>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d11c      	bne.n	80015c2 <parseCommand+0x66>
		parseTime();
 8001588:	f000 f8d4 	bl	8001734 <parseTime>
		resetPins();
 800158c:	f7ff f828 	bl	80005e0 <resetPins>

		setTime(sTime, sDate, hour_to_show, minute_to_show, second_to_show);
 8001590:	4b54      	ldr	r3, [pc, #336]	; (80016e4 <parseCommand+0x188>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <parseCommand+0x18c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	4b52      	ldr	r3, [pc, #328]	; (80016ec <parseCommand+0x190>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <parseCommand+0x194>)
 80015aa:	9004      	str	r0, [sp, #16]
 80015ac:	9103      	str	r1, [sp, #12]
 80015ae:	9202      	str	r2, [sp, #8]
 80015b0:	4a50      	ldr	r2, [pc, #320]	; (80016f4 <parseCommand+0x198>)
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	9200      	str	r2, [sp, #0]
 80015ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015bc:	f7fe fefe 	bl	80003bc <setTime>
 80015c0:	e07e      	b.n	80016c0 <parseCommand+0x164>


	} else if (strcmp("getTime", command) == 0) {
 80015c2:	4945      	ldr	r1, [pc, #276]	; (80016d8 <parseCommand+0x17c>)
 80015c4:	484c      	ldr	r0, [pc, #304]	; (80016f8 <parseCommand+0x19c>)
 80015c6:	f7fe fe0b 	bl	80001e0 <strcmp>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d116      	bne.n	80015fe <parseCommand+0xa2>
		Send("$Success=%2.2u:%2.2u:%2.2u#\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80015d0:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <parseCommand+0x194>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <parseCommand+0x194>)
 80015d8:	785b      	ldrb	r3, [r3, #1]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <parseCommand+0x194>)
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	4846      	ldr	r0, [pc, #280]	; (80016fc <parseCommand+0x1a0>)
 80015e2:	f7ff fe73 	bl	80012cc <Send>
		Send("$Success=%2.2u/%2.2u/%2.2u#\r\n", sDate.Date, sDate.Month, sDate.Year);
 80015e6:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <parseCommand+0x198>)
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	4619      	mov	r1, r3
 80015ec:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <parseCommand+0x198>)
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <parseCommand+0x198>)
 80015f4:	78db      	ldrb	r3, [r3, #3]
 80015f6:	4842      	ldr	r0, [pc, #264]	; (8001700 <parseCommand+0x1a4>)
 80015f8:	f7ff fe68 	bl	80012cc <Send>
 80015fc:	e060      	b.n	80016c0 <parseCommand+0x164>


	}else if(strcmp("setAlarm", command) == 0){
 80015fe:	4936      	ldr	r1, [pc, #216]	; (80016d8 <parseCommand+0x17c>)
 8001600:	4840      	ldr	r0, [pc, #256]	; (8001704 <parseCommand+0x1a8>)
 8001602:	f7fe fded 	bl	80001e0 <strcmp>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d123      	bne.n	8001654 <parseCommand+0xf8>
//		uint8_t test = 0x5a;
//		HAL_I2C_Mem_Write(&hi2c1, 0xa0, 0x10, 1, (uint8_t*)&test, sizeof(test), HAL_MAX_DELAY);

		parseDateTime();
 800160c:	f000 f8c0 	bl	8001790 <parseDateTime>
		handleSetAlarm(sDate, day_to_set, month_to_set, year_to_set, hour_to_set, minute_to_set, second_to_set);
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <parseCommand+0x1ac>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461c      	mov	r4, r3
 8001618:	4b3c      	ldr	r3, [pc, #240]	; (800170c <parseCommand+0x1b0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	461d      	mov	r5, r3
 8001620:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <parseCommand+0x1b4>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	461e      	mov	r6, r3
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <parseCommand+0x1b8>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	4b39      	ldr	r3, [pc, #228]	; (8001718 <parseCommand+0x1bc>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4619      	mov	r1, r3
 8001638:	4b38      	ldr	r3, [pc, #224]	; (800171c <parseCommand+0x1c0>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	482d      	ldr	r0, [pc, #180]	; (80016f4 <parseCommand+0x198>)
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	9101      	str	r1, [sp, #4]
 8001644:	9200      	str	r2, [sp, #0]
 8001646:	4633      	mov	r3, r6
 8001648:	462a      	mov	r2, r5
 800164a:	4621      	mov	r1, r4
 800164c:	6800      	ldr	r0, [r0, #0]
 800164e:	f7ff fb39 	bl	8000cc4 <handleSetAlarm>
 8001652:	e035      	b.n	80016c0 <parseCommand+0x164>


	} else if(strcmp("getAlarms", command) == 0){
 8001654:	4920      	ldr	r1, [pc, #128]	; (80016d8 <parseCommand+0x17c>)
 8001656:	4832      	ldr	r0, [pc, #200]	; (8001720 <parseCommand+0x1c4>)
 8001658:	f7fe fdc2 	bl	80001e0 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <parseCommand+0x10c>
		handleGetAlarms();
 8001662:	f7ff fca7 	bl	8000fb4 <handleGetAlarms>
 8001666:	e02b      	b.n	80016c0 <parseCommand+0x164>


	} else if (strcmp("getAlarmsCount", command) == 0){
 8001668:	491b      	ldr	r1, [pc, #108]	; (80016d8 <parseCommand+0x17c>)
 800166a:	482e      	ldr	r0, [pc, #184]	; (8001724 <parseCommand+0x1c8>)
 800166c:	f7fe fdb8 	bl	80001e0 <strcmp>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d024      	beq.n	80016c0 <parseCommand+0x164>



	} else if (strcmp("resetAlarms", command) == 0){
 8001676:	4918      	ldr	r1, [pc, #96]	; (80016d8 <parseCommand+0x17c>)
 8001678:	482b      	ldr	r0, [pc, #172]	; (8001728 <parseCommand+0x1cc>)
 800167a:	f7fe fdb1 	bl	80001e0 <strcmp>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <parseCommand+0x12e>
		handleResetAlarms();
 8001684:	f7ff fc88 	bl	8000f98 <handleResetAlarms>
 8001688:	e01a      	b.n	80016c0 <parseCommand+0x164>

	} else if (strcmp("showHour", command) == 0){
 800168a:	4913      	ldr	r1, [pc, #76]	; (80016d8 <parseCommand+0x17c>)
 800168c:	4827      	ldr	r0, [pc, #156]	; (800172c <parseCommand+0x1d0>)
 800168e:	f7fe fda7 	bl	80001e0 <strcmp>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d110      	bne.n	80016ba <parseCommand+0x15e>

		parseTime();
 8001698:	f000 f84c 	bl	8001734 <parseTime>

		handleShowHour(hour_to_show, minute_to_show, second_to_show);
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <parseCommand+0x188>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <parseCommand+0x18c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4619      	mov	r1, r3
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <parseCommand+0x190>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	f7ff fa5a 	bl	8000b6c <handleShowHour>
 80016b8:	e002      	b.n	80016c0 <parseCommand+0x164>

	}
	else {
		sendFail(1);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f000 fa58 	bl	8001b70 <sendFail>
	}

	//handle picked command

	clearCommand();
 80016c0:	f000 f8ac 	bl	800181c <clearCommand>
	clearData();
 80016c4:	f000 f8ba 	bl	800183c <clearData>
	Frame_busy = 0;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <parseCommand+0x1d4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	801a      	strh	r2, [r3, #0]
				Send("Nieprawidłowa komenda \n\r");

			} */


}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200002b8 	.word	0x200002b8
 80016dc:	0800c0d8 	.word	0x0800c0d8
 80016e0:	0800c0e0 	.word	0x0800c0e0
 80016e4:	20000140 	.word	0x20000140
 80016e8:	20000141 	.word	0x20000141
 80016ec:	20000142 	.word	0x20000142
 80016f0:	20000128 	.word	0x20000128
 80016f4:	2000013c 	.word	0x2000013c
 80016f8:	0800c0e8 	.word	0x0800c0e8
 80016fc:	0800c0f0 	.word	0x0800c0f0
 8001700:	0800c110 	.word	0x0800c110
 8001704:	0800c130 	.word	0x0800c130
 8001708:	20000143 	.word	0x20000143
 800170c:	20000144 	.word	0x20000144
 8001710:	20000146 	.word	0x20000146
 8001714:	20000148 	.word	0x20000148
 8001718:	20000149 	.word	0x20000149
 800171c:	2000014a 	.word	0x2000014a
 8001720:	0800c13c 	.word	0x0800c13c
 8001724:	0800c148 	.word	0x0800c148
 8001728:	0800c158 	.word	0x0800c158
 800172c:	0800c164 	.word	0x0800c164
 8001730:	2000011e 	.word	0x2000011e

08001734 <parseTime>:

}


//parse only time in format HH:MM:SS
void parseTime(){
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af02      	add	r7, sp, #8
	hour_to_show = 0;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <parseTime+0x44>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
	minute_to_show = 0;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <parseTime+0x48>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
	second_to_show = 0;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <parseTime+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]

	 if(sscanf(data, "%d:%d:%d", &hour_to_show, &minute_to_show, &second_to_show) == 3){
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <parseTime+0x4c>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <parseTime+0x48>)
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <parseTime+0x44>)
 8001754:	490b      	ldr	r1, [pc, #44]	; (8001784 <parseTime+0x50>)
 8001756:	480c      	ldr	r0, [pc, #48]	; (8001788 <parseTime+0x54>)
 8001758:	f008 fe96 	bl	800a488 <siscanf>
 800175c:	4603      	mov	r3, r0
 800175e:	2b03      	cmp	r3, #3
 8001760:	d103      	bne.n	800176a <parseTime+0x36>

		 Send("$Success=1#\r\n");
 8001762:	480a      	ldr	r0, [pc, #40]	; (800178c <parseTime+0x58>)
 8001764:	f7ff fdb2 	bl	80012cc <Send>

	 } else {

		 sendFail(2);
	 }
}
 8001768:	e002      	b.n	8001770 <parseTime+0x3c>
		 sendFail(2);
 800176a:	2002      	movs	r0, #2
 800176c:	f000 fa00 	bl	8001b70 <sendFail>
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000140 	.word	0x20000140
 800177c:	20000141 	.word	0x20000141
 8001780:	20000142 	.word	0x20000142
 8001784:	0800c170 	.word	0x0800c170
 8001788:	20000584 	.word	0x20000584
 800178c:	0800c17c 	.word	0x0800c17c

08001790 <parseDateTime>:

//parse date and time at the same time

void parseDateTime(){
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af04      	add	r7, sp, #16

	if(sscanf(data, "%d/%d/%d/%d:%d:%d", &day_to_set, &month_to_set, &year_to_set, &hour_to_set, &minute_to_set, &second_to_set) == 6){
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <parseDateTime+0x34>)
 8001798:	9303      	str	r3, [sp, #12]
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <parseDateTime+0x38>)
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <parseDateTime+0x3c>)
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <parseDateTime+0x40>)
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <parseDateTime+0x44>)
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <parseDateTime+0x48>)
 80017aa:	490c      	ldr	r1, [pc, #48]	; (80017dc <parseDateTime+0x4c>)
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <parseDateTime+0x50>)
 80017ae:	f008 fe6b 	bl	800a488 <siscanf>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b06      	cmp	r3, #6
 80017b6:	d002      	beq.n	80017be <parseDateTime+0x2e>


	} else {
		sendFail(2);
 80017b8:	2002      	movs	r0, #2
 80017ba:	f000 f9d9 	bl	8001b70 <sendFail>
	}
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000014a 	.word	0x2000014a
 80017c8:	20000149 	.word	0x20000149
 80017cc:	20000148 	.word	0x20000148
 80017d0:	20000146 	.word	0x20000146
 80017d4:	20000144 	.word	0x20000144
 80017d8:	20000143 	.word	0x20000143
 80017dc:	0800c18c 	.word	0x0800c18c
 80017e0:	20000584 	.word	0x20000584

080017e4 <parseIntData>:



int parseIntData(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	int single_param = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]


	if(sscanf(data, "%d", &single_param) == 1){
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	461a      	mov	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	; (8001814 <parseIntData+0x30>)
 80017f4:	4808      	ldr	r0, [pc, #32]	; (8001818 <parseIntData+0x34>)
 80017f6:	f008 fe47 	bl	800a488 <siscanf>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <parseIntData+0x20>
		return single_param;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	e002      	b.n	800180a <parseIntData+0x26>
	}
	else {
		sendFail(2);
 8001804:	2002      	movs	r0, #2
 8001806:	f000 f9b3 	bl	8001b70 <sendFail>
	}


}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0800c1a0 	.word	0x0800c1a0
 8001818:	20000584 	.word	0x20000584

0800181c <clearCommand>:


/* ==== clear after command is executed to receive next command " ==== */

void clearCommand(){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	command_busy = 0;
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <clearCommand+0x18>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]

	memset(command, 0, command_size);
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	2100      	movs	r1, #0
 800182a:	4803      	ldr	r0, [pc, #12]	; (8001838 <clearCommand+0x1c>)
 800182c:	f008 fe0c 	bl	800a448 <memset>

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000123 	.word	0x20000123
 8001838:	200002b8 	.word	0x200002b8

0800183c <clearData>:

void clearData(){
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	data_busy = 0;
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <clearData+0x18>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
	memset(data, 0, data_size);
 8001846:	227d      	movs	r2, #125	; 0x7d
 8001848:	2100      	movs	r1, #0
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <clearData+0x1c>)
 800184c:	f008 fdfc 	bl	800a448 <memset>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000124 	.word	0x20000124
 8001858:	20000584 	.word	0x20000584

0800185c <decodeFrame>:


/* ====FRAME LOGIC ====*/

//decode frame and split dat and command
void decodeFrame() {
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0

		uint8_t data_idx = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	75fb      	strb	r3, [r7, #23]
		uint8_t command_idx = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	71fb      	strb	r3, [r7, #7]
		uint8_t command_end_idx = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	75bb      	strb	r3, [r7, #22]
		uint8_t required_pass = 0; //check if all the required signs are in the frame
 800186e:	2300      	movs	r3, #0
 8001870:	757b      	strb	r3, [r7, #21]

	frameLength++;
 8001872:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <decodeFrame+0x168>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	3301      	adds	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b51      	ldr	r3, [pc, #324]	; (80019c4 <decodeFrame+0x168>)
 800187e:	801a      	strh	r2, [r3, #0]

	//check if begining exists
	if(frame[0] == start_sign){
 8001880:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <decodeFrame+0x16c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b24      	cmp	r3, #36	; 0x24
 8001886:	d105      	bne.n	8001894 <decodeFrame+0x38>
		required_pass++;
 8001888:	7d7b      	ldrb	r3, [r7, #21]
 800188a:	3301      	adds	r3, #1
 800188c:	757b      	strb	r3, [r7, #21]
		frame[0] = 0x00;
 800188e:	4b4e      	ldr	r3, [pc, #312]	; (80019c8 <decodeFrame+0x16c>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
		//if char was received, consider it as first sign so the length should be + 1

	}

	//check if end exists
	if(frame[frameLength - 1] == end_sign){
 8001894:	4b4b      	ldr	r3, [pc, #300]	; (80019c4 <decodeFrame+0x168>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	3b01      	subs	r3, #1
 800189c:	4a4a      	ldr	r2, [pc, #296]	; (80019c8 <decodeFrame+0x16c>)
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	2b23      	cmp	r3, #35	; 0x23
 80018a2:	d109      	bne.n	80018b8 <decodeFrame+0x5c>
		required_pass++;
 80018a4:	7d7b      	ldrb	r3, [r7, #21]
 80018a6:	3301      	adds	r3, #1
 80018a8:	757b      	strb	r3, [r7, #21]
		frame[frameLength - 1] = 0x00;
 80018aa:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <decodeFrame+0x168>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a45      	ldr	r2, [pc, #276]	; (80019c8 <decodeFrame+0x16c>)
 80018b4:	2100      	movs	r1, #0
 80018b6:	54d1      	strb	r1, [r2, r3]
	}

	for(int i = 0; i < frameLength; i++){
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	e013      	b.n	80018e6 <decodeFrame+0x8a>
		if(frame[i] == '='){
 80018be:	4a42      	ldr	r2, [pc, #264]	; (80019c8 <decodeFrame+0x16c>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4413      	add	r3, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b3d      	cmp	r3, #61	; 0x3d
 80018c8:	d10a      	bne.n	80018e0 <decodeFrame+0x84>
			required_pass++;
 80018ca:	7d7b      	ldrb	r3, [r7, #21]
 80018cc:	3301      	adds	r3, #1
 80018ce:	757b      	strb	r3, [r7, #21]
			data_idx = i + 1;
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	75fb      	strb	r3, [r7, #23]
			command_end_idx = i - 1;
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	75bb      	strb	r3, [r7, #22]
	for(int i = 0; i < frameLength; i++){
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	3301      	adds	r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <decodeFrame+0x168>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	dbe4      	blt.n	80018be <decodeFrame+0x62>
	}

   //if all required signs are in place, check if command exists
	//===== COMMAND ===== //

	if(required_pass == 3 && (command_end_idx != command_idx)){
 80018f4:	7d7b      	ldrb	r3, [r7, #21]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d12b      	bne.n	8001952 <decodeFrame+0xf6>
 80018fa:	7dba      	ldrb	r2, [r7, #22]
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d027      	beq.n	8001952 <decodeFrame+0xf6>


		//rewrite command to the command table
		for(int i = 1; i <= command_end_idx; i++){
 8001902:	2301      	movs	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e020      	b.n	800194a <decodeFrame+0xee>
			//prevent memory leaks
			if(command_busy >= command_size){
 8001908:	4b30      	ldr	r3, [pc, #192]	; (80019cc <decodeFrame+0x170>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	b25b      	sxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	da09      	bge.n	8001928 <decodeFrame+0xcc>
				command_busy = 0;
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <decodeFrame+0x170>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
				memset(command, 0, command_size);
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	2100      	movs	r1, #0
 800191e:	482c      	ldr	r0, [pc, #176]	; (80019d0 <decodeFrame+0x174>)
 8001920:	f008 fd92 	bl	800a448 <memset>
				i = 1;
 8001924:	2301      	movs	r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
			 }

			 command[command_busy++] = frame[i];
 8001928:	4b28      	ldr	r3, [pc, #160]	; (80019cc <decodeFrame+0x170>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	b2d1      	uxtb	r1, r2
 8001932:	4a26      	ldr	r2, [pc, #152]	; (80019cc <decodeFrame+0x170>)
 8001934:	7011      	strb	r1, [r2, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <decodeFrame+0x16c>)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4413      	add	r3, r2
 800193e:	781a      	ldrb	r2, [r3, #0]
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <decodeFrame+0x174>)
 8001942:	545a      	strb	r2, [r3, r1]
		for(int i = 1; i <= command_end_idx; i++){
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3301      	adds	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	7dbb      	ldrb	r3, [r7, #22]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	429a      	cmp	r2, r3
 8001950:	ddda      	ble.n	8001908 <decodeFrame+0xac>
	}

	// ===== DATA ==== //
	//if all required signs are in place check if data exists {

	if(required_pass == 3 && (data_idx != frameLength - 1)){
 8001952:	7d7b      	ldrb	r3, [r7, #21]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d130      	bne.n	80019ba <decodeFrame+0x15e>
 8001958:	7dfa      	ldrb	r2, [r7, #23]
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <decodeFrame+0x168>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	429a      	cmp	r2, r3
 8001964:	d029      	beq.n	80019ba <decodeFrame+0x15e>
		//Send("Data exists!\r\n");
		for(int i = data_idx; i <= frameLength - 1; i++){
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	e01f      	b.n	80019ac <decodeFrame+0x150>
			//prevent memory leaks
			if(data_busy >= data_size){
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <decodeFrame+0x178>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b7c      	cmp	r3, #124	; 0x7c
 8001974:	d909      	bls.n	800198a <decodeFrame+0x12e>
				data_busy = 0;
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <decodeFrame+0x178>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
				memset(data, 0, data_size);
 800197c:	227d      	movs	r2, #125	; 0x7d
 800197e:	2100      	movs	r1, #0
 8001980:	4815      	ldr	r0, [pc, #84]	; (80019d8 <decodeFrame+0x17c>)
 8001982:	f008 fd61 	bl	800a448 <memset>
				i = data_idx;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	60bb      	str	r3, [r7, #8]
			}
			//copy data to the data table
			data[data_busy++] = frame[i];
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <decodeFrame+0x178>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	b2d1      	uxtb	r1, r2
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <decodeFrame+0x178>)
 8001996:	7011      	strb	r1, [r2, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <decodeFrame+0x16c>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4413      	add	r3, r2
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <decodeFrame+0x17c>)
 80019a4:	545a      	strb	r2, [r3, r1]
		for(int i = data_idx; i <= frameLength - 1; i++){
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <decodeFrame+0x168>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4293      	cmp	r3, r2
 80019b8:	dbd8      	blt.n	800196c <decodeFrame+0x110>
		}

	}


}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000120 	.word	0x20000120
 80019c8:	20000604 	.word	0x20000604
 80019cc:	20000123 	.word	0x20000123
 80019d0:	200002b8 	.word	0x200002b8
 80019d4:	20000124 	.word	0x20000124
 80019d8:	20000584 	.word	0x20000584

080019dc <downloadFrame>:

//download frame from data sent
void downloadFrame(){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0

	char byte = Rx_buff[Rx_busy]; //single frame char
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <downloadFrame+0xf0>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <downloadFrame+0xf4>)
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	71fb      	strb	r3, [r7, #7]

	//control ringbuffer
	Rx_busy++;
 80019f0:	4b36      	ldr	r3, [pc, #216]	; (8001acc <downloadFrame+0xf0>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <downloadFrame+0xf0>)
 80019fc:	801a      	strh	r2, [r3, #0]


	if(Rx_busy >= RX_BUFF_SIZE){
 80019fe:	4b33      	ldr	r3, [pc, #204]	; (8001acc <downloadFrame+0xf0>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a08:	d302      	bcc.n	8001a10 <downloadFrame+0x34>
		Rx_busy = 0;
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <downloadFrame+0xf0>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	801a      	strh	r2, [r3, #0]
	}
		//if found start of frame char
		if(byte == 0x24 /* $ */ ){
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b24      	cmp	r3, #36	; 0x24
 8001a14:	d10f      	bne.n	8001a36 <downloadFrame+0x5a>
			memset(frame, 0x00, FRAME_SIZE); //reset frame2#
 8001a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	482d      	ldr	r0, [pc, #180]	; (8001ad4 <downloadFrame+0xf8>)
 8001a1e:	f008 fd13 	bl	800a448 <memset>
			frame_found = 1; //set the flag to continue downloading chars
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <downloadFrame+0xfc>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0x00;
 8001a28:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <downloadFrame+0x100>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
			frameLength = 0;
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <downloadFrame+0x104>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	801a      	strh	r2, [r3, #0]
 8001a34:	e00a      	b.n	8001a4c <downloadFrame+0x70>

		} else if(frame_found == 1){ //frame length if more than one start sign is found
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <downloadFrame+0xfc>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d106      	bne.n	8001a4c <downloadFrame+0x70>


			frameLength++;
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <downloadFrame+0x104>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3301      	adds	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <downloadFrame+0x104>)
 8001a4a:	801a      	strh	r2, [r3, #0]

		}

		if(frame_found == 1)
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <downloadFrame+0xfc>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d10a      	bne.n	8001a6a <downloadFrame+0x8e>
			{


				//copy a frame to analyze it
					frame[Frame_busy++] = byte; //download chars
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <downloadFrame+0x100>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	b291      	uxth	r1, r2
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <downloadFrame+0x100>)
 8001a60:	8011      	strh	r1, [r2, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <downloadFrame+0xf8>)
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	5453      	strb	r3, [r2, r1]


			}

		//check if frame is not too long
		if(frameLength > FRAME_SIZE){
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <downloadFrame+0x104>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a74:	d911      	bls.n	8001a9a <downloadFrame+0xbe>
			memset(frame, 0x00, FRAME_SIZE);
 8001a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4815      	ldr	r0, [pc, #84]	; (8001ad4 <downloadFrame+0xf8>)
 8001a7e:	f008 fce3 	bl	800a448 <memset>
			Frame_busy = 0;
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <downloadFrame+0x100>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	801a      	strh	r2, [r3, #0]
			frameLength = 0;
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <downloadFrame+0x104>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	801a      	strh	r2, [r3, #0]
			frame_found = 0;
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <downloadFrame+0xfc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
			sendFail(4);
 8001a94:	2004      	movs	r0, #4
 8001a96:	f000 f86b 	bl	8001b70 <sendFail>
		//check if its actually a frame
		//todo


		//if end of frame is reached
		if(byte == 0x23 && frame_found == 1 /* # */ ){
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	2b23      	cmp	r3, #35	; 0x23
 8001a9e:	d110      	bne.n	8001ac2 <downloadFrame+0xe6>
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <downloadFrame+0xfc>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10c      	bne.n	8001ac2 <downloadFrame+0xe6>
			frame_found = 0; //stop downloading chars
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <downloadFrame+0xfc>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
			Frame_busy = 0; //reset frame
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <downloadFrame+0x100>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	801a      	strh	r2, [r3, #0]

		  //if frame is received, analyze it
			decodeFrame();
 8001ab4:	f7ff fed2 	bl	800185c <decodeFrame>
			parseCommand();
 8001ab8:	f7ff fd50 	bl	800155c <parseCommand>

			//reset framelength to zero

			frameLength = 0;
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <downloadFrame+0x104>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	801a      	strh	r2, [r3, #0]

		 }



}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000118 	.word	0x20000118
 8001ad0:	20000708 	.word	0x20000708
 8001ad4:	20000604 	.word	0x20000604
 8001ad8:	20000122 	.word	0x20000122
 8001adc:	2000011e 	.word	0x2000011e
 8001ae0:	20000120 	.word	0x20000120

08001ae4 <buttonHandler>:





void buttonHandler() {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0

	 if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8001ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aec:	481c      	ldr	r0, [pc, #112]	; (8001b60 <buttonHandler+0x7c>)
 8001aee:	f001 f957 	bl	8002da0 <HAL_GPIO_ReadPin>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d113      	bne.n	8001b20 <buttonHandler+0x3c>

			  buttonMode = !buttonMode;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <buttonHandler+0x80>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <buttonHandler+0x80>)
 8001b0a:	801a      	strh	r2, [r3, #0]

			  x1hz = 0;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <buttonHandler+0x84>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
			  x4hz = 0;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <buttonHandler+0x88>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]

			  HAL_Delay(400);
 8001b18:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b1c:	f000 fcec 	bl	80024f8 <HAL_Delay>


		  }

		  if(buttonMode == 1){
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <buttonHandler+0x80>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10c      	bne.n	8001b42 <buttonHandler+0x5e>
			  if(x1hz == 1){
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <buttonHandler+0x84>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d114      	bne.n	8001b5a <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8001b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b34:	480a      	ldr	r0, [pc, #40]	; (8001b60 <buttonHandler+0x7c>)
 8001b36:	f001 f989 	bl	8002e4c <HAL_GPIO_TogglePin>
				  x1hz = 0;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <buttonHandler+0x84>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
				  x4hz = 0;
			  }
		  }

}
 8001b40:	e00b      	b.n	8001b5a <buttonHandler+0x76>
			  if(x4hz == 1){
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <buttonHandler+0x88>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d107      	bne.n	8001b5a <buttonHandler+0x76>
				  HAL_GPIO_TogglePin(BIA_GPIO_Port, BIA_Pin);
 8001b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <buttonHandler+0x7c>)
 8001b50:	f001 f97c 	bl	8002e4c <HAL_GPIO_TogglePin>
				  x4hz = 0;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <buttonHandler+0x88>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	48000800 	.word	0x48000800
 8001b64:	20000114 	.word	0x20000114
 8001b68:	20000112 	.word	0x20000112
 8001b6c:	20000113 	.word	0x20000113

08001b70 <sendFail>:

/* send functions
 *
 *
 */
void sendFail(uint8_t code){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]

	Send("$Fail=%d#", code);
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4803      	ldr	r0, [pc, #12]	; (8001b8c <sendFail+0x1c>)
 8001b80:	f7ff fba4 	bl	80012cc <Send>

}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	0800c1a4 	.word	0x0800c1a4

08001b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	UART_init();
 8001b96:	f7ff fb71 	bl	800127c <UART_init>
	FLASH_init();
 8001b9a:	f7fe fdcb 	bl	8000734 <FLASH_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b9e:	f000 fc45 	bl	800242c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba2:	f000 f8a1 	bl	8001ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba6:	f7fe fec5 	bl	8000934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001baa:	f000 fb9b 	bl	80022e4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001bae:	f000 fae9 	bl	8002184 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001bb2:	f000 fb1f 	bl	80021f4 <MX_TIM7_Init>
  MX_RTC_Init();
 8001bb6:	f000 f90f 	bl	8001dd8 <MX_RTC_Init>
  MX_I2C1_Init();
 8001bba:	f7ff fa2b 	bl	8001014 <MX_I2C1_Init>




  //set time
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001bbe:	4839      	ldr	r0, [pc, #228]	; (8001ca4 <main+0x114>)
 8001bc0:	f006 fa34 	bl	800802c <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048 - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001bca:	4836      	ldr	r0, [pc, #216]	; (8001ca4 <main+0x114>)
 8001bcc:	f006 f958 	bl	8007e80 <HAL_RTCEx_SetWakeUpTimer_IT>


  HAL_UART_Receive_IT(&huart2, &Rx_buff[Rx_empty], 1);
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <main+0x118>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b34      	ldr	r3, [pc, #208]	; (8001cac <main+0x11c>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4619      	mov	r1, r3
 8001be0:	4833      	ldr	r0, [pc, #204]	; (8001cb0 <main+0x120>)
 8001be2:	f007 f893 	bl	8008d0c <HAL_UART_Receive_IT>


  Send("$Success=Hello, im STM32!#\r\n");
 8001be6:	4833      	ldr	r0, [pc, #204]	; (8001cb4 <main+0x124>)
 8001be8:	f7ff fb70 	bl	80012cc <Send>




  /* === TIMER INIT ===== */
  HAL_TIM_Base_Start(&htim6);
 8001bec:	4832      	ldr	r0, [pc, #200]	; (8001cb8 <main+0x128>)
 8001bee:	f006 fb85 	bl	80082fc <HAL_TIM_Base_Start>

  timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <main+0x128>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <main+0x12c>)
 8001bfa:	6013      	str	r3, [r2, #0]
	  //Send("%2.2u:%2.2u:%2.2u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);


	  //display hour if clock mode is set to display hour

	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 8001bfc:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <main+0x130>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d116      	bne.n	8001c34 <main+0xa4>
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <main+0x134>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d112      	bne.n	8001c34 <main+0xa4>
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <main+0x138>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00d      	beq.n	8001c34 <main+0xa4>
		  displayHour(hour_to_show, minute_to_show, second_to_show);
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <main+0x138>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <main+0x13c>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <main+0x140>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f7fe fbfa 	bl	8000428 <displayHour>
	   }


	 buttonHandler();
 8001c34:	f7ff ff56 	bl	8001ae4 <buttonHandler>


	 while(uart_ready()){
 8001c38:	e001      	b.n	8001c3e <main+0xae>
		 //downloadCmd();
		 downloadFrame();
 8001c3a:	f7ff fecf 	bl	80019dc <downloadFrame>
	 while(uart_ready()){
 8001c3e:	f7ff fc3b 	bl	80014b8 <uart_ready>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f8      	bne.n	8001c3a <main+0xaa>
	 }

	 /* ==== LED BLINKING WITH TIMER AND NORMAL === */
	 if(blink_mode == 1){
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <main+0x144>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d102      	bne.n	8001c58 <main+0xc8>
		 handleBlinkCommand();
 8001c52:	f7ff fad7 	bl	8001204 <handleBlinkCommand>
 8001c56:	e018      	b.n	8001c8a <main+0xfa>
	 } else if(blink_mode == 2){
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <main+0x144>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d113      	bne.n	8001c8a <main+0xfa>
		 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_value >= blink_time){
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <main+0x128>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <main+0x12c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <main+0x148>)
 8001c70:	8812      	ldrh	r2, [r2, #0]
 8001c72:	b292      	uxth	r2, r2
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d308      	bcc.n	8001c8a <main+0xfa>
			 HAL_GPIO_TogglePin(BRO_GPIO_Port, BRO_Pin);
 8001c78:	2140      	movs	r1, #64	; 0x40
 8001c7a:	4818      	ldr	r0, [pc, #96]	; (8001cdc <main+0x14c>)
 8001c7c:	f001 f8e6 	bl	8002e4c <HAL_GPIO_TogglePin>
			 timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <main+0x128>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <main+0x12c>)
 8001c88:	6013      	str	r3, [r2, #0]
		 }
	 }

	 /* ==== delay settings ==== */

	 if(delayFlag == 1){
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <main+0x150>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d1b3      	bne.n	8001bfc <main+0x6c>


		 delayMs(delayTime);
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <main+0x154>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fa9a 	bl	80011d4 <delayMs>
	  if(clock_mode == 2 && hour_displayed == 0 && hour_to_show != 0){
 8001ca0:	e7ac      	b.n	8001bfc <main+0x6c>
 8001ca2:	bf00      	nop
 8001ca4:	20000564 	.word	0x20000564
 8001ca8:	20000116 	.word	0x20000116
 8001cac:	20000708 	.word	0x20000708
 8001cb0:	200009a4 	.word	0x200009a4
 8001cb4:	0800c1b0 	.word	0x0800c1b0
 8001cb8:	2000090c 	.word	0x2000090c
 8001cbc:	20000150 	.word	0x20000150
 8001cc0:	20000078 	.word	0x20000078
 8001cc4:	20000125 	.word	0x20000125
 8001cc8:	20000140 	.word	0x20000140
 8001ccc:	20000141 	.word	0x20000141
 8001cd0:	20000142 	.word	0x20000142
 8001cd4:	2000014b 	.word	0x2000014b
 8001cd8:	20000360 	.word	0x20000360
 8001cdc:	48000800 	.word	0x48000800
 8001ce0:	20000154 	.word	0x20000154
 8001ce4:	20000156 	.word	0x20000156

08001ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b0a6      	sub	sp, #152	; 0x98
 8001cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cf2:	2228      	movs	r2, #40	; 0x28
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f008 fba6 	bl	800a448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cfc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2258      	movs	r2, #88	; 0x58
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f008 fb98 	bl	800a448 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d18:	230a      	movs	r3, #10
 8001d1a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d20:	2310      	movs	r3, #16
 8001d22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d48:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 f88f 	bl	8004e70 <HAL_RCC_OscConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001d58:	f000 f82e 	bl	8001db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d60:	2302      	movs	r3, #2
 8001d62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d76:	2102      	movs	r1, #2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 f8eb 	bl	8005f54 <HAL_RCC_ClockConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001d84:	f000 f818 	bl	8001db8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <SystemClock_Config+0xcc>)
 8001d8a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d98:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f004 fbb3 	bl	8006508 <HAL_RCCEx_PeriphCLKConfig>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001da8:	f000 f806 	bl	8001db8 <Error_Handler>
  }
}
 8001dac:	bf00      	nop
 8001dae:	3798      	adds	r7, #152	; 0x98
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	00010022 	.word	0x00010022

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <Error_Handler+0x8>

08001dc2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b090      	sub	sp, #64	; 0x40
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001df2:	463b      	mov	r3, r7
 8001df4:	2228      	movs	r2, #40	; 0x28
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f008 fb25 	bl	800a448 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <MX_RTC_Init+0x84>)
 8001e00:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <MX_RTC_Init+0x88>)
 8001e02:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <MX_RTC_Init+0x84>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <MX_RTC_Init+0x84>)
 8001e0c:	227f      	movs	r2, #127	; 0x7f
 8001e0e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <MX_RTC_Init+0x84>)
 8001e12:	22ff      	movs	r2, #255	; 0xff
 8001e14:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_RTC_Init+0x84>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_RTC_Init+0x84>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_RTC_Init+0x84>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e28:	480c      	ldr	r0, [pc, #48]	; (8001e5c <MX_RTC_Init+0x84>)
 8001e2a:	f004 ff65 	bl	8006cf8 <HAL_RTC_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001e34:	f7ff ffc0 	bl	8001db8 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4806      	ldr	r0, [pc, #24]	; (8001e5c <MX_RTC_Init+0x84>)
 8001e42:	f005 f9b9 	bl	80071b8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4803      	ldr	r0, [pc, #12]	; (8001e5c <MX_RTC_Init+0x84>)
 8001e50:	f005 fb4e 	bl	80074f0 <HAL_RTC_GetDate>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e54:	3740      	adds	r7, #64	; 0x40
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000564 	.word	0x20000564
 8001e60:	40002800 	.word	0x40002800

08001e64 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_RTC_MspInit+0x60>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d121      	bne.n	8001eba <HAL_RTC_MspInit+0x56>
 8001e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e7a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e84:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_RTC_MspInit+0x64>)
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	461a      	mov	r2, r3
 8001e96:	2301      	movs	r3, #1
 8001e98:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	f000 fc3e 	bl	8002720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f000 fc67 	bl	8002778 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2029      	movs	r0, #41	; 0x29
 8001eb0:	f000 fc36 	bl	8002720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001eb4:	2029      	movs	r0, #41	; 0x29
 8001eb6:	f000 fc5f 	bl	8002778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40002800 	.word	0x40002800
 8001ec8:	10908100 	.word	0x10908100

08001ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_MspInit+0x44>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_MspInit+0x44>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6193      	str	r3, [r2, #24]
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_MspInit+0x44>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_MspInit+0x44>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_MspInit+0x44>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_MspInit+0x44>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f02:	2007      	movs	r0, #7
 8001f04:	f000 fbec 	bl	80026e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000

08001f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <NMI_Handler+0x4>

08001f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <HardFault_Handler+0x4>

08001f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <MemManage_Handler+0x4>

08001f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <BusFault_Handler+0x4>

08001f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <UsageFault_Handler+0x4>

08001f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	delay_1hz();
 8001f60:	f7ff f8e4 	bl	800112c <delay_1hz>
	delay_4hz();
 8001f64:	f7ff f8fe 	bl	8001164 <delay_4hz>

	if(blink_mode == 1){
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <SysTick_Handler+0x2c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <SysTick_Handler+0x22>
		led_delay++;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <SysTick_Handler+0x30>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Handler+0x30>)
 8001f7c:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7e:	f000 fa9b 	bl	80024b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000014b 	.word	0x2000014b
 8001f8c:	20000158 	.word	0x20000158

08001f90 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <RTC_WKUP_IRQHandler+0x10>)
 8001f96:	f006 f8a1 	bl	80080dc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000564 	.word	0x20000564

08001fa4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <I2C1_EV_IRQHandler+0x10>)
 8001faa:	f001 fa7d 	bl	80034a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000268 	.word	0x20000268

08001fb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <USART2_IRQHandler+0x10>)
 8001fbe:	f006 fef3 	bl	8008da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200009a4 	.word	0x200009a4

08001fcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001fd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fd4:	f000 ff62 	bl	8002e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <RTC_Alarm_IRQHandler+0x10>)
 8001fe2:	f005 fe77 	bl	8007cd4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000564 	.word	0x20000564

08001ff0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM6_DAC_IRQHandler+0x10>)
 8001ff6:	f006 fa2d 	bl	8008454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000090c 	.word	0x2000090c

08002004 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM7_IRQHandler+0x10>)
 800200a:	f006 fa23 	bl	8008454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000958 	.word	0x20000958

08002018 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e00a      	b.n	8002040 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800202a:	f3af 8000 	nop.w
 800202e:	4601      	mov	r1, r0
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60ba      	str	r2, [r7, #8]
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf0      	blt.n	800202a <_read+0x12>
	}

return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	e009      	b.n	8002078 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	60ba      	str	r2, [r7, #8]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbf1      	blt.n	8002064 <_write+0x12>
	}
	return len;
 8002080:	687b      	ldr	r3, [r7, #4]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_close>:

int _close(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
	return -1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b2:	605a      	str	r2, [r3, #4]
	return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_isatty>:

int _isatty(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
	return 1;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
	return 0;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f008 f966 	bl	800a3f4 <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20010000 	.word	0x20010000
 8002154:	00000400 	.word	0x00000400
 8002158:	2000015c 	.word	0x2000015c
 800215c:	20000a40 	.word	0x20000a40

08002160 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <SystemInit+0x20>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <SystemInit+0x20>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002194:	4b15      	ldr	r3, [pc, #84]	; (80021ec <MX_TIM6_Init+0x68>)
 8002196:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <MX_TIM6_Init+0x6c>)
 8002198:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000-1;
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <MX_TIM6_Init+0x68>)
 800219c:	f242 720f 	movw	r2, #9999	; 0x270f
 80021a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <MX_TIM6_Init+0x68>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536 - 1;
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MX_TIM6_Init+0x68>)
 80021aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_TIM6_Init+0x68>)
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021b6:	480d      	ldr	r0, [pc, #52]	; (80021ec <MX_TIM6_Init+0x68>)
 80021b8:	f005 ffbe 	bl	8008138 <HAL_TIM_Base_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80021c2:	f7ff fdf9 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4806      	ldr	r0, [pc, #24]	; (80021ec <MX_TIM6_Init+0x68>)
 80021d4:	f006 fb2e 	bl	8008834 <HAL_TIMEx_MasterConfigSynchronization>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80021de:	f7ff fdeb 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000090c 	.word	0x2000090c
 80021f0:	40001000 	.word	0x40001000

080021f4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <MX_TIM7_Init+0x64>)
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <MX_TIM7_Init+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <MX_TIM7_Init+0x64>)
 800220c:	2247      	movs	r2, #71	; 0x47
 800220e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_TIM7_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <MX_TIM7_Init+0x64>)
 8002218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_TIM7_Init+0x64>)
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <MX_TIM7_Init+0x64>)
 8002226:	f005 ff87 	bl	8008138 <HAL_TIM_Base_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002230:	f7ff fdc2 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4619      	mov	r1, r3
 8002240:	4805      	ldr	r0, [pc, #20]	; (8002258 <MX_TIM7_Init+0x64>)
 8002242:	f006 faf7 	bl	8008834 <HAL_TIMEx_MasterConfigSynchronization>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800224c:	f7ff fdb4 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000958 	.word	0x20000958
 800225c:	40001400 	.word	0x40001400

08002260 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <HAL_TIM_Base_MspInit+0x78>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d114      	bne.n	800229c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002272:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_TIM_Base_MspInit+0x7c>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a19      	ldr	r2, [pc, #100]	; (80022dc <HAL_TIM_Base_MspInit+0x7c>)
 8002278:	f043 0310 	orr.w	r3, r3, #16
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_TIM_Base_MspInit+0x7c>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2036      	movs	r0, #54	; 0x36
 8002290:	f000 fa46 	bl	8002720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002294:	2036      	movs	r0, #54	; 0x36
 8002296:	f000 fa6f 	bl	8002778 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800229a:	e018      	b.n	80022ce <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <HAL_TIM_Base_MspInit+0x80>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d113      	bne.n	80022ce <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_TIM_Base_MspInit+0x7c>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <HAL_TIM_Base_MspInit+0x7c>)
 80022ac:	f043 0320 	orr.w	r3, r3, #32
 80022b0:	61d3      	str	r3, [r2, #28]
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_TIM_Base_MspInit+0x7c>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2037      	movs	r0, #55	; 0x37
 80022c4:	f000 fa2c 	bl	8002720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022c8:	2037      	movs	r0, #55	; 0x37
 80022ca:	f000 fa55 	bl	8002778 <HAL_NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40001000 	.word	0x40001000
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40001400 	.word	0x40001400

080022e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022ea:	4a15      	ldr	r2, [pc, #84]	; (8002340 <MX_USART2_UART_Init+0x5c>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_USART2_UART_Init+0x58>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_USART2_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002328:	f006 fbf0 	bl	8008b0c <HAL_UART_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002332:	f7ff fd41 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200009a4 	.word	0x200009a4
 8002340:	40004400 	.word	0x40004400

08002344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <HAL_UART_MspInit+0x8c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d130      	bne.n	80023c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_UART_MspInit+0x90>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <HAL_UART_MspInit+0x90>)
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	61d3      	str	r3, [r2, #28]
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_UART_MspInit+0x90>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_UART_MspInit+0x90>)
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <HAL_UART_MspInit+0x90>)
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	6153      	str	r3, [r2, #20]
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_UART_MspInit+0x90>)
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002396:	230c      	movs	r3, #12
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a6:	2307      	movs	r3, #7
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b4:	f000 fa88 	bl	80028c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	2026      	movs	r0, #38	; 0x26
 80023be:	f000 f9af 	bl	8002720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023c2:	2026      	movs	r0, #38	; 0x26
 80023c4:	f000 f9d8 	bl	8002778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40021000 	.word	0x40021000

080023d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002410 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023dc:	480d      	ldr	r0, [pc, #52]	; (8002414 <LoopForever+0x6>)
  ldr r1, =_edata
 80023de:	490e      	ldr	r1, [pc, #56]	; (8002418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e0:	4a0e      	ldr	r2, [pc, #56]	; (800241c <LoopForever+0xe>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e4:	e002      	b.n	80023ec <LoopCopyDataInit>

080023e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ea:	3304      	adds	r3, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f0:	d3f9      	bcc.n	80023e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f2:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f4:	4c0b      	ldr	r4, [pc, #44]	; (8002424 <LoopForever+0x16>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f8:	e001      	b.n	80023fe <LoopFillZerobss>

080023fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023fc:	3204      	adds	r2, #4

080023fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002400:	d3fb      	bcc.n	80023fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002402:	f7ff fead 	bl	8002160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002406:	f007 fffb 	bl	800a400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800240a:	f7ff fbc1 	bl	8001b90 <main>

0800240e <LoopForever>:

LoopForever:
    b LoopForever
 800240e:	e7fe      	b.n	800240e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002410:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002418:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 800241c:	0800c674 	.word	0x0800c674
  ldr r2, =_sbss
 8002420:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002424:	20000a3c 	.word	0x20000a3c

08002428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002428:	e7fe      	b.n	8002428 <ADC1_2_IRQHandler>
	...

0800242c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_Init+0x28>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_Init+0x28>)
 8002436:	f043 0310 	orr.w	r3, r3, #16
 800243a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243c:	2003      	movs	r0, #3
 800243e:	f000 f94f 	bl	80026e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002442:	2000      	movs	r0, #0
 8002444:	f000 f808 	bl	8002458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002448:	f7ff fd40 	bl	8001ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40022000 	.word	0x40022000

08002458 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x54>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_InitTick+0x58>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f996 	bl	80027a8 <HAL_SYSTICK_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e00e      	b.n	80024a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d80a      	bhi.n	80024a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248c:	2200      	movs	r2, #0
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f000 f944 	bl	8002720 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002498:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <HAL_InitTick+0x5c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	2000007c 	.word	0x2000007c
 80024b0:	20000084 	.word	0x20000084
 80024b4:	20000080 	.word	0x20000080

080024b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x20>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_IncTick+0x24>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <HAL_IncTick+0x24>)
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000084 	.word	0x20000084
 80024dc:	20000a28 	.word	0x20000a28

080024e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_GetTick+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000a28 	.word	0x20000a28

080024f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff ffee 	bl	80024e0 <HAL_GetTick>
 8002504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d005      	beq.n	800251e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_Delay+0x44>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800251e:	bf00      	nop
 8002520:	f7ff ffde 	bl	80024e0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d8f7      	bhi.n	8002520 <HAL_Delay+0x28>
  {
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000084 	.word	0x20000084

08002540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800256c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002572:	4a04      	ldr	r2, [pc, #16]	; (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db0b      	blt.n	80025ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4907      	ldr	r1, [pc, #28]	; (80025dc <__NVIC_EnableIRQ+0x38>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2001      	movs	r0, #1
 80025c6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000e100 	.word	0xe000e100

080025e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db0a      	blt.n	800260a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	490c      	ldr	r1, [pc, #48]	; (800262c <__NVIC_SetPriority+0x4c>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	440b      	add	r3, r1
 8002604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002608:	e00a      	b.n	8002620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <__NVIC_SetPriority+0x50>)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3b04      	subs	r3, #4
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	440b      	add	r3, r1
 800261e:	761a      	strb	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f1c3 0307 	rsb	r3, r3, #7
 800264e:	2b04      	cmp	r3, #4
 8002650:	bf28      	it	cs
 8002652:	2304      	movcs	r3, #4
 8002654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3304      	adds	r3, #4
 800265a:	2b06      	cmp	r3, #6
 800265c:	d902      	bls.n	8002664 <NVIC_EncodePriority+0x30>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3b03      	subs	r3, #3
 8002662:	e000      	b.n	8002666 <NVIC_EncodePriority+0x32>
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	f04f 32ff 	mov.w	r2, #4294967295
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	401a      	ands	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800267c:	f04f 31ff 	mov.w	r1, #4294967295
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43d9      	mvns	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	4313      	orrs	r3, r2
         );
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	; 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ac:	d301      	bcc.n	80026b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00f      	b.n	80026d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b2:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <SysTick_Config+0x40>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ba:	210f      	movs	r1, #15
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f7ff ff8e 	bl	80025e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <SysTick_Config+0x40>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ca:	4b04      	ldr	r3, [pc, #16]	; (80026dc <SysTick_Config+0x40>)
 80026cc:	2207      	movs	r2, #7
 80026ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	e000e010 	.word	0xe000e010

080026e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b07      	cmp	r3, #7
 80026ec:	d00f      	beq.n	800270e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d00c      	beq.n	800270e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d009      	beq.n	800270e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d006      	beq.n	800270e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d003      	beq.n	800270e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002706:	21ac      	movs	r1, #172	; 0xac
 8002708:	4804      	ldr	r0, [pc, #16]	; (800271c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800270a:	f7ff fb5a 	bl	8001dc2 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ff16 	bl	8002540 <__NVIC_SetPriorityGrouping>
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	0800c1d0 	.word	0x0800c1d0

08002720 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d903      	bls.n	8002740 <HAL_NVIC_SetPriority+0x20>
 8002738:	21c4      	movs	r1, #196	; 0xc4
 800273a:	480e      	ldr	r0, [pc, #56]	; (8002774 <HAL_NVIC_SetPriority+0x54>)
 800273c:	f7ff fb41 	bl	8001dc2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	d903      	bls.n	800274e <HAL_NVIC_SetPriority+0x2e>
 8002746:	21c5      	movs	r1, #197	; 0xc5
 8002748:	480a      	ldr	r0, [pc, #40]	; (8002774 <HAL_NVIC_SetPriority+0x54>)
 800274a:	f7ff fb3a 	bl	8001dc2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800274e:	f7ff ff1b 	bl	8002588 <__NVIC_GetPriorityGrouping>
 8002752:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	6978      	ldr	r0, [r7, #20]
 800275a:	f7ff ff6b 	bl	8002634 <NVIC_EncodePriority>
 800275e:	4602      	mov	r2, r0
 8002760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff3a 	bl	80025e0 <__NVIC_SetPriority>
}
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	0800c1d0 	.word	0x0800c1d0

08002778 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	da03      	bge.n	8002792 <HAL_NVIC_EnableIRQ+0x1a>
 800278a:	21d8      	movs	r1, #216	; 0xd8
 800278c:	4805      	ldr	r0, [pc, #20]	; (80027a4 <HAL_NVIC_EnableIRQ+0x2c>)
 800278e:	f7ff fb18 	bl	8001dc2 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff04 	bl	80025a4 <__NVIC_EnableIRQ>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	0800c1d0 	.word	0x0800c1d0

080027a8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff73 	bl	800269c <SysTick_Config>
 80027b6:	4603      	mov	r3, r0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d008      	beq.n	80027e4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2204      	movs	r2, #4
 80027d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e020      	b.n	8002826 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 020e 	bic.w	r2, r2, #14
 80027f2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002844:	2b02      	cmp	r3, #2
 8002846:	d005      	beq.n	8002854 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2204      	movs	r2, #4
 800284c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	e027      	b.n	80028a4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 020e 	bic.w	r2, r2, #14
 8002862:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f202 	lsl.w	r2, r1, r2
 8002882:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	4798      	blx	r3
    } 
  }
  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028dc:	d01f      	beq.n	800291e <HAL_GPIO_Init+0x56>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <HAL_GPIO_Init+0x104>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01b      	beq.n	800291e <HAL_GPIO_Init+0x56>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a39      	ldr	r2, [pc, #228]	; (80029d0 <HAL_GPIO_Init+0x108>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d017      	beq.n	800291e <HAL_GPIO_Init+0x56>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_GPIO_Init+0x10c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0x56>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a37      	ldr	r2, [pc, #220]	; (80029d8 <HAL_GPIO_Init+0x110>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00f      	beq.n	800291e <HAL_GPIO_Init+0x56>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a36      	ldr	r2, [pc, #216]	; (80029dc <HAL_GPIO_Init+0x114>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00b      	beq.n	800291e <HAL_GPIO_Init+0x56>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a35      	ldr	r2, [pc, #212]	; (80029e0 <HAL_GPIO_Init+0x118>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <HAL_GPIO_Init+0x56>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a34      	ldr	r2, [pc, #208]	; (80029e4 <HAL_GPIO_Init+0x11c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x56>
 8002916:	21b2      	movs	r1, #178	; 0xb2
 8002918:	4833      	ldr	r0, [pc, #204]	; (80029e8 <HAL_GPIO_Init+0x120>)
 800291a:	f7ff fa52 	bl	8001dc2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_GPIO_Init+0x6c>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x74>
 8002934:	21b3      	movs	r1, #179	; 0xb3
 8002936:	482c      	ldr	r0, [pc, #176]	; (80029e8 <HAL_GPIO_Init+0x120>)
 8002938:	f7ff fa43 	bl	8001dc2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 821c 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b01      	cmp	r3, #1
 800294c:	f000 8217 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b11      	cmp	r3, #17
 8002956:	f000 8212 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	f000 820d 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b12      	cmp	r3, #18
 800296a:	f000 8208 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002976:	f000 8202 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002982:	f000 81fc 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800298e:	f000 81f6 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800299a:	f000 81f0 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80029a6:	f000 81ea 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80029b2:	f000 81e4 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	f000 81df 	beq.w	8002d7e <HAL_GPIO_Init+0x4b6>
 80029c0:	21b4      	movs	r1, #180	; 0xb4
 80029c2:	4809      	ldr	r0, [pc, #36]	; (80029e8 <HAL_GPIO_Init+0x120>)
 80029c4:	f7ff f9fd 	bl	8001dc2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c8:	e1d9      	b.n	8002d7e <HAL_GPIO_Init+0x4b6>
 80029ca:	bf00      	nop
 80029cc:	48000400 	.word	0x48000400
 80029d0:	48000800 	.word	0x48000800
 80029d4:	48000c00 	.word	0x48000c00
 80029d8:	48001000 	.word	0x48001000
 80029dc:	48001400 	.word	0x48001400
 80029e0:	48001800 	.word	0x48001800
 80029e4:	48001c00 	.word	0x48001c00
 80029e8:	0800c20c 	.word	0x0800c20c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2101      	movs	r1, #1
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 81ba 	beq.w	8002d78 <HAL_GPIO_Init+0x4b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d005      	beq.n	8002a1c <HAL_GPIO_Init+0x154>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d140      	bne.n	8002a9e <HAL_GPIO_Init+0x1d6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_GPIO_Init+0x174>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d007      	beq.n	8002a3c <HAL_GPIO_Init+0x174>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x174>
 8002a34:	21c3      	movs	r1, #195	; 0xc3
 8002a36:	4894      	ldr	r0, [pc, #592]	; (8002c88 <HAL_GPIO_Init+0x3c0>)
 8002a38:	f7ff f9c3 	bl	8001dc2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a72:	2201      	movs	r2, #1
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	091b      	lsrs	r3, r3, #4
 8002a88:	f003 0201 	and.w	r2, r3, #1
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d027      	beq.n	8002afa <HAL_GPIO_Init+0x232>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_GPIO_Init+0x202>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d007      	beq.n	8002aca <HAL_GPIO_Init+0x202>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x202>
 8002ac2:	21d4      	movs	r1, #212	; 0xd4
 8002ac4:	4870      	ldr	r0, [pc, #448]	; (8002c88 <HAL_GPIO_Init+0x3c0>)
 8002ac6:	f7ff f97c 	bl	8001dc2 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d157      	bne.n	8002bb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b0c:	d01f      	beq.n	8002b4e <HAL_GPIO_Init+0x286>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a5e      	ldr	r2, [pc, #376]	; (8002c8c <HAL_GPIO_Init+0x3c4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01b      	beq.n	8002b4e <HAL_GPIO_Init+0x286>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a5d      	ldr	r2, [pc, #372]	; (8002c90 <HAL_GPIO_Init+0x3c8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d017      	beq.n	8002b4e <HAL_GPIO_Init+0x286>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a5c      	ldr	r2, [pc, #368]	; (8002c94 <HAL_GPIO_Init+0x3cc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_GPIO_Init+0x286>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a5b      	ldr	r2, [pc, #364]	; (8002c98 <HAL_GPIO_Init+0x3d0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00f      	beq.n	8002b4e <HAL_GPIO_Init+0x286>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a5a      	ldr	r2, [pc, #360]	; (8002c9c <HAL_GPIO_Init+0x3d4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <HAL_GPIO_Init+0x286>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a59      	ldr	r2, [pc, #356]	; (8002ca0 <HAL_GPIO_Init+0x3d8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x286>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_GPIO_Init+0x3dc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x286>
 8002b46:	21e2      	movs	r1, #226	; 0xe2
 8002b48:	484f      	ldr	r0, [pc, #316]	; (8002c88 <HAL_GPIO_Init+0x3c0>)
 8002b4a:	f7ff f93a 	bl	8001dc2 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d90b      	bls.n	8002b6e <HAL_GPIO_Init+0x2a6>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b0e      	cmp	r3, #14
 8002b5c:	d007      	beq.n	8002b6e <HAL_GPIO_Init+0x2a6>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b0f      	cmp	r3, #15
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x2a6>
 8002b66:	21e3      	movs	r1, #227	; 0xe3
 8002b68:	4847      	ldr	r0, [pc, #284]	; (8002c88 <HAL_GPIO_Init+0x3c0>)
 8002b6a:	f7ff f92a 	bl	8001dc2 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	08da      	lsrs	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3208      	adds	r2, #8
 8002b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	220f      	movs	r2, #15
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	08da      	lsrs	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3208      	adds	r2, #8
 8002bb0:	6939      	ldr	r1, [r7, #16]
 8002bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0203 	and.w	r2, r3, #3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80c0 	beq.w	8002d78 <HAL_GPIO_Init+0x4b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_GPIO_Init+0x3e0>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <HAL_GPIO_Init+0x3e0>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6193      	str	r3, [r2, #24]
 8002c04:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <HAL_GPIO_Init+0x3e0>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c10:	4a26      	ldr	r2, [pc, #152]	; (8002cac <HAL_GPIO_Init+0x3e4>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c3a:	d039      	beq.n	8002cb0 <HAL_GPIO_Init+0x3e8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a13      	ldr	r2, [pc, #76]	; (8002c8c <HAL_GPIO_Init+0x3c4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d01f      	beq.n	8002c84 <HAL_GPIO_Init+0x3bc>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a12      	ldr	r2, [pc, #72]	; (8002c90 <HAL_GPIO_Init+0x3c8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d019      	beq.n	8002c80 <HAL_GPIO_Init+0x3b8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_GPIO_Init+0x3cc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d013      	beq.n	8002c7c <HAL_GPIO_Init+0x3b4>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_GPIO_Init+0x3d0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00d      	beq.n	8002c78 <HAL_GPIO_Init+0x3b0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <HAL_GPIO_Init+0x3d4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d007      	beq.n	8002c74 <HAL_GPIO_Init+0x3ac>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <HAL_GPIO_Init+0x3d8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d101      	bne.n	8002c70 <HAL_GPIO_Init+0x3a8>
 8002c6c:	2306      	movs	r3, #6
 8002c6e:	e020      	b.n	8002cb2 <HAL_GPIO_Init+0x3ea>
 8002c70:	2307      	movs	r3, #7
 8002c72:	e01e      	b.n	8002cb2 <HAL_GPIO_Init+0x3ea>
 8002c74:	2305      	movs	r3, #5
 8002c76:	e01c      	b.n	8002cb2 <HAL_GPIO_Init+0x3ea>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	e01a      	b.n	8002cb2 <HAL_GPIO_Init+0x3ea>
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e018      	b.n	8002cb2 <HAL_GPIO_Init+0x3ea>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e016      	b.n	8002cb2 <HAL_GPIO_Init+0x3ea>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e014      	b.n	8002cb2 <HAL_GPIO_Init+0x3ea>
 8002c88:	0800c20c 	.word	0x0800c20c
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	48000800 	.word	0x48000800
 8002c94:	48000c00 	.word	0x48000c00
 8002c98:	48001000 	.word	0x48001000
 8002c9c:	48001400 	.word	0x48001400
 8002ca0:	48001800 	.word	0x48001800
 8002ca4:	48001c00 	.word	0x48001c00
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40010000 	.word	0x40010000
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	f002 0203 	and.w	r2, r2, #3
 8002cb8:	0092      	lsls	r2, r2, #2
 8002cba:	4093      	lsls	r3, r2
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cc2:	4935      	ldr	r1, [pc, #212]	; (8002d98 <HAL_GPIO_Init+0x4d0>)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd0:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <HAL_GPIO_Init+0x4d4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x42c>
        {
          temp |= iocurrent;
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cf4:	4a29      	ldr	r2, [pc, #164]	; (8002d9c <HAL_GPIO_Init+0x4d4>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cfa:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_GPIO_Init+0x4d4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x456>
        {
          temp |= iocurrent;
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d1e:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_GPIO_Init+0x4d4>)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_GPIO_Init+0x4d4>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d48:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <HAL_GPIO_Init+0x4d4>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_GPIO_Init+0x4d4>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <HAL_GPIO_Init+0x4d4>)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f47f ae2f 	bne.w	80029ec <HAL_GPIO_Init+0x124>
  }
}
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	40010400 	.word	0x40010400

08002da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d004      	beq.n	8002dbc <HAL_GPIO_ReadPin+0x1c>
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <HAL_GPIO_ReadPin+0x26>
 8002dbc:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8002dc0:	4809      	ldr	r0, [pc, #36]	; (8002de8 <HAL_GPIO_ReadPin+0x48>)
 8002dc2:	f7fe fffe 	bl	8001dc2 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	887b      	ldrh	r3, [r7, #2]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	e001      	b.n	8002ddc <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	0800c20c 	.word	0x0800c20c

08002dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_GPIO_WritePin+0x20>
 8002e02:	887b      	ldrh	r3, [r7, #2]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d004      	beq.n	8002e16 <HAL_GPIO_WritePin+0x2a>
 8002e0c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8002e10:	480d      	ldr	r0, [pc, #52]	; (8002e48 <HAL_GPIO_WritePin+0x5c>)
 8002e12:	f7fe ffd6 	bl	8001dc2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002e16:	787b      	ldrb	r3, [r7, #1]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <HAL_GPIO_WritePin+0x40>
 8002e1c:	787b      	ldrb	r3, [r7, #1]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d004      	beq.n	8002e2c <HAL_GPIO_WritePin+0x40>
 8002e22:	f240 11a5 	movw	r1, #421	; 0x1a5
 8002e26:	4808      	ldr	r0, [pc, #32]	; (8002e48 <HAL_GPIO_WritePin+0x5c>)
 8002e28:	f7fe ffcb 	bl	8001dc2 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002e2c:	787b      	ldrb	r3, [r7, #1]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	0800c20c 	.word	0x0800c20c

08002e4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <HAL_GPIO_TogglePin+0x1c>
 8002e5e:	887b      	ldrh	r3, [r7, #2]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <HAL_GPIO_TogglePin+0x26>
 8002e68:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002e6c:	480a      	ldr	r0, [pc, #40]	; (8002e98 <HAL_GPIO_TogglePin+0x4c>)
 8002e6e:	f7fe ffa8 	bl	8001dc2 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e78:	887a      	ldrh	r2, [r7, #2]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	041a      	lsls	r2, r3, #16
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	887b      	ldrh	r3, [r7, #2]
 8002e86:	400b      	ands	r3, r1
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	619a      	str	r2, [r3, #24]
}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	0800c20c 	.word	0x0800c20c

08002e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eb2:	4a05      	ldr	r2, [pc, #20]	; (8002ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f806 	bl	8002ecc <HAL_GPIO_EXTI_Callback>
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40010400 	.word	0x40010400

08002ecc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e104      	b.n	8003100 <HAL_I2C_Init+0x21c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a83      	ldr	r2, [pc, #524]	; (8003108 <HAL_I2C_Init+0x224>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00e      	beq.n	8002f1e <HAL_I2C_Init+0x3a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a81      	ldr	r2, [pc, #516]	; (800310c <HAL_I2C_Init+0x228>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_I2C_Init+0x3a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a80      	ldr	r2, [pc, #512]	; (8003110 <HAL_I2C_Init+0x22c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_I2C_Init+0x3a>
 8002f14:	f240 2113 	movw	r1, #531	; 0x213
 8002f18:	487e      	ldr	r0, [pc, #504]	; (8003114 <HAL_I2C_Init+0x230>)
 8002f1a:	f7fe ff52 	bl	8001dc2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f26:	d304      	bcc.n	8002f32 <HAL_I2C_Init+0x4e>
 8002f28:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002f2c:	4879      	ldr	r0, [pc, #484]	; (8003114 <HAL_I2C_Init+0x230>)
 8002f2e:	f7fe ff48 	bl	8001dc2 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d008      	beq.n	8002f4c <HAL_I2C_Init+0x68>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d004      	beq.n	8002f4c <HAL_I2C_Init+0x68>
 8002f42:	f240 2115 	movw	r1, #533	; 0x215
 8002f46:	4873      	ldr	r0, [pc, #460]	; (8003114 <HAL_I2C_Init+0x230>)
 8002f48:	f7fe ff3b 	bl	8001dc2 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <HAL_I2C_Init+0x84>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5c:	d004      	beq.n	8002f68 <HAL_I2C_Init+0x84>
 8002f5e:	f240 2116 	movw	r1, #534	; 0x216
 8002f62:	486c      	ldr	r0, [pc, #432]	; (8003114 <HAL_I2C_Init+0x230>)
 8002f64:	f7fe ff2d 	bl	8001dc2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	2bff      	cmp	r3, #255	; 0xff
 8002f6e:	d904      	bls.n	8002f7a <HAL_I2C_Init+0x96>
 8002f70:	f240 2117 	movw	r1, #535	; 0x217
 8002f74:	4867      	ldr	r0, [pc, #412]	; (8003114 <HAL_I2C_Init+0x230>)
 8002f76:	f7fe ff24 	bl	8001dc2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d020      	beq.n	8002fc4 <HAL_I2C_Init+0xe0>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d01c      	beq.n	8002fc4 <HAL_I2C_Init+0xe0>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d018      	beq.n	8002fc4 <HAL_I2C_Init+0xe0>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d014      	beq.n	8002fc4 <HAL_I2C_Init+0xe0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d010      	beq.n	8002fc4 <HAL_I2C_Init+0xe0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_I2C_Init+0xe0>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d008      	beq.n	8002fc4 <HAL_I2C_Init+0xe0>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b07      	cmp	r3, #7
 8002fb8:	d004      	beq.n	8002fc4 <HAL_I2C_Init+0xe0>
 8002fba:	f44f 7106 	mov.w	r1, #536	; 0x218
 8002fbe:	4855      	ldr	r0, [pc, #340]	; (8003114 <HAL_I2C_Init+0x230>)
 8002fc0:	f7fe feff 	bl	8001dc2 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <HAL_I2C_Init+0xfc>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fd4:	d004      	beq.n	8002fe0 <HAL_I2C_Init+0xfc>
 8002fd6:	f240 2119 	movw	r1, #537	; 0x219
 8002fda:	484e      	ldr	r0, [pc, #312]	; (8003114 <HAL_I2C_Init+0x230>)
 8002fdc:	f7fe fef1 	bl	8001dc2 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <HAL_I2C_Init+0x118>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ff0:	d004      	beq.n	8002ffc <HAL_I2C_Init+0x118>
 8002ff2:	f240 211a 	movw	r1, #538	; 0x21a
 8002ff6:	4847      	ldr	r0, [pc, #284]	; (8003114 <HAL_I2C_Init+0x230>)
 8002ff8:	f7fe fee3 	bl	8001dc2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d106      	bne.n	8003016 <HAL_I2C_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7fe f83f 	bl	8001094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2224      	movs	r2, #36	; 0x24
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800303a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_I2C_Init+0x180>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	e006      	b.n	8003072 <HAL_I2C_Init+0x18e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003070:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d104      	bne.n	8003084 <HAL_I2C_Init+0x1a0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003082:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003096:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69d9      	ldr	r1, [r3, #28]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1a      	ldr	r2, [r3, #32]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40005400 	.word	0x40005400
 800310c:	40005800 	.word	0x40005800
 8003110:	40007800 	.word	0x40007800
 8003114:	0800c248 	.word	0x0800c248

08003118 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	4608      	mov	r0, r1
 8003122:	4611      	mov	r1, r2
 8003124:	461a      	mov	r2, r3
 8003126:	4603      	mov	r3, r0
 8003128:	817b      	strh	r3, [r7, #10]
 800312a:	460b      	mov	r3, r1
 800312c:	813b      	strh	r3, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d007      	beq.n	8003148 <HAL_I2C_Mem_Read+0x30>
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d004      	beq.n	8003148 <HAL_I2C_Mem_Read+0x30>
 800313e:	f640 11ca 	movw	r1, #2506	; 0x9ca
 8003142:	4886      	ldr	r0, [pc, #536]	; (800335c <HAL_I2C_Mem_Read+0x244>)
 8003144:	f7fe fe3d 	bl	8001dc2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b20      	cmp	r3, #32
 8003152:	f040 80fd 	bne.w	8003350 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_I2C_Mem_Read+0x4a>
 800315c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0f1      	b.n	8003352 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_I2C_Mem_Read+0x64>
 8003178:	2302      	movs	r3, #2
 800317a:	e0ea      	b.n	8003352 <HAL_I2C_Mem_Read+0x23a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003184:	f7ff f9ac 	bl	80024e0 <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2319      	movs	r3, #25
 8003190:	2201      	movs	r2, #1
 8003192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f001 fb27 	bl	80047ea <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0d5      	b.n	8003352 <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2222      	movs	r2, #34	; 0x22
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2240      	movs	r2, #64	; 0x40
 80031b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a3a      	ldr	r2, [r7, #32]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ce:	88f8      	ldrh	r0, [r7, #6]
 80031d0:	893a      	ldrh	r2, [r7, #8]
 80031d2:	8979      	ldrh	r1, [r7, #10]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	4603      	mov	r3, r0
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fe2c 	bl	8003e3c <I2C_RequestMemoryRead>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0ad      	b.n	8003352 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2bff      	cmp	r3, #255	; 0xff
 80031fe:	d90e      	bls.n	800321e <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	22ff      	movs	r2, #255	; 0xff
 8003204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	b2da      	uxtb	r2, r3
 800320c:	8979      	ldrh	r1, [r7, #10]
 800320e:	4b54      	ldr	r3, [pc, #336]	; (8003360 <HAL_I2C_Mem_Read+0x248>)
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f001 fc1a 	bl	8004a50 <I2C_TransferConfig>
 800321c:	e00f      	b.n	800323e <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	b2da      	uxtb	r2, r3
 800322e:	8979      	ldrh	r1, [r7, #10]
 8003230:	4b4b      	ldr	r3, [pc, #300]	; (8003360 <HAL_I2C_Mem_Read+0x248>)
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f001 fc09 	bl	8004a50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	2200      	movs	r2, #0
 8003246:	2104      	movs	r1, #4
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f001 face 	bl	80047ea <I2C_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e07c      	b.n	8003352 <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d034      	beq.n	80032fe <HAL_I2C_Mem_Read+0x1e6>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d130      	bne.n	80032fe <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	2200      	movs	r2, #0
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f001 fa9f 	bl	80047ea <I2C_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e04d      	b.n	8003352 <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2bff      	cmp	r3, #255	; 0xff
 80032be:	d90e      	bls.n	80032de <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	22ff      	movs	r2, #255	; 0xff
 80032c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	8979      	ldrh	r1, [r7, #10]
 80032ce:	2300      	movs	r3, #0
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f001 fbba 	bl	8004a50 <I2C_TransferConfig>
 80032dc:	e00f      	b.n	80032fe <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	8979      	ldrh	r1, [r7, #10]
 80032f0:	2300      	movs	r3, #0
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f001 fba9 	bl	8004a50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d19a      	bne.n	800323e <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f001 faec 	bl	80048ea <I2C_WaitOnSTOPFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e01a      	b.n	8003352 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2220      	movs	r2, #32
 8003322:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <HAL_I2C_Mem_Read+0x24c>)
 8003330:	400b      	ands	r3, r1
 8003332:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	0800c248 	.word	0x0800c248
 8003360:	80002400 	.word	0x80002400
 8003364:	fe00e800 	.word	0xfe00e800

08003368 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	461a      	mov	r2, r3
 8003376:	4603      	mov	r3, r0
 8003378:	817b      	strh	r3, [r7, #10]
 800337a:	460b      	mov	r3, r1
 800337c:	813b      	strh	r3, [r7, #8]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d007      	beq.n	8003398 <HAL_I2C_Mem_Write_IT+0x30>
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d004      	beq.n	8003398 <HAL_I2C_Mem_Write_IT+0x30>
 800338e:	f640 2154 	movw	r1, #2644	; 0xa54
 8003392:	4842      	ldr	r0, [pc, #264]	; (800349c <HAL_I2C_Mem_Write_IT+0x134>)
 8003394:	f7fe fd15 	bl	8001dc2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d176      	bne.n	8003492 <HAL_I2C_Mem_Write_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_I2C_Mem_Write_IT+0x48>
 80033aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_I2C_Mem_Write_IT+0x54>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e06b      	b.n	8003494 <HAL_I2C_Mem_Write_IT+0x12c>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ca:	d101      	bne.n	80033d0 <HAL_I2C_Mem_Write_IT+0x68>
    {
      return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
 80033ce:	e061      	b.n	8003494 <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Mem_Write_IT+0x76>
 80033da:	2302      	movs	r3, #2
 80033dc:	e05a      	b.n	8003494 <HAL_I2C_Mem_Write_IT+0x12c>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033e6:	f7ff f87b 	bl	80024e0 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2221      	movs	r2, #33	; 0x21
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2240      	movs	r2, #64	; 0x40
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a3a      	ldr	r2, [r7, #32]
 8003406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800340c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <HAL_I2C_Mem_Write_IT+0x138>)
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4a23      	ldr	r2, [pc, #140]	; (80034a4 <HAL_I2C_Mem_Write_IT+0x13c>)
 8003418:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	2bff      	cmp	r3, #255	; 0xff
 8003422:	d906      	bls.n	8003432 <HAL_I2C_Mem_Write_IT+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	22ff      	movs	r2, #255	; 0xff
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800342a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	e007      	b.n	8003442 <HAL_I2C_Mem_Write_IT+0xda>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800343c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003440:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 8003442:	88f8      	ldrh	r0, [r7, #6]
 8003444:	893a      	ldrh	r2, [r7, #8]
 8003446:	8979      	ldrh	r1, [r7, #10]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	2319      	movs	r3, #25
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	4603      	mov	r3, r0
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fc9e 	bl	8003d94 <I2C_RequestMemoryWrite>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_I2C_Mem_Write_IT+0x102>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e014      	b.n	8003494 <HAL_I2C_Mem_Write_IT+0x12c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346e:	b2da      	uxtb	r2, r3
 8003470:	8979      	ldrh	r1, [r7, #10]
 8003472:	2300      	movs	r3, #0
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f001 fae9 	bl	8004a50 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003486:	2101      	movs	r1, #1
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f001 fb53 	bl	8004b34 <I2C_Enable_IRQ>

    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_I2C_Mem_Write_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	0800c248 	.word	0x0800c248
 80034a0:	ffff0000 	.word	0xffff0000
 80034a4:	08003599 	.word	0x08003599

080034a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	68f9      	ldr	r1, [r7, #12]
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
  }
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
 8003538:	4613      	mov	r3, r2
 800353a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <I2C_Master_ISR_IT+0x1e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e114      	b.n	80037e0 <I2C_Master_ISR_IT+0x248>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d013      	beq.n	80035f2 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2210      	movs	r2, #16
 80035dc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f043 0204 	orr.w	r2, r3, #4
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f001 f8bb 	bl	8004766 <I2C_Flush_TXDR>
 80035f0:	e0e1      	b.n	80037b6 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d023      	beq.n	8003646 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01d      	beq.n	8003646 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003644:	e0b7      	b.n	80037b6 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01e      	beq.n	8003690 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800365a:	2b00      	cmp	r3, #0
 800365c:	d018      	beq.n	8003690 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	781a      	ldrb	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800368e:	e092      	b.n	80037b6 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	09db      	lsrs	r3, r3, #7
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d05d      	beq.n	8003758 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	099b      	lsrs	r3, r3, #6
 80036a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d057      	beq.n	8003758 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d040      	beq.n	8003734 <I2C_Master_ISR_IT+0x19c>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d13c      	bne.n	8003734 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2bff      	cmp	r3, #255	; 0xff
 80036d0:	d90e      	bls.n	80036f0 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	22ff      	movs	r2, #255	; 0xff
 80036d6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	8a79      	ldrh	r1, [r7, #18]
 80036e0:	2300      	movs	r3, #0
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f001 f9b1 	bl	8004a50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ee:	e032      	b.n	8003756 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003702:	d00b      	beq.n	800371c <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	8a79      	ldrh	r1, [r7, #18]
 8003710:	2000      	movs	r0, #0
 8003712:	9000      	str	r0, [sp, #0]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f001 f99b 	bl	8004a50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800371a:	e01c      	b.n	8003756 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	b2da      	uxtb	r2, r3
 8003722:	8a79      	ldrh	r1, [r7, #18]
 8003724:	2300      	movs	r3, #0
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f001 f98f 	bl	8004a50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003732:	e010      	b.n	8003756 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003742:	d003      	beq.n	800374c <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fc51 	bl	8003fec <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800374a:	e034      	b.n	80037b6 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800374c:	2140      	movs	r1, #64	; 0x40
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 ff12 	bl	8004578 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003754:	e02f      	b.n	80037b6 <I2C_Master_ISR_IT+0x21e>
 8003756:	e02e      	b.n	80037b6 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	099b      	lsrs	r3, r3, #6
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d028      	beq.n	80037b6 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800376c:	2b00      	cmp	r3, #0
 800376e:	d022      	beq.n	80037b6 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d119      	bne.n	80037ae <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003788:	d015      	beq.n	80037b6 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003792:	d108      	bne.n	80037a6 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	e007      	b.n	80037b6 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fc20 	bl	8003fec <I2C_ITMasterSeqCplt>
 80037ac:	e003      	b.n	80037b6 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80037ae:	2140      	movs	r1, #64	; 0x40
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fee1 	bl	8004578 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80037ce:	6979      	ldr	r1, [r7, #20]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fca7 	bl	8004124 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <I2C_Slave_ISR_IT+0x24>
 8003808:	2302      	movs	r3, #2
 800380a:	e0ec      	b.n	80039e6 <I2C_Slave_ISR_IT+0x1fe>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800382c:	6939      	ldr	r1, [r7, #16]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fd42 	bl	80042b8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d04d      	beq.n	80038dc <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003848:	2b00      	cmp	r3, #0
 800384a:	d047      	beq.n	80038dc <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d128      	bne.n	80038a8 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b28      	cmp	r3, #40	; 0x28
 8003860:	d108      	bne.n	8003874 <I2C_Slave_ISR_IT+0x8c>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003868:	d104      	bne.n	8003874 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800386a:	6939      	ldr	r1, [r7, #16]
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fe2d 	bl	80044cc <I2C_ITListenCplt>
 8003872:	e032      	b.n	80038da <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b29      	cmp	r3, #41	; 0x29
 800387e:	d10e      	bne.n	800389e <I2C_Slave_ISR_IT+0xb6>
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003886:	d00a      	beq.n	800389e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2210      	movs	r2, #16
 800388e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 ff68 	bl	8004766 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fbe5 	bl	8004066 <I2C_ITSlaveSeqCplt>
 800389c:	e01d      	b.n	80038da <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2210      	movs	r2, #16
 80038a4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80038a6:	e096      	b.n	80039d6 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2210      	movs	r2, #16
 80038ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f043 0204 	orr.w	r2, r3, #4
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <I2C_Slave_ISR_IT+0xe4>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c8:	f040 8085 	bne.w	80039d6 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d0:	4619      	mov	r1, r3
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fe50 	bl	8004578 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80038d8:	e07d      	b.n	80039d6 <I2C_Slave_ISR_IT+0x1ee>
 80038da:	e07c      	b.n	80039d6 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d030      	beq.n	800394a <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d02a      	beq.n	800394a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d018      	beq.n	8003930 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d14f      	bne.n	80039da <I2C_Slave_ISR_IT+0x1f2>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003940:	d04b      	beq.n	80039da <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fb8f 	bl	8004066 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003948:	e047      	b.n	80039da <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	08db      	lsrs	r3, r3, #3
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	08db      	lsrs	r3, r3, #3
 800395a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003962:	6939      	ldr	r1, [r7, #16]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fabd 	bl	8003ee4 <I2C_ITAddrCplt>
 800396a:	e037      	b.n	80039dc <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d031      	beq.n	80039dc <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003980:	2b00      	cmp	r3, #0
 8003982:	d02b      	beq.n	80039dc <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d018      	beq.n	80039c0 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	851a      	strh	r2, [r3, #40]	; 0x28
 80039be:	e00d      	b.n	80039dc <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c6:	d002      	beq.n	80039ce <I2C_Slave_ISR_IT+0x1e6>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fb49 	bl	8004066 <I2C_ITSlaveSeqCplt>
 80039d4:	e002      	b.n	80039dc <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80039da:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b088      	sub	sp, #32
 80039f2:	af02      	add	r7, sp, #8
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <I2C_Master_ISR_DMA+0x1a>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e0e1      	b.n	8003bcc <I2C_Master_ISR_DMA+0x1de>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d017      	beq.n	8003a4c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d011      	beq.n	8003a4c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	f043 0204 	orr.w	r2, r3, #4
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003a3c:	2120      	movs	r1, #32
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f001 f878 	bl	8004b34 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 fe8e 	bl	8004766 <I2C_Flush_TXDR>
 8003a4a:	e0ba      	b.n	8003bc2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	09db      	lsrs	r3, r3, #7
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d072      	beq.n	8003b3e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	099b      	lsrs	r3, r3, #6
 8003a5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d06c      	beq.n	8003b3e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a72:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d04e      	beq.n	8003b1c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a8a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2bff      	cmp	r3, #255	; 0xff
 8003a94:	d906      	bls.n	8003aa4 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	22ff      	movs	r2, #255	; 0xff
 8003a9a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e010      	b.n	8003ac6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ab6:	d003      	beq.n	8003ac0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	e002      	b.n	8003ac6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	8a79      	ldrh	r1, [r7, #18]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 ffbb 	bl	8004a50 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b22      	cmp	r3, #34	; 0x22
 8003af6:	d108      	bne.n	8003b0a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b06:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b08:	e05b      	b.n	8003bc2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b18:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b1a:	e052      	b.n	8003bc2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b2a:	d003      	beq.n	8003b34 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fa5d 	bl	8003fec <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003b32:	e046      	b.n	8003bc2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b34:	2140      	movs	r1, #64	; 0x40
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 fd1e 	bl	8004578 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003b3c:	e041      	b.n	8003bc2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	099b      	lsrs	r3, r3, #6
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d029      	beq.n	8003b9e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d023      	beq.n	8003b9e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d119      	bne.n	8003b94 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b6e:	d027      	beq.n	8003bc0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b78:	d108      	bne.n	8003b8c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b88:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003b8a:	e019      	b.n	8003bc0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fa2d 	bl	8003fec <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003b92:	e015      	b.n	8003bc0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b94:	2140      	movs	r1, #64	; 0x40
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fcee 	bl	8004578 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b9c:	e010      	b.n	8003bc0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fab3 	bl	8004124 <I2C_ITMasterCplt>
 8003bbe:	e000      	b.n	8003bc2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003bc0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <I2C_Slave_ISR_DMA+0x24>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e0c9      	b.n	8003d8c <I2C_Slave_ISR_DMA+0x1b8>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fb4c 	bl	80042b8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 809a 	beq.w	8003d62 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8093 	beq.w	8003d62 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	0b9b      	lsrs	r3, r3, #14
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	0bdb      	lsrs	r3, r3, #15
 8003c4c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d07f      	beq.n	8003d54 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	0bdb      	lsrs	r3, r3, #15
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003c74:	2301      	movs	r3, #1
 8003c76:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	0b9b      	lsrs	r3, r3, #14
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d128      	bne.n	8003cf4 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b28      	cmp	r3, #40	; 0x28
 8003cac:	d108      	bne.n	8003cc0 <I2C_Slave_ISR_DMA+0xec>
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cb4:	d104      	bne.n	8003cc0 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fc07 	bl	80044cc <I2C_ITListenCplt>
 8003cbe:	e048      	b.n	8003d52 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b29      	cmp	r3, #41	; 0x29
 8003cca:	d10e      	bne.n	8003cea <I2C_Slave_ISR_DMA+0x116>
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd2:	d00a      	beq.n	8003cea <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2210      	movs	r2, #16
 8003cda:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fd42 	bl	8004766 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f9bf 	bl	8004066 <I2C_ITSlaveSeqCplt>
 8003ce8:	e033      	b.n	8003d52 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2210      	movs	r2, #16
 8003cf0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003cf2:	e034      	b.n	8003d5e <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	f043 0204 	orr.w	r2, r3, #4
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <I2C_Slave_ISR_DMA+0x14a>
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d1c:	d11f      	bne.n	8003d5e <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b21      	cmp	r3, #33	; 0x21
 8003d22:	d002      	beq.n	8003d2a <I2C_Slave_ISR_DMA+0x156>
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b29      	cmp	r3, #41	; 0x29
 8003d28:	d103      	bne.n	8003d32 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d30:	e008      	b.n	8003d44 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	2b22      	cmp	r3, #34	; 0x22
 8003d36:	d002      	beq.n	8003d3e <I2C_Slave_ISR_DMA+0x16a>
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d3c:	d102      	bne.n	8003d44 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2222      	movs	r2, #34	; 0x22
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 fc14 	bl	8004578 <I2C_ITError>
      if (treatdmanack == 1U)
 8003d50:	e005      	b.n	8003d5e <I2C_Slave_ISR_DMA+0x18a>
 8003d52:	e004      	b.n	8003d5e <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d5c:	e011      	b.n	8003d82 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003d5e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d60:	e00f      	b.n	8003d82 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	08db      	lsrs	r3, r3, #3
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	08db      	lsrs	r3, r3, #3
 8003d72:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f8b1 	bl	8003ee4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	4611      	mov	r1, r2
 8003da0:	461a      	mov	r2, r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	817b      	strh	r3, [r7, #10]
 8003da6:	460b      	mov	r3, r1
 8003da8:	813b      	strh	r3, [r7, #8]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	8979      	ldrh	r1, [r7, #10]
 8003db4:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <I2C_RequestMemoryWrite+0xa4>)
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fe47 	bl	8004a50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fd4f 	bl	800486a <I2C_WaitOnTXISFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e02c      	b.n	8003e30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d105      	bne.n	8003de8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ddc:	893b      	ldrh	r3, [r7, #8]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	629a      	str	r2, [r3, #40]	; 0x28
 8003de6:	e015      	b.n	8003e14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003de8:	893b      	ldrh	r3, [r7, #8]
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	69b9      	ldr	r1, [r7, #24]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fd35 	bl	800486a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e012      	b.n	8003e30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e0a:	893b      	ldrh	r3, [r7, #8]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2180      	movs	r1, #128	; 0x80
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fce3 	bl	80047ea <I2C_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	80002000 	.word	0x80002000

08003e3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	8979      	ldrh	r1, [r7, #10]
 8003e5c:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <I2C_RequestMemoryRead+0xa4>)
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2300      	movs	r3, #0
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fdf4 	bl	8004a50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	69b9      	ldr	r1, [r7, #24]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fcfc 	bl	800486a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e02c      	b.n	8003ed6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d105      	bne.n	8003e8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e82:	893b      	ldrh	r3, [r7, #8]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e8c:	e015      	b.n	8003eba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e8e:	893b      	ldrh	r3, [r7, #8]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	69b9      	ldr	r1, [r7, #24]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fce2 	bl	800486a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e012      	b.n	8003ed6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb0:	893b      	ldrh	r3, [r7, #8]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2140      	movs	r1, #64	; 0x40
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fc90 	bl	80047ea <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	80002000 	.word	0x80002000

08003ee4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003efa:	2b28      	cmp	r3, #40	; 0x28
 8003efc:	d16a      	bne.n	8003fd4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	0c1b      	lsrs	r3, r3, #16
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f1c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f2a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f38:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d138      	bne.n	8003fb4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003f42:	897b      	ldrh	r3, [r7, #10]
 8003f44:	09db      	lsrs	r3, r3, #7
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	89bb      	ldrh	r3, [r7, #12]
 8003f4a:	4053      	eors	r3, r2
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f003 0306 	and.w	r3, r3, #6
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d11c      	bne.n	8003f90 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003f56:	897b      	ldrh	r3, [r7, #10]
 8003f58:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d13b      	bne.n	8003fe4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2208      	movs	r2, #8
 8003f78:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f82:	89ba      	ldrh	r2, [r7, #12]
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff facf 	bl	800352c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f8e:	e029      	b.n	8003fe4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003f90:	893b      	ldrh	r3, [r7, #8]
 8003f92:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fe2f 	bl	8004bfc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fa6:	89ba      	ldrh	r2, [r7, #12]
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	4619      	mov	r1, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff fabd 	bl	800352c <HAL_I2C_AddrCallback>
}
 8003fb2:	e017      	b.n	8003fe4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fe1f 	bl	8004bfc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fc6:	89ba      	ldrh	r2, [r7, #12]
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff faad 	bl	800352c <HAL_I2C_AddrCallback>
}
 8003fd2:	e007      	b.n	8003fe4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b21      	cmp	r3, #33	; 0x21
 8004006:	d115      	bne.n	8004034 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2211      	movs	r2, #17
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800401c:	2101      	movs	r1, #1
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fdec 	bl	8004bfc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fa55 	bl	80034dc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004032:	e014      	b.n	800405e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2212      	movs	r2, #18
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004048:	2102      	movs	r1, #2
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fdd6 	bl	8004bfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fa49 	bl	80034f0 <HAL_I2C_MasterRxCpltCallback>
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	0b9b      	lsrs	r3, r3, #14
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e00d      	b.n	80040b8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	0bdb      	lsrs	r3, r3, #15
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040b6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b29      	cmp	r3, #41	; 0x29
 80040c2:	d112      	bne.n	80040ea <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2228      	movs	r2, #40	; 0x28
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2221      	movs	r2, #33	; 0x21
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80040d2:	2101      	movs	r1, #1
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fd91 	bl	8004bfc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fa0e 	bl	8003504 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80040e8:	e017      	b.n	800411a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b2a      	cmp	r3, #42	; 0x2a
 80040f4:	d111      	bne.n	800411a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2228      	movs	r2, #40	; 0x28
 80040fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2222      	movs	r2, #34	; 0x22
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004104:	2102      	movs	r1, #2
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fd78 	bl	8004bfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff f9ff 	bl	8003518 <HAL_I2C_SlaveRxCpltCallback>
}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2220      	movs	r2, #32
 8004138:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b21      	cmp	r3, #33	; 0x21
 8004144:	d107      	bne.n	8004156 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004146:	2101      	movs	r1, #1
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fd57 	bl	8004bfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2211      	movs	r2, #17
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
 8004154:	e00c      	b.n	8004170 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b22      	cmp	r3, #34	; 0x22
 8004160:	d106      	bne.n	8004170 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004162:	2102      	movs	r1, #2
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fd49 	bl	8004bfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2212      	movs	r2, #18
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6859      	ldr	r1, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b4d      	ldr	r3, [pc, #308]	; (80042b0 <I2C_ITMasterCplt+0x18c>)
 800417c:	400b      	ands	r3, r1
 800417e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a4a      	ldr	r2, [pc, #296]	; (80042b4 <I2C_ITMasterCplt+0x190>)
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2210      	movs	r2, #16
 800419e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	f043 0204 	orr.w	r2, r3, #4
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b60      	cmp	r3, #96	; 0x60
 80041b6:	d10b      	bne.n	80041d0 <I2C_ITMasterCplt+0xac>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	089b      	lsrs	r3, r3, #2
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80041ce:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fac8 	bl	8004766 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b60      	cmp	r3, #96	; 0x60
 80041e6:	d002      	beq.n	80041ee <I2C_ITMasterCplt+0xca>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d006      	beq.n	80041fc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	4619      	mov	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f9bf 	bl	8004578 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80041fa:	e054      	b.n	80042a6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b21      	cmp	r3, #33	; 0x21
 8004206:	d124      	bne.n	8004252 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d10b      	bne.n	800423a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fc fa94 	bl	8000760 <HAL_I2C_MemTxCpltCallback>
}
 8004238:	e035      	b.n	80042a6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff f946 	bl	80034dc <HAL_I2C_MasterTxCpltCallback>
}
 8004250:	e029      	b.n	80042a6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b22      	cmp	r3, #34	; 0x22
 800425c:	d123      	bne.n	80042a6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d10b      	bne.n	8004290 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff f967 	bl	800355c <HAL_I2C_MemRxCpltCallback>
}
 800428e:	e00a      	b.n	80042a6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff f925 	bl	80034f0 <HAL_I2C_MasterRxCpltCallback>
}
 80042a6:	bf00      	nop
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	fe00e800 	.word	0xfe00e800
 80042b4:	ffff0000 	.word	0xffff0000

080042b8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2220      	movs	r2, #32
 80042dc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b21      	cmp	r3, #33	; 0x21
 80042e2:	d002      	beq.n	80042ea <I2C_ITSlaveCplt+0x32>
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b29      	cmp	r3, #41	; 0x29
 80042e8:	d108      	bne.n	80042fc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80042ea:	f248 0101 	movw	r1, #32769	; 0x8001
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fc84 	bl	8004bfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2221      	movs	r2, #33	; 0x21
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30
 80042fa:	e00d      	b.n	8004318 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	2b22      	cmp	r3, #34	; 0x22
 8004300:	d002      	beq.n	8004308 <I2C_ITSlaveCplt+0x50>
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	2b2a      	cmp	r3, #42	; 0x2a
 8004306:	d107      	bne.n	8004318 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004308:	f248 0102 	movw	r1, #32770	; 0x8002
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fc75 	bl	8004bfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2222      	movs	r2, #34	; 0x22
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004326:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b64      	ldr	r3, [pc, #400]	; (80044c4 <I2C_ITSlaveCplt+0x20c>)
 8004334:	400b      	ands	r3, r1
 8004336:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fa14 	bl	8004766 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	0b9b      	lsrs	r3, r3, #14
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d013      	beq.n	8004372 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004358:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004370:	e018      	b.n	80043a4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	0bdb      	lsrs	r3, r3, #15
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d012      	beq.n	80043a4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800438c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	b29a      	uxth	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	089b      	lsrs	r3, r3, #2
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d020      	beq.n	80043f2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0304 	bic.w	r3, r3, #4
 80043b6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00c      	beq.n	80043f2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	f043 0204 	orr.w	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	2b00      	cmp	r3, #0
 800441c:	d010      	beq.n	8004440 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	4619      	mov	r1, r3
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8a7 	bl	8004578 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b28      	cmp	r3, #40	; 0x28
 8004434:	d141      	bne.n	80044ba <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004436:	6979      	ldr	r1, [r7, #20]
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f847 	bl	80044cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800443e:	e03c      	b.n	80044ba <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004448:	d014      	beq.n	8004474 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fe0b 	bl	8004066 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <I2C_ITSlaveCplt+0x210>)
 8004454:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff f86b 	bl	8003548 <HAL_I2C_ListenCpltCallback>
}
 8004472:	e022      	b.n	80044ba <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b22      	cmp	r3, #34	; 0x22
 800447e:	d10e      	bne.n	800449e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff f83e 	bl	8003518 <HAL_I2C_SlaveRxCpltCallback>
}
 800449c:	e00d      	b.n	80044ba <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff f825 	bl	8003504 <HAL_I2C_SlaveTxCpltCallback>
}
 80044ba:	bf00      	nop
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	fe00e800 	.word	0xfe00e800
 80044c8:	ffff0000 	.word	0xffff0000

080044cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a26      	ldr	r2, [pc, #152]	; (8004574 <I2C_ITListenCplt+0xa8>)
 80044da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d022      	beq.n	800454a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	d012      	beq.n	800454a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	f043 0204 	orr.w	r2, r3, #4
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800454a:	f248 0103 	movw	r1, #32771	; 0x8003
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fb54 	bl	8004bfc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2210      	movs	r2, #16
 800455a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7fe ffef 	bl	8003548 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	ffff0000 	.word	0xffff0000

08004578 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a5d      	ldr	r2, [pc, #372]	; (800470c <I2C_ITError+0x194>)
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b28      	cmp	r3, #40	; 0x28
 80045ae:	d005      	beq.n	80045bc <I2C_ITError+0x44>
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b29      	cmp	r3, #41	; 0x29
 80045b4:	d002      	beq.n	80045bc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b2a      	cmp	r3, #42	; 0x2a
 80045ba:	d10b      	bne.n	80045d4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045bc:	2103      	movs	r1, #3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fb1c 	bl	8004bfc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2228      	movs	r2, #40	; 0x28
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a50      	ldr	r2, [pc, #320]	; (8004710 <I2C_ITError+0x198>)
 80045d0:	635a      	str	r2, [r3, #52]	; 0x34
 80045d2:	e011      	b.n	80045f8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045d4:	f248 0103 	movw	r1, #32771	; 0x8003
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fb0f 	bl	8004bfc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b60      	cmp	r3, #96	; 0x60
 80045e8:	d003      	beq.n	80045f2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	2b00      	cmp	r3, #0
 8004604:	d039      	beq.n	800467a <I2C_ITError+0x102>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b11      	cmp	r3, #17
 800460a:	d002      	beq.n	8004612 <I2C_ITError+0x9a>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b21      	cmp	r3, #33	; 0x21
 8004610:	d133      	bne.n	800467a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004620:	d107      	bne.n	8004632 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004630:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe f939 	bl	80028ae <HAL_DMA_GetState>
 800463c:	4603      	mov	r3, r0
 800463e:	2b01      	cmp	r3, #1
 8004640:	d017      	beq.n	8004672 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	4a33      	ldr	r2, [pc, #204]	; (8004714 <I2C_ITError+0x19c>)
 8004648:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe f8eb 	bl	8002832 <HAL_DMA_Abort_IT>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d04d      	beq.n	80046fe <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800466c:	4610      	mov	r0, r2
 800466e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004670:	e045      	b.n	80046fe <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f850 	bl	8004718 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004678:	e041      	b.n	80046fe <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d039      	beq.n	80046f6 <I2C_ITError+0x17e>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b12      	cmp	r3, #18
 8004686:	d002      	beq.n	800468e <I2C_ITError+0x116>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b22      	cmp	r3, #34	; 0x22
 800468c:	d133      	bne.n	80046f6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469c:	d107      	bne.n	80046ae <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fe f8fb 	bl	80028ae <HAL_DMA_GetState>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d017      	beq.n	80046ee <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	4a14      	ldr	r2, [pc, #80]	; (8004714 <I2C_ITError+0x19c>)
 80046c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe f8ad 	bl	8002832 <HAL_DMA_Abort_IT>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d011      	beq.n	8004702 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046e8:	4610      	mov	r0, r2
 80046ea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ec:	e009      	b.n	8004702 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f812 	bl	8004718 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046f4:	e005      	b.n	8004702 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f80e 	bl	8004718 <I2C_TreatErrorCallback>
  }
}
 80046fc:	e002      	b.n	8004704 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004702:	bf00      	nop
}
 8004704:	bf00      	nop
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	ffff0000 	.word	0xffff0000
 8004710:	080037e9 	.word	0x080037e9
 8004714:	080047af 	.word	0x080047af

08004718 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b60      	cmp	r3, #96	; 0x60
 800472a:	d10e      	bne.n	800474a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fe ff1e 	bl	8003584 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004748:	e009      	b.n	800475e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fe ff09 	bl	8003570 <HAL_I2C_ErrorCallback>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b02      	cmp	r3, #2
 800477a:	d103      	bne.n	8004784 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2200      	movs	r2, #0
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b01      	cmp	r3, #1
 8004790:	d007      	beq.n	80047a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0201 	orr.w	r2, r2, #1
 80047a0:	619a      	str	r2, [r3, #24]
  }
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	2200      	movs	r2, #0
 80047ca:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d8:	2200      	movs	r2, #0
 80047da:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff ff9b 	bl	8004718 <I2C_TreatErrorCallback>
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	603b      	str	r3, [r7, #0]
 80047f6:	4613      	mov	r3, r2
 80047f8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047fa:	e022      	b.n	8004842 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d01e      	beq.n	8004842 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004804:	f7fd fe6c 	bl	80024e0 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d302      	bcc.n	800481a <I2C_WaitOnFlagUntilTimeout+0x30>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d113      	bne.n	8004842 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	f043 0220 	orr.w	r2, r3, #32
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e00f      	b.n	8004862 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	429a      	cmp	r2, r3
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	429a      	cmp	r2, r3
 800485e:	d0cd      	beq.n	80047fc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004876:	e02c      	b.n	80048d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f871 	bl	8004964 <I2C_IsAcknowledgeFailed>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e02a      	b.n	80048e2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	d01e      	beq.n	80048d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004894:	f7fd fe24 	bl	80024e0 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d113      	bne.n	80048d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e007      	b.n	80048e2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d1cb      	bne.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048f6:	e028      	b.n	800494a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f831 	bl	8004964 <I2C_IsAcknowledgeFailed>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e026      	b.n	800495a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490c:	f7fd fde8 	bl	80024e0 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	429a      	cmp	r2, r3
 800491a:	d302      	bcc.n	8004922 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d113      	bne.n	800494a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004926:	f043 0220 	orr.w	r2, r3, #32
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e007      	b.n	800495a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b20      	cmp	r3, #32
 8004956:	d1cf      	bne.n	80048f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b10      	cmp	r3, #16
 800497c:	d161      	bne.n	8004a42 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800498c:	d02b      	beq.n	80049e6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800499c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800499e:	e022      	b.n	80049e6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a6:	d01e      	beq.n	80049e6 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a8:	f7fd fd9a 	bl	80024e0 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d302      	bcc.n	80049be <I2C_IsAcknowledgeFailed+0x5a>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d113      	bne.n	80049e6 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	f043 0220 	orr.w	r2, r3, #32
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e02e      	b.n	8004a44 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d1d5      	bne.n	80049a0 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2210      	movs	r2, #16
 80049fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2220      	movs	r2, #32
 8004a02:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff feae 	bl	8004766 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6859      	ldr	r1, [r3, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <I2C_IsAcknowledgeFailed+0xe8>)
 8004a16:	400b      	ands	r3, r1
 8004a18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f043 0204 	orr.w	r2, r3, #4
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	fe00e800 	.word	0xfe00e800

08004a50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	817b      	strh	r3, [r7, #10]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2b      	ldr	r2, [pc, #172]	; (8004b14 <I2C_TransferConfig+0xc4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <I2C_TransferConfig+0x3a>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a29      	ldr	r2, [pc, #164]	; (8004b18 <I2C_TransferConfig+0xc8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <I2C_TransferConfig+0x3a>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a28      	ldr	r2, [pc, #160]	; (8004b1c <I2C_TransferConfig+0xcc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <I2C_TransferConfig+0x3a>
 8004a80:	f641 11cb 	movw	r1, #6603	; 0x19cb
 8004a84:	4826      	ldr	r0, [pc, #152]	; (8004b20 <I2C_TransferConfig+0xd0>)
 8004a86:	f7fd f99c 	bl	8001dc2 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a90:	d00b      	beq.n	8004aaa <I2C_TransferConfig+0x5a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a98:	d007      	beq.n	8004aaa <I2C_TransferConfig+0x5a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <I2C_TransferConfig+0x5a>
 8004aa0:	f641 11cc 	movw	r1, #6604	; 0x19cc
 8004aa4:	481e      	ldr	r0, [pc, #120]	; (8004b20 <I2C_TransferConfig+0xd0>)
 8004aa6:	f7fd f98c 	bl	8001dc2 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <I2C_TransferConfig+0xd4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00f      	beq.n	8004ad2 <I2C_TransferConfig+0x82>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <I2C_TransferConfig+0xd8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00b      	beq.n	8004ad2 <I2C_TransferConfig+0x82>
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <I2C_TransferConfig+0xdc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d007      	beq.n	8004ad2 <I2C_TransferConfig+0x82>
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <I2C_TransferConfig+0x82>
 8004ac8:	f641 11cd 	movw	r1, #6605	; 0x19cd
 8004acc:	4814      	ldr	r0, [pc, #80]	; (8004b20 <I2C_TransferConfig+0xd0>)
 8004ace:	f7fd f978 	bl	8001dc2 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	0d5b      	lsrs	r3, r3, #21
 8004adc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ae0:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <I2C_TransferConfig+0xe0>)
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	ea02 0103 	and.w	r1, r2, r3
 8004aea:	897b      	ldrh	r3, [r7, #10]
 8004aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004af0:	7a7b      	ldrb	r3, [r7, #9]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40005400 	.word	0x40005400
 8004b18:	40005800 	.word	0x40005800
 8004b1c:	40007800 	.word	0x40007800
 8004b20:	0800c248 	.word	0x0800c248
 8004b24:	80004000 	.word	0x80004000
 8004b28:	80002400 	.word	0x80002400
 8004b2c:	80002000 	.word	0x80002000
 8004b30:	03ff63ff 	.word	0x03ff63ff

08004b34 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	4a2a      	ldr	r2, [pc, #168]	; (8004bf4 <I2C_Enable_IRQ+0xc0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004b52:	4a29      	ldr	r2, [pc, #164]	; (8004bf8 <I2C_Enable_IRQ+0xc4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d11d      	bne.n	8004b94 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	da03      	bge.n	8004b68 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b66:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b68:	887b      	ldrh	r3, [r7, #2]
 8004b6a:	2b10      	cmp	r3, #16
 8004b6c:	d103      	bne.n	8004b76 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004b74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b76:	887b      	ldrh	r3, [r7, #2]
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d103      	bne.n	8004b84 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b82:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b84:	887b      	ldrh	r3, [r7, #2]
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d125      	bne.n	8004bd6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b90:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b92:	e020      	b.n	8004bd6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	da03      	bge.n	8004ba4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004ba2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004bb4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004bb6:	887b      	ldrh	r3, [r7, #2]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004bc6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004bc8:	887b      	ldrh	r3, [r7, #2]
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d103      	bne.n	8004bd6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f043 0320 	orr.w	r3, r3, #32
 8004bd4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6819      	ldr	r1, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	601a      	str	r2, [r3, #0]
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	080039ef 	.word	0x080039ef
 8004bf8:	08003bd5 	.word	0x08003bd5

08004bfc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c0c:	887b      	ldrh	r3, [r7, #2]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00f      	beq.n	8004c36 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004c1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c2a:	2b28      	cmp	r3, #40	; 0x28
 8004c2c:	d003      	beq.n	8004c36 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c36:	887b      	ldrh	r3, [r7, #2]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00f      	beq.n	8004c60 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004c46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c54:	2b28      	cmp	r3, #40	; 0x28
 8004c56:	d003      	beq.n	8004c60 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	da03      	bge.n	8004c70 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004c6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c70:	887b      	ldrh	r3, [r7, #2]
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d103      	bne.n	8004c7e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004c7c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c7e:	887b      	ldrh	r3, [r7, #2]
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d103      	bne.n	8004c8c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f043 0320 	orr.w	r3, r3, #32
 8004c8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c8c:	887b      	ldrh	r3, [r7, #2]
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d103      	bne.n	8004c9a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	400a      	ands	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a30      	ldr	r2, [pc, #192]	; (8004d88 <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00d      	beq.n	8004ce8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a2e      	ldr	r2, [pc, #184]	; (8004d8c <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d008      	beq.n	8004ce8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2d      	ldr	r2, [pc, #180]	; (8004d90 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004ce0:	2164      	movs	r1, #100	; 0x64
 8004ce2:	482c      	ldr	r0, [pc, #176]	; (8004d94 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004ce4:	f7fd f86d 	bl	8001dc2 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf4:	d003      	beq.n	8004cfe <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8004cf6:	2165      	movs	r1, #101	; 0x65
 8004cf8:	4826      	ldr	r0, [pc, #152]	; (8004d94 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004cfa:	f7fd f862 	bl	8001dc2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d138      	bne.n	8004d7c <HAL_I2CEx_ConfigAnalogFilter+0xc4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e032      	b.n	8004d7e <HAL_I2CEx_ConfigAnalogFilter+0xc6>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2224      	movs	r2, #36	; 0x24
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6819      	ldr	r1, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e000      	b.n	8004d7e <HAL_I2CEx_ConfigAnalogFilter+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004d7c:	2302      	movs	r3, #2
  }
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40005400 	.word	0x40005400
 8004d8c:	40005800 	.word	0x40005800
 8004d90:	40007800 	.word	0x40007800
 8004d94:	0800c280 	.word	0x0800c280

08004d98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2e      	ldr	r2, [pc, #184]	; (8004e60 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00d      	beq.n	8004dc8 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a2c      	ldr	r2, [pc, #176]	; (8004e64 <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d008      	beq.n	8004dc8 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a2b      	ldr	r2, [pc, #172]	; (8004e68 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004dc0:	2192      	movs	r1, #146	; 0x92
 8004dc2:	482a      	ldr	r0, [pc, #168]	; (8004e6c <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004dc4:	f7fc fffd 	bl	8001dc2 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b0f      	cmp	r3, #15
 8004dcc:	d903      	bls.n	8004dd6 <HAL_I2CEx_ConfigDigitalFilter+0x3e>
 8004dce:	2193      	movs	r1, #147	; 0x93
 8004dd0:	4826      	ldr	r0, [pc, #152]	; (8004e6c <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004dd2:	f7fc fff6 	bl	8001dc2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d139      	bne.n	8004e56 <HAL_I2CEx_ConfigDigitalFilter+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e033      	b.n	8004e58 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2224      	movs	r2, #36	; 0x24
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0201 	orr.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e000      	b.n	8004e58 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40005400 	.word	0x40005400
 8004e64:	40005800 	.word	0x40005800
 8004e68:	40007800 	.word	0x40007800
 8004e6c:	0800c280 	.word	0x0800c280

08004e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	1d3b      	adds	r3, r7, #4
 8004e7a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e7c:	1d3b      	adds	r3, r7, #4
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f001 b85e 	b.w	8005f46 <HAL_RCC_OscConfig+0x10d6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d020      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x66>
 8004e94:	1d3b      	adds	r3, r7, #4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d119      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x66>
 8004ea2:	1d3b      	adds	r3, r7, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d112      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x66>
 8004eb0:	1d3b      	adds	r3, r7, #4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x66>
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x66>
 8004ecc:	f240 114b 	movw	r1, #331	; 0x14b
 8004ed0:	48be      	ldr	r0, [pc, #760]	; (80051cc <HAL_RCC_OscConfig+0x35c>)
 8004ed2:	f7fc ff76 	bl	8001dc2 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8178 	beq.w	80051d6 <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004ee6:	1d3b      	adds	r3, r7, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d010      	beq.n	8004f12 <HAL_RCC_OscConfig+0xa2>
 8004ef0:	1d3b      	adds	r3, r7, #4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efa:	d00a      	beq.n	8004f12 <HAL_RCC_OscConfig+0xa2>
 8004efc:	1d3b      	adds	r3, r7, #4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f06:	d004      	beq.n	8004f12 <HAL_RCC_OscConfig+0xa2>
 8004f08:	f240 1151 	movw	r1, #337	; 0x151
 8004f0c:	48af      	ldr	r0, [pc, #700]	; (80051cc <HAL_RCC_OscConfig+0x35c>)
 8004f0e:	f7fc ff58 	bl	8001dc2 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f12:	4baf      	ldr	r3, [pc, #700]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d00c      	beq.n	8004f38 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f1e:	4bac      	ldr	r3, [pc, #688]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d159      	bne.n	8004fde <HAL_RCC_OscConfig+0x16e>
 8004f2a:	4ba9      	ldr	r3, [pc, #676]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f36:	d152      	bne.n	8004fde <HAL_RCC_OscConfig+0x16e>
 8004f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f3c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f40:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004f44:	fa93 f3a3 	rbit	r3, r3
 8004f48:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8004f4c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f50:	fab3 f383 	clz	r3, r3
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d102      	bne.n	8004f6a <HAL_RCC_OscConfig+0xfa>
 8004f64:	4b9a      	ldr	r3, [pc, #616]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	e015      	b.n	8004f96 <HAL_RCC_OscConfig+0x126>
 8004f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f6e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004f76:	fa93 f3a3 	rbit	r3, r3
 8004f7a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004f86:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004f8a:	fa93 f3a3 	rbit	r3, r3
 8004f8e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004f92:	4b8f      	ldr	r3, [pc, #572]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f9a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004f9e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004fa2:	fa92 f2a2 	rbit	r2, r2
 8004fa6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004faa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004fae:	fab2 f282 	clz	r2, r2
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	f042 0220 	orr.w	r2, r2, #32
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	f002 021f 	and.w	r2, r2, #31
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8104 	beq.w	80051d4 <HAL_RCC_OscConfig+0x364>
 8004fcc:	1d3b      	adds	r3, r7, #4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f040 80fe 	bne.w	80051d4 <HAL_RCC_OscConfig+0x364>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f000 bfb4 	b.w	8005f46 <HAL_RCC_OscConfig+0x10d6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe8:	d106      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x188>
 8004fea:	4b79      	ldr	r3, [pc, #484]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a78      	ldr	r2, [pc, #480]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e030      	b.n	800505a <HAL_RCC_OscConfig+0x1ea>
 8004ff8:	1d3b      	adds	r3, r7, #4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0x1ac>
 8005002:	4b73      	ldr	r3, [pc, #460]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a72      	ldr	r2, [pc, #456]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8005008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	4b70      	ldr	r3, [pc, #448]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a6f      	ldr	r2, [pc, #444]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8005014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e01e      	b.n	800505a <HAL_RCC_OscConfig+0x1ea>
 800501c:	1d3b      	adds	r3, r7, #4
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005026:	d10c      	bne.n	8005042 <HAL_RCC_OscConfig+0x1d2>
 8005028:	4b69      	ldr	r3, [pc, #420]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a68      	ldr	r2, [pc, #416]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 800502e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	4b66      	ldr	r3, [pc, #408]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a65      	ldr	r2, [pc, #404]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e00b      	b.n	800505a <HAL_RCC_OscConfig+0x1ea>
 8005042:	4b63      	ldr	r3, [pc, #396]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a62      	ldr	r2, [pc, #392]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8005048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b60      	ldr	r3, [pc, #384]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a5f      	ldr	r2, [pc, #380]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8005054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005058:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800505a:	1d3b      	adds	r3, r7, #4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d059      	beq.n	8005118 <HAL_RCC_OscConfig+0x2a8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fd fa3c 	bl	80024e0 <HAL_GetTick>
 8005068:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506c:	e00a      	b.n	8005084 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800506e:	f7fd fa37 	bl	80024e0 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d902      	bls.n	8005084 <HAL_RCC_OscConfig+0x214>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	f000 bf61 	b.w	8005f46 <HAL_RCC_OscConfig+0x10d6>
 8005084:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005088:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005090:	fa93 f3a3 	rbit	r3, r3
 8005094:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005098:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509c:	fab3 f383 	clz	r3, r3
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d102      	bne.n	80050b6 <HAL_RCC_OscConfig+0x246>
 80050b0:	4b47      	ldr	r3, [pc, #284]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	e015      	b.n	80050e2 <HAL_RCC_OscConfig+0x272>
 80050b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80050c2:	fa93 f3a3 	rbit	r3, r3
 80050c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80050ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80050d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80050d6:	fa93 f3a3 	rbit	r3, r3
 80050da:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80050de:	4b3c      	ldr	r3, [pc, #240]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050e6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80050ea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80050ee:	fa92 f2a2 	rbit	r2, r2
 80050f2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80050f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80050fa:	fab2 f282 	clz	r2, r2
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	f042 0220 	orr.w	r2, r2, #32
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	f002 021f 	and.w	r2, r2, #31
 800510a:	2101      	movs	r1, #1
 800510c:	fa01 f202 	lsl.w	r2, r1, r2
 8005110:	4013      	ands	r3, r2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0ab      	beq.n	800506e <HAL_RCC_OscConfig+0x1fe>
 8005116:	e05e      	b.n	80051d6 <HAL_RCC_OscConfig+0x366>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fd f9e2 	bl	80024e0 <HAL_GetTick>
 800511c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005120:	e00a      	b.n	8005138 <HAL_RCC_OscConfig+0x2c8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005122:	f7fd f9dd 	bl	80024e0 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b64      	cmp	r3, #100	; 0x64
 8005130:	d902      	bls.n	8005138 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	f000 bf07 	b.w	8005f46 <HAL_RCC_OscConfig+0x10d6>
 8005138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800513c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005140:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005144:	fa93 f3a3 	rbit	r3, r3
 8005148:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800514c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005150:	fab3 f383 	clz	r3, r3
 8005154:	b2db      	uxtb	r3, r3
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	d102      	bne.n	800516a <HAL_RCC_OscConfig+0x2fa>
 8005164:	4b1a      	ldr	r3, [pc, #104]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	e015      	b.n	8005196 <HAL_RCC_OscConfig+0x326>
 800516a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800516e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005172:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005176:	fa93 f3a3 	rbit	r3, r3
 800517a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800517e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005182:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005186:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800518a:	fa93 f3a3 	rbit	r3, r3
 800518e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005192:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <HAL_RCC_OscConfig+0x360>)
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800519a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800519e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80051a2:	fa92 f2a2 	rbit	r2, r2
 80051a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80051aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80051ae:	fab2 f282 	clz	r2, r2
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	f042 0220 	orr.w	r2, r2, #32
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	f002 021f 	and.w	r2, r2, #31
 80051be:	2101      	movs	r1, #1
 80051c0:	fa01 f202 	lsl.w	r2, r1, r2
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ab      	bne.n	8005122 <HAL_RCC_OscConfig+0x2b2>
 80051ca:	e004      	b.n	80051d6 <HAL_RCC_OscConfig+0x366>
 80051cc:	0800c2bc 	.word	0x0800c2bc
 80051d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051d6:	1d3b      	adds	r3, r7, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 818e 	beq.w	8005502 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d009      	beq.n	8005204 <HAL_RCC_OscConfig+0x394>
 80051f0:	1d3b      	adds	r3, r7, #4
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d004      	beq.n	8005204 <HAL_RCC_OscConfig+0x394>
 80051fa:	f240 1189 	movw	r1, #393	; 0x189
 80051fe:	48a8      	ldr	r0, [pc, #672]	; (80054a0 <HAL_RCC_OscConfig+0x630>)
 8005200:	f7fc fddf 	bl	8001dc2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b1f      	cmp	r3, #31
 800520c:	d904      	bls.n	8005218 <HAL_RCC_OscConfig+0x3a8>
 800520e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8005212:	48a3      	ldr	r0, [pc, #652]	; (80054a0 <HAL_RCC_OscConfig+0x630>)
 8005214:	f7fc fdd5 	bl	8001dc2 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005218:	4ba2      	ldr	r3, [pc, #648]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 030c 	and.w	r3, r3, #12
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005224:	4b9f      	ldr	r3, [pc, #636]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f003 030c 	and.w	r3, r3, #12
 800522c:	2b08      	cmp	r3, #8
 800522e:	d16d      	bne.n	800530c <HAL_RCC_OscConfig+0x49c>
 8005230:	4b9c      	ldr	r3, [pc, #624]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523c:	d166      	bne.n	800530c <HAL_RCC_OscConfig+0x49c>
 800523e:	2302      	movs	r3, #2
 8005240:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005244:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005248:	fa93 f3a3 	rbit	r3, r3
 800524c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005250:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005254:	fab3 f383 	clz	r3, r3
 8005258:	b2db      	uxtb	r3, r3
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	d102      	bne.n	800526e <HAL_RCC_OscConfig+0x3fe>
 8005268:	4b8e      	ldr	r3, [pc, #568]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	e013      	b.n	8005296 <HAL_RCC_OscConfig+0x426>
 800526e:	2302      	movs	r3, #2
 8005270:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005274:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005278:	fa93 f3a3 	rbit	r3, r3
 800527c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005280:	2302      	movs	r3, #2
 8005282:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005286:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800528a:	fa93 f3a3 	rbit	r3, r3
 800528e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005292:	4b84      	ldr	r3, [pc, #528]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2202      	movs	r2, #2
 8005298:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800529c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80052a0:	fa92 f2a2 	rbit	r2, r2
 80052a4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80052a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80052ac:	fab2 f282 	clz	r2, r2
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	f042 0220 	orr.w	r2, r2, #32
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	f002 021f 	and.w	r2, r2, #31
 80052bc:	2101      	movs	r1, #1
 80052be:	fa01 f202 	lsl.w	r2, r1, r2
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_RCC_OscConfig+0x468>
 80052c8:	1d3b      	adds	r3, r7, #4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d002      	beq.n	80052d8 <HAL_RCC_OscConfig+0x468>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f000 be37 	b.w	8005f46 <HAL_RCC_OscConfig+0x10d6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d8:	4b72      	ldr	r3, [pc, #456]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	21f8      	movs	r1, #248	; 0xf8
 80052e8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ec:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80052f0:	fa91 f1a1 	rbit	r1, r1
 80052f4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80052f8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80052fc:	fab1 f181 	clz	r1, r1
 8005300:	b2c9      	uxtb	r1, r1
 8005302:	408b      	lsls	r3, r1
 8005304:	4967      	ldr	r1, [pc, #412]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 8005306:	4313      	orrs	r3, r2
 8005308:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800530a:	e0fa      	b.n	8005502 <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800530c:	1d3b      	adds	r3, r7, #4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 8085 	beq.w	8005422 <HAL_RCC_OscConfig+0x5b2>
 8005318:	2301      	movs	r3, #1
 800531a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005322:	fa93 f3a3 	rbit	r3, r3
 8005326:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800532a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800532e:	fab3 f383 	clz	r3, r3
 8005332:	b2db      	uxtb	r3, r3
 8005334:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005338:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	461a      	mov	r2, r3
 8005340:	2301      	movs	r3, #1
 8005342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fd f8cc 	bl	80024e0 <HAL_GetTick>
 8005348:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800534c:	e00a      	b.n	8005364 <HAL_RCC_OscConfig+0x4f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800534e:	f7fd f8c7 	bl	80024e0 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d902      	bls.n	8005364 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	f000 bdf1 	b.w	8005f46 <HAL_RCC_OscConfig+0x10d6>
 8005364:	2302      	movs	r3, #2
 8005366:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800536e:	fa93 f3a3 	rbit	r3, r3
 8005372:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005376:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537a:	fab3 f383 	clz	r3, r3
 800537e:	b2db      	uxtb	r3, r3
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b01      	cmp	r3, #1
 800538c:	d102      	bne.n	8005394 <HAL_RCC_OscConfig+0x524>
 800538e:	4b45      	ldr	r3, [pc, #276]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	e013      	b.n	80053bc <HAL_RCC_OscConfig+0x54c>
 8005394:	2302      	movs	r3, #2
 8005396:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800539e:	fa93 f3a3 	rbit	r3, r3
 80053a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80053a6:	2302      	movs	r3, #2
 80053a8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80053ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80053b0:	fa93 f3a3 	rbit	r3, r3
 80053b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80053b8:	4b3a      	ldr	r3, [pc, #232]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	2202      	movs	r2, #2
 80053be:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80053c2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80053c6:	fa92 f2a2 	rbit	r2, r2
 80053ca:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80053ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80053d2:	fab2 f282 	clz	r2, r2
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	f042 0220 	orr.w	r2, r2, #32
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	f002 021f 	and.w	r2, r2, #31
 80053e2:	2101      	movs	r1, #1
 80053e4:	fa01 f202 	lsl.w	r2, r1, r2
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0af      	beq.n	800534e <HAL_RCC_OscConfig+0x4de>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ee:	4b2d      	ldr	r3, [pc, #180]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053f6:	1d3b      	adds	r3, r7, #4
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	21f8      	movs	r1, #248	; 0xf8
 80053fe:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005406:	fa91 f1a1 	rbit	r1, r1
 800540a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800540e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005412:	fab1 f181 	clz	r1, r1
 8005416:	b2c9      	uxtb	r1, r1
 8005418:	408b      	lsls	r3, r1
 800541a:	4922      	ldr	r1, [pc, #136]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	e06f      	b.n	8005502 <HAL_RCC_OscConfig+0x692>
 8005422:	2301      	movs	r3, #1
 8005424:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005428:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800542c:	fa93 f3a3 	rbit	r3, r3
 8005430:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005434:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005438:	fab3 f383 	clz	r3, r3
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005442:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	461a      	mov	r2, r3
 800544a:	2300      	movs	r3, #0
 800544c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544e:	f7fd f847 	bl	80024e0 <HAL_GetTick>
 8005452:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005456:	e00a      	b.n	800546e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005458:	f7fd f842 	bl	80024e0 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d902      	bls.n	800546e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	f000 bd6c 	b.w	8005f46 <HAL_RCC_OscConfig+0x10d6>
 800546e:	2302      	movs	r3, #2
 8005470:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005474:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005478:	fa93 f3a3 	rbit	r3, r3
 800547c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005480:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005484:	fab3 f383 	clz	r3, r3
 8005488:	b2db      	uxtb	r3, r3
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d107      	bne.n	80054a8 <HAL_RCC_OscConfig+0x638>
 8005498:	4b02      	ldr	r3, [pc, #8]	; (80054a4 <HAL_RCC_OscConfig+0x634>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	e018      	b.n	80054d0 <HAL_RCC_OscConfig+0x660>
 800549e:	bf00      	nop
 80054a0:	0800c2bc 	.word	0x0800c2bc
 80054a4:	40021000 	.word	0x40021000
 80054a8:	2302      	movs	r3, #2
 80054aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b2:	fa93 f3a3 	rbit	r3, r3
 80054b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054ba:	2302      	movs	r3, #2
 80054bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054c4:	fa93 f3a3 	rbit	r3, r3
 80054c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054cc:	4bc0      	ldr	r3, [pc, #768]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2202      	movs	r2, #2
 80054d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80054d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80054da:	fa92 f2a2 	rbit	r2, r2
 80054de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80054e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80054e6:	fab2 f282 	clz	r2, r2
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	f042 0220 	orr.w	r2, r2, #32
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	f002 021f 	and.w	r2, r2, #31
 80054f6:	2101      	movs	r1, #1
 80054f8:	fa01 f202 	lsl.w	r2, r1, r2
 80054fc:	4013      	ands	r3, r2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1aa      	bne.n	8005458 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005502:	1d3b      	adds	r3, r7, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 80e7 	beq.w	80056e0 <HAL_RCC_OscConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005512:	1d3b      	adds	r3, r7, #4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d009      	beq.n	8005530 <HAL_RCC_OscConfig+0x6c0>
 800551c:	1d3b      	adds	r3, r7, #4
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d004      	beq.n	8005530 <HAL_RCC_OscConfig+0x6c0>
 8005526:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800552a:	48aa      	ldr	r0, [pc, #680]	; (80057d4 <HAL_RCC_OscConfig+0x964>)
 800552c:	f7fc fc49 	bl	8001dc2 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d066      	beq.n	8005608 <HAL_RCC_OscConfig+0x798>
 800553a:	2301      	movs	r3, #1
 800553c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005544:	fa93 f3a3 	rbit	r3, r3
 8005548:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800554c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005550:	fab3 f383 	clz	r3, r3
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	4b9f      	ldr	r3, [pc, #636]	; (80057d8 <HAL_RCC_OscConfig+0x968>)
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	461a      	mov	r2, r3
 8005560:	2301      	movs	r3, #1
 8005562:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005564:	f7fc ffbc 	bl	80024e0 <HAL_GetTick>
 8005568:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556c:	e00a      	b.n	8005584 <HAL_RCC_OscConfig+0x714>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800556e:	f7fc ffb7 	bl	80024e0 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d902      	bls.n	8005584 <HAL_RCC_OscConfig+0x714>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	f000 bce1 	b.w	8005f46 <HAL_RCC_OscConfig+0x10d6>
 8005584:	2302      	movs	r3, #2
 8005586:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800558e:	fa93 f2a3 	rbit	r2, r3
 8005592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800559c:	2202      	movs	r2, #2
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	fa93 f2a3 	rbit	r2, r3
 80055aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80055b4:	2202      	movs	r2, #2
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	fa93 f2a3 	rbit	r2, r3
 80055c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80055c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c8:	4b81      	ldr	r3, [pc, #516]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 80055ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80055d0:	2102      	movs	r1, #2
 80055d2:	6019      	str	r1, [r3, #0]
 80055d4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	fa93 f1a3 	rbit	r1, r3
 80055de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80055e2:	6019      	str	r1, [r3, #0]
  return result;
 80055e4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	fab3 f383 	clz	r3, r3
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	2101      	movs	r1, #1
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	4013      	ands	r3, r2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0b3      	beq.n	800556e <HAL_RCC_OscConfig+0x6fe>
 8005606:	e06b      	b.n	80056e0 <HAL_RCC_OscConfig+0x870>
 8005608:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800560c:	2201      	movs	r2, #1
 800560e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005610:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	fa93 f2a3 	rbit	r2, r3
 800561a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800561e:	601a      	str	r2, [r3, #0]
  return result;
 8005620:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005624:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005626:	fab3 f383 	clz	r3, r3
 800562a:	b2db      	uxtb	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	4b6a      	ldr	r3, [pc, #424]	; (80057d8 <HAL_RCC_OscConfig+0x968>)
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	461a      	mov	r2, r3
 8005636:	2300      	movs	r3, #0
 8005638:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800563a:	f7fc ff51 	bl	80024e0 <HAL_GetTick>
 800563e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005642:	e00a      	b.n	800565a <HAL_RCC_OscConfig+0x7ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005644:	f7fc ff4c 	bl	80024e0 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d902      	bls.n	800565a <HAL_RCC_OscConfig+0x7ea>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	f000 bc76 	b.w	8005f46 <HAL_RCC_OscConfig+0x10d6>
 800565a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800565e:	2202      	movs	r2, #2
 8005660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	fa93 f2a3 	rbit	r2, r3
 800566c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005676:	2202      	movs	r2, #2
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	fa93 f2a3 	rbit	r2, r3
 8005684:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800568e:	2202      	movs	r2, #2
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	fa93 f2a3 	rbit	r2, r3
 800569c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80056a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a2:	4b4b      	ldr	r3, [pc, #300]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 80056a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80056aa:	2102      	movs	r1, #2
 80056ac:	6019      	str	r1, [r3, #0]
 80056ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	fa93 f1a3 	rbit	r1, r3
 80056b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056bc:	6019      	str	r1, [r3, #0]
  return result;
 80056be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	fab3 f383 	clz	r3, r3
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f003 031f 	and.w	r3, r3, #31
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1b1      	bne.n	8005644 <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 8171 	beq.w	80059d2 <HAL_RCC_OscConfig+0xb62>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f0:	2300      	movs	r3, #0
 80056f2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80056f6:	1d3b      	adds	r3, r7, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00e      	beq.n	800571e <HAL_RCC_OscConfig+0x8ae>
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d009      	beq.n	800571e <HAL_RCC_OscConfig+0x8ae>
 800570a:	1d3b      	adds	r3, r7, #4
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b05      	cmp	r3, #5
 8005712:	d004      	beq.n	800571e <HAL_RCC_OscConfig+0x8ae>
 8005714:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8005718:	482e      	ldr	r0, [pc, #184]	; (80057d4 <HAL_RCC_OscConfig+0x964>)
 800571a:	f7fc fb52 	bl	8001dc2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800571e:	4b2c      	ldr	r3, [pc, #176]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d112      	bne.n	8005750 <HAL_RCC_OscConfig+0x8e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800572a:	4b29      	ldr	r3, [pc, #164]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	4a28      	ldr	r2, [pc, #160]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 8005730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005734:	61d3      	str	r3, [r2, #28]
 8005736:	4b26      	ldr	r3, [pc, #152]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800573e:	f107 030c 	add.w	r3, r7, #12
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f107 030c 	add.w	r3, r7, #12
 8005748:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800574a:	2301      	movs	r3, #1
 800574c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005750:	4b22      	ldr	r3, [pc, #136]	; (80057dc <HAL_RCC_OscConfig+0x96c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d11a      	bne.n	8005792 <HAL_RCC_OscConfig+0x922>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800575c:	4b1f      	ldr	r3, [pc, #124]	; (80057dc <HAL_RCC_OscConfig+0x96c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <HAL_RCC_OscConfig+0x96c>)
 8005762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005766:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005768:	f7fc feba 	bl	80024e0 <HAL_GetTick>
 800576c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005770:	e009      	b.n	8005786 <HAL_RCC_OscConfig+0x916>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005772:	f7fc feb5 	bl	80024e0 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	; 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x916>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e3df      	b.n	8005f46 <HAL_RCC_OscConfig+0x10d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005786:	4b15      	ldr	r3, [pc, #84]	; (80057dc <HAL_RCC_OscConfig+0x96c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0ef      	beq.n	8005772 <HAL_RCC_OscConfig+0x902>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d106      	bne.n	80057aa <HAL_RCC_OscConfig+0x93a>
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	4a0b      	ldr	r2, [pc, #44]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	6213      	str	r3, [r2, #32]
 80057a8:	e038      	b.n	800581c <HAL_RCC_OscConfig+0x9ac>
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d115      	bne.n	80057e0 <HAL_RCC_OscConfig+0x970>
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	4a05      	ldr	r2, [pc, #20]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	6213      	str	r3, [r2, #32]
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	4a02      	ldr	r2, [pc, #8]	; (80057d0 <HAL_RCC_OscConfig+0x960>)
 80057c6:	f023 0304 	bic.w	r3, r3, #4
 80057ca:	6213      	str	r3, [r2, #32]
 80057cc:	e026      	b.n	800581c <HAL_RCC_OscConfig+0x9ac>
 80057ce:	bf00      	nop
 80057d0:	40021000 	.word	0x40021000
 80057d4:	0800c2bc 	.word	0x0800c2bc
 80057d8:	10908120 	.word	0x10908120
 80057dc:	40007000 	.word	0x40007000
 80057e0:	1d3b      	adds	r3, r7, #4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b05      	cmp	r3, #5
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0x994>
 80057ea:	4b5e      	ldr	r3, [pc, #376]	; (8005964 <HAL_RCC_OscConfig+0xaf4>)
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	4a5d      	ldr	r2, [pc, #372]	; (8005964 <HAL_RCC_OscConfig+0xaf4>)
 80057f0:	f043 0304 	orr.w	r3, r3, #4
 80057f4:	6213      	str	r3, [r2, #32]
 80057f6:	4b5b      	ldr	r3, [pc, #364]	; (8005964 <HAL_RCC_OscConfig+0xaf4>)
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	4a5a      	ldr	r2, [pc, #360]	; (8005964 <HAL_RCC_OscConfig+0xaf4>)
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	6213      	str	r3, [r2, #32]
 8005802:	e00b      	b.n	800581c <HAL_RCC_OscConfig+0x9ac>
 8005804:	4b57      	ldr	r3, [pc, #348]	; (8005964 <HAL_RCC_OscConfig+0xaf4>)
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	4a56      	ldr	r2, [pc, #344]	; (8005964 <HAL_RCC_OscConfig+0xaf4>)
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	6213      	str	r3, [r2, #32]
 8005810:	4b54      	ldr	r3, [pc, #336]	; (8005964 <HAL_RCC_OscConfig+0xaf4>)
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	4a53      	ldr	r2, [pc, #332]	; (8005964 <HAL_RCC_OscConfig+0xaf4>)
 8005816:	f023 0304 	bic.w	r3, r3, #4
 800581a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800581c:	1d3b      	adds	r3, r7, #4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d064      	beq.n	80058f0 <HAL_RCC_OscConfig+0xa80>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005826:	f7fc fe5b 	bl	80024e0 <HAL_GetTick>
 800582a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582e:	e00b      	b.n	8005848 <HAL_RCC_OscConfig+0x9d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005830:	f7fc fe56 	bl	80024e0 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005840:	4293      	cmp	r3, r2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e37e      	b.n	8005f46 <HAL_RCC_OscConfig+0x10d6>
 8005848:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800584c:	2202      	movs	r2, #2
 800584e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005850:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	fa93 f2a3 	rbit	r2, r3
 800585a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005864:	2202      	movs	r2, #2
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	fa93 f2a3 	rbit	r2, r3
 8005872:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005876:	601a      	str	r2, [r3, #0]
  return result;
 8005878:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800587c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587e:	fab3 f383 	clz	r3, r3
 8005882:	b2db      	uxtb	r3, r3
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	b2db      	uxtb	r3, r3
 8005888:	f043 0302 	orr.w	r3, r3, #2
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d102      	bne.n	8005898 <HAL_RCC_OscConfig+0xa28>
 8005892:	4b34      	ldr	r3, [pc, #208]	; (8005964 <HAL_RCC_OscConfig+0xaf4>)
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	e00d      	b.n	80058b4 <HAL_RCC_OscConfig+0xa44>
 8005898:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800589c:	2202      	movs	r2, #2
 800589e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	fa93 f2a3 	rbit	r2, r3
 80058aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	4b2c      	ldr	r3, [pc, #176]	; (8005964 <HAL_RCC_OscConfig+0xaf4>)
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80058b8:	2102      	movs	r1, #2
 80058ba:	6011      	str	r1, [r2, #0]
 80058bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	fa92 f1a2 	rbit	r1, r2
 80058c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80058ca:	6011      	str	r1, [r2, #0]
  return result;
 80058cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	fab2 f282 	clz	r2, r2
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	f002 021f 	and.w	r2, r2, #31
 80058e2:	2101      	movs	r1, #1
 80058e4:	fa01 f202 	lsl.w	r2, r1, r2
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0a0      	beq.n	8005830 <HAL_RCC_OscConfig+0x9c0>
 80058ee:	e066      	b.n	80059be <HAL_RCC_OscConfig+0xb4e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f0:	f7fc fdf6 	bl	80024e0 <HAL_GetTick>
 80058f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f8:	e00b      	b.n	8005912 <HAL_RCC_OscConfig+0xaa2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fc fdf1 	bl	80024e0 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	; 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0xaa2>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e319      	b.n	8005f46 <HAL_RCC_OscConfig+0x10d6>
 8005912:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005916:	2202      	movs	r2, #2
 8005918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	fa93 f2a3 	rbit	r2, r3
 8005924:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800592e:	2202      	movs	r2, #2
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	fa93 f2a3 	rbit	r2, r3
 800593c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005940:	601a      	str	r2, [r3, #0]
  return result;
 8005942:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005946:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005948:	fab3 f383 	clz	r3, r3
 800594c:	b2db      	uxtb	r3, r3
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f043 0302 	orr.w	r3, r3, #2
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d105      	bne.n	8005968 <HAL_RCC_OscConfig+0xaf8>
 800595c:	4b01      	ldr	r3, [pc, #4]	; (8005964 <HAL_RCC_OscConfig+0xaf4>)
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	e010      	b.n	8005984 <HAL_RCC_OscConfig+0xb14>
 8005962:	bf00      	nop
 8005964:	40021000 	.word	0x40021000
 8005968:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800596c:	2202      	movs	r2, #2
 800596e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005970:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	fa93 f2a3 	rbit	r2, r3
 800597a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	4bad      	ldr	r3, [pc, #692]	; (8005c38 <HAL_RCC_OscConfig+0xdc8>)
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005988:	2102      	movs	r1, #2
 800598a:	6011      	str	r1, [r2, #0]
 800598c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	fa92 f1a2 	rbit	r1, r2
 8005996:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800599a:	6011      	str	r1, [r2, #0]
  return result;
 800599c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	fab2 f282 	clz	r2, r2
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	f002 021f 	and.w	r2, r2, #31
 80059b2:	2101      	movs	r1, #1
 80059b4:	fa01 f202 	lsl.w	r2, r1, r2
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d19d      	bne.n	80058fa <HAL_RCC_OscConfig+0xa8a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059be:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d105      	bne.n	80059d2 <HAL_RCC_OscConfig+0xb62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059c6:	4b9c      	ldr	r3, [pc, #624]	; (8005c38 <HAL_RCC_OscConfig+0xdc8>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	4a9b      	ldr	r2, [pc, #620]	; (8005c38 <HAL_RCC_OscConfig+0xdc8>)
 80059cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80059d2:	1d3b      	adds	r3, r7, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00e      	beq.n	80059fa <HAL_RCC_OscConfig+0xb8a>
 80059dc:	1d3b      	adds	r3, r7, #4
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d009      	beq.n	80059fa <HAL_RCC_OscConfig+0xb8a>
 80059e6:	1d3b      	adds	r3, r7, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d004      	beq.n	80059fa <HAL_RCC_OscConfig+0xb8a>
 80059f0:	f240 213a 	movw	r1, #570	; 0x23a
 80059f4:	4891      	ldr	r0, [pc, #580]	; (8005c3c <HAL_RCC_OscConfig+0xdcc>)
 80059f6:	f7fc f9e4 	bl	8001dc2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 829f 	beq.w	8005f44 <HAL_RCC_OscConfig+0x10d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a06:	4b8c      	ldr	r3, [pc, #560]	; (8005c38 <HAL_RCC_OscConfig+0xdc8>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f003 030c 	and.w	r3, r3, #12
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	f000 826c 	beq.w	8005eec <HAL_RCC_OscConfig+0x107c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a14:	1d3b      	adds	r3, r7, #4
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	f040 81e4 	bne.w	8005de8 <HAL_RCC_OscConfig+0xf78>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCC_OscConfig+0xbd2>
 8005a2c:	1d3b      	adds	r3, r7, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a36:	d004      	beq.n	8005a42 <HAL_RCC_OscConfig+0xbd2>
 8005a38:	f240 2143 	movw	r1, #579	; 0x243
 8005a3c:	487f      	ldr	r0, [pc, #508]	; (8005c3c <HAL_RCC_OscConfig+0xdcc>)
 8005a3e:	f7fc f9c0 	bl	8001dc2 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005a42:	1d3b      	adds	r3, r7, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d058      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a56:	d052      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005a58:	1d3b      	adds	r3, r7, #4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a62:	d04c      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a6e:	d046      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005a70:	1d3b      	adds	r3, r7, #4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7a:	d040      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005a7c:	1d3b      	adds	r3, r7, #4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005a86:	d03a      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005a88:	1d3b      	adds	r3, r7, #4
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005a92:	d034      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005a94:	1d3b      	adds	r3, r7, #4
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005a9e:	d02e      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005aa0:	1d3b      	adds	r3, r7, #4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aaa:	d028      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005aac:	1d3b      	adds	r3, r7, #4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005ab6:	d022      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005ab8:	1d3b      	adds	r3, r7, #4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005ac2:	d01c      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005ac4:	1d3b      	adds	r3, r7, #4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005ace:	d016      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005ad0:	1d3b      	adds	r3, r7, #4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ada:	d010      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005ae8:	1d3b      	adds	r3, r7, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005af2:	d004      	beq.n	8005afe <HAL_RCC_OscConfig+0xc8e>
 8005af4:	f44f 7111 	mov.w	r1, #580	; 0x244
 8005af8:	4850      	ldr	r0, [pc, #320]	; (8005c3c <HAL_RCC_OscConfig+0xdcc>)
 8005afa:	f7fc f962 	bl	8001dc2 <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8005afe:	1d3b      	adds	r3, r7, #4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d04f      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b08:	1d3b      	adds	r3, r7, #4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d04a      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b12:	1d3b      	adds	r3, r7, #4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d045      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b1c:	1d3b      	adds	r3, r7, #4
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d040      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d03b      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b30:	1d3b      	adds	r3, r7, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d036      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b3a:	1d3b      	adds	r3, r7, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	2b06      	cmp	r3, #6
 8005b42:	d031      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b44:	1d3b      	adds	r3, r7, #4
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b07      	cmp	r3, #7
 8005b4c:	d02c      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d027      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b58:	1d3b      	adds	r3, r7, #4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b09      	cmp	r3, #9
 8005b60:	d022      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b62:	1d3b      	adds	r3, r7, #4
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	2b0a      	cmp	r3, #10
 8005b6a:	d01d      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b6c:	1d3b      	adds	r3, r7, #4
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b0b      	cmp	r3, #11
 8005b74:	d018      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b76:	1d3b      	adds	r3, r7, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b0c      	cmp	r3, #12
 8005b7e:	d013      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b80:	1d3b      	adds	r3, r7, #4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2b0d      	cmp	r3, #13
 8005b88:	d00e      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b8a:	1d3b      	adds	r3, r7, #4
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	2b0e      	cmp	r3, #14
 8005b92:	d009      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b94:	1d3b      	adds	r3, r7, #4
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b0f      	cmp	r3, #15
 8005b9c:	d004      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xd38>
 8005b9e:	f240 2146 	movw	r1, #582	; 0x246
 8005ba2:	4826      	ldr	r0, [pc, #152]	; (8005c3c <HAL_RCC_OscConfig+0xdcc>)
 8005ba4:	f7fc f90d 	bl	8001dc2 <assert_failed>
 8005ba8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005bac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	fa93 f2a3 	rbit	r2, r3
 8005bbc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005bc0:	601a      	str	r2, [r3, #0]
  return result;
 8005bc2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005bc6:	681b      	ldr	r3, [r3, #0]
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc8:	fab3 f383 	clz	r3, r3
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bde:	f7fc fc7f 	bl	80024e0 <HAL_GetTick>
 8005be2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005be6:	e009      	b.n	8005bfc <HAL_RCC_OscConfig+0xd8c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be8:	f7fc fc7a 	bl	80024e0 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0xd8c>
          {
            return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e1a4      	b.n	8005f46 <HAL_RCC_OscConfig+0x10d6>
 8005bfc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	fa93 f2a3 	rbit	r2, r3
 8005c10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005c14:	601a      	str	r2, [r3, #0]
  return result;
 8005c16:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005c1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c1c:	fab3 f383 	clz	r3, r3
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d107      	bne.n	8005c40 <HAL_RCC_OscConfig+0xdd0>
 8005c30:	4b01      	ldr	r3, [pc, #4]	; (8005c38 <HAL_RCC_OscConfig+0xdc8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	e020      	b.n	8005c78 <HAL_RCC_OscConfig+0xe08>
 8005c36:	bf00      	nop
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	0800c2bc 	.word	0x0800c2bc
 8005c40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005c44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	fa93 f2a3 	rbit	r2, r3
 8005c54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005c5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	fa93 f2a3 	rbit	r2, r3
 8005c6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	4bb6      	ldr	r3, [pc, #728]	; (8005f50 <HAL_RCC_OscConfig+0x10e0>)
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005c7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c80:	6011      	str	r1, [r2, #0]
 8005c82:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	fa92 f1a2 	rbit	r1, r2
 8005c8c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005c90:	6011      	str	r1, [r2, #0]
  return result;
 8005c92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	fab2 f282 	clz	r2, r2
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	f042 0220 	orr.w	r2, r2, #32
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	f002 021f 	and.w	r2, r2, #31
 8005ca8:	2101      	movs	r1, #1
 8005caa:	fa01 f202 	lsl.w	r2, r1, r2
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d199      	bne.n	8005be8 <HAL_RCC_OscConfig+0xd78>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cb4:	4ba6      	ldr	r3, [pc, #664]	; (8005f50 <HAL_RCC_OscConfig+0x10e0>)
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	f023 020f 	bic.w	r2, r3, #15
 8005cbc:	1d3b      	adds	r3, r7, #4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	49a3      	ldr	r1, [pc, #652]	; (8005f50 <HAL_RCC_OscConfig+0x10e0>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005cc8:	4ba1      	ldr	r3, [pc, #644]	; (8005f50 <HAL_RCC_OscConfig+0x10e0>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005cd0:	1d3b      	adds	r3, r7, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a19      	ldr	r1, [r3, #32]
 8005cd6:	1d3b      	adds	r3, r7, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	499c      	ldr	r1, [pc, #624]	; (8005f50 <HAL_RCC_OscConfig+0x10e0>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	604b      	str	r3, [r1, #4]
 8005ce4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	fa93 f2a3 	rbit	r2, r3
 8005cf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cfc:	601a      	str	r2, [r3, #0]
  return result;
 8005cfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d02:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d04:	fab3 f383 	clz	r3, r3
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	461a      	mov	r2, r3
 8005d16:	2301      	movs	r3, #1
 8005d18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1a:	f7fc fbe1 	bl	80024e0 <HAL_GetTick>
 8005d1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d22:	e009      	b.n	8005d38 <HAL_RCC_OscConfig+0xec8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d24:	f7fc fbdc 	bl	80024e0 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0xec8>
          {
            return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e106      	b.n	8005f46 <HAL_RCC_OscConfig+0x10d6>
 8005d38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	fa93 f2a3 	rbit	r2, r3
 8005d4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005d50:	601a      	str	r2, [r3, #0]
  return result;
 8005d52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005d56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d58:	fab3 f383 	clz	r3, r3
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f043 0301 	orr.w	r3, r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d102      	bne.n	8005d72 <HAL_RCC_OscConfig+0xf02>
 8005d6c:	4b78      	ldr	r3, [pc, #480]	; (8005f50 <HAL_RCC_OscConfig+0x10e0>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	e01b      	b.n	8005daa <HAL_RCC_OscConfig+0xf3a>
 8005d72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	fa93 f2a3 	rbit	r2, r3
 8005d86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	fa93 f2a3 	rbit	r2, r3
 8005da0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	4b6a      	ldr	r3, [pc, #424]	; (8005f50 <HAL_RCC_OscConfig+0x10e0>)
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005dae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005db2:	6011      	str	r1, [r2, #0]
 8005db4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	fa92 f1a2 	rbit	r1, r2
 8005dbe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005dc2:	6011      	str	r1, [r2, #0]
  return result;
 8005dc4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	fab2 f282 	clz	r2, r2
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	f042 0220 	orr.w	r2, r2, #32
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	f002 021f 	and.w	r2, r2, #31
 8005dda:	2101      	movs	r1, #1
 8005ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d09e      	beq.n	8005d24 <HAL_RCC_OscConfig+0xeb4>
 8005de6:	e0ad      	b.n	8005f44 <HAL_RCC_OscConfig+0x10d4>
 8005de8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005dec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	fa93 f2a3 	rbit	r2, r3
 8005dfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e00:	601a      	str	r2, [r3, #0]
  return result;
 8005e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e06:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e08:	fab3 f383 	clz	r3, r3
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	461a      	mov	r2, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1e:	f7fc fb5f 	bl	80024e0 <HAL_GetTick>
 8005e22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e26:	e009      	b.n	8005e3c <HAL_RCC_OscConfig+0xfcc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e28:	f7fc fb5a 	bl	80024e0 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0xfcc>
          {
            return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e084      	b.n	8005f46 <HAL_RCC_OscConfig+0x10d6>
 8005e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	fa93 f2a3 	rbit	r2, r3
 8005e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e54:	601a      	str	r2, [r3, #0]
  return result;
 8005e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e5c:	fab3 f383 	clz	r3, r3
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	f043 0301 	orr.w	r3, r3, #1
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d102      	bne.n	8005e76 <HAL_RCC_OscConfig+0x1006>
 8005e70:	4b37      	ldr	r3, [pc, #220]	; (8005f50 <HAL_RCC_OscConfig+0x10e0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	e01b      	b.n	8005eae <HAL_RCC_OscConfig+0x103e>
 8005e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	fa93 f2a3 	rbit	r2, r3
 8005e8a:	f107 0320 	add.w	r3, r7, #32
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f107 031c 	add.w	r3, r7, #28
 8005e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	f107 031c 	add.w	r3, r7, #28
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	fa93 f2a3 	rbit	r2, r3
 8005ea4:	f107 0318 	add.w	r3, r7, #24
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <HAL_RCC_OscConfig+0x10e0>)
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	f107 0214 	add.w	r2, r7, #20
 8005eb2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005eb6:	6011      	str	r1, [r2, #0]
 8005eb8:	f107 0214 	add.w	r2, r7, #20
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	fa92 f1a2 	rbit	r1, r2
 8005ec2:	f107 0210 	add.w	r2, r7, #16
 8005ec6:	6011      	str	r1, [r2, #0]
  return result;
 8005ec8:	f107 0210 	add.w	r2, r7, #16
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	fab2 f282 	clz	r2, r2
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	f042 0220 	orr.w	r2, r2, #32
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	f002 021f 	and.w	r2, r2, #31
 8005ede:	2101      	movs	r1, #1
 8005ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d19e      	bne.n	8005e28 <HAL_RCC_OscConfig+0xfb8>
 8005eea:	e02b      	b.n	8005f44 <HAL_RCC_OscConfig+0x10d4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eec:	1d3b      	adds	r3, r7, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_RCC_OscConfig+0x108a>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e025      	b.n	8005f46 <HAL_RCC_OscConfig+0x10d6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005efa:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <HAL_RCC_OscConfig+0x10e0>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005f02:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <HAL_RCC_OscConfig+0x10e0>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005f0e:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d111      	bne.n	8005f40 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005f1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005f20:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f24:	1d3b      	adds	r3, r7, #4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d108      	bne.n	8005f40 <HAL_RCC_OscConfig+0x10d0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005f2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f32:	f003 020f 	and.w	r2, r3, #15
 8005f36:	1d3b      	adds	r3, r7, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d001      	beq.n	8005f44 <HAL_RCC_OscConfig+0x10d4>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <HAL_RCC_OscConfig+0x10d6>
        }
      }
    }
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40021000 	.word	0x40021000

08005f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b09e      	sub	sp, #120	; 0x78
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e203      	b.n	8006374 <HAL_RCC_ClockConfig+0x420>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d116      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0x52>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d110      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0x52>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0x52>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d104      	bne.n	8005fa6 <HAL_RCC_ClockConfig+0x52>
 8005f9c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8005fa0:	48a5      	ldr	r0, [pc, #660]	; (8006238 <HAL_RCC_ClockConfig+0x2e4>)
 8005fa2:	f7fb ff0e 	bl	8001dc2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x6e>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d007      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x6e>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d004      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x6e>
 8005fb8:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8005fbc:	489e      	ldr	r0, [pc, #632]	; (8006238 <HAL_RCC_ClockConfig+0x2e4>)
 8005fbe:	f7fb ff00 	bl	8001dc2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc2:	4b9e      	ldr	r3, [pc, #632]	; (800623c <HAL_RCC_ClockConfig+0x2e8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d910      	bls.n	8005ff2 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd0:	4b9a      	ldr	r3, [pc, #616]	; (800623c <HAL_RCC_ClockConfig+0x2e8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f023 0207 	bic.w	r2, r3, #7
 8005fd8:	4998      	ldr	r1, [pc, #608]	; (800623c <HAL_RCC_ClockConfig+0x2e8>)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe0:	4b96      	ldr	r3, [pc, #600]	; (800623c <HAL_RCC_ClockConfig+0x2e8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d001      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e1c0      	b.n	8006374 <HAL_RCC_ClockConfig+0x420>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d031      	beq.n	8006062 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d024      	beq.n	8006050 <HAL_RCC_ClockConfig+0xfc>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d020      	beq.n	8006050 <HAL_RCC_ClockConfig+0xfc>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b90      	cmp	r3, #144	; 0x90
 8006014:	d01c      	beq.n	8006050 <HAL_RCC_ClockConfig+0xfc>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2ba0      	cmp	r3, #160	; 0xa0
 800601c:	d018      	beq.n	8006050 <HAL_RCC_ClockConfig+0xfc>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2bb0      	cmp	r3, #176	; 0xb0
 8006024:	d014      	beq.n	8006050 <HAL_RCC_ClockConfig+0xfc>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2bc0      	cmp	r3, #192	; 0xc0
 800602c:	d010      	beq.n	8006050 <HAL_RCC_ClockConfig+0xfc>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2bd0      	cmp	r3, #208	; 0xd0
 8006034:	d00c      	beq.n	8006050 <HAL_RCC_ClockConfig+0xfc>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2be0      	cmp	r3, #224	; 0xe0
 800603c:	d008      	beq.n	8006050 <HAL_RCC_ClockConfig+0xfc>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2bf0      	cmp	r3, #240	; 0xf0
 8006044:	d004      	beq.n	8006050 <HAL_RCC_ClockConfig+0xfc>
 8006046:	f240 21db 	movw	r1, #731	; 0x2db
 800604a:	487b      	ldr	r0, [pc, #492]	; (8006238 <HAL_RCC_ClockConfig+0x2e4>)
 800604c:	f7fb feb9 	bl	8001dc2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006050:	4b7b      	ldr	r3, [pc, #492]	; (8006240 <HAL_RCC_ClockConfig+0x2ec>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	4978      	ldr	r1, [pc, #480]	; (8006240 <HAL_RCC_ClockConfig+0x2ec>)
 800605e:	4313      	orrs	r3, r2
 8006060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 80f3 	beq.w	8006256 <HAL_RCC_ClockConfig+0x302>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00c      	beq.n	8006092 <HAL_RCC_ClockConfig+0x13e>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d008      	beq.n	8006092 <HAL_RCC_ClockConfig+0x13e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d004      	beq.n	8006092 <HAL_RCC_ClockConfig+0x13e>
 8006088:	f240 21e2 	movw	r1, #738	; 0x2e2
 800608c:	486a      	ldr	r0, [pc, #424]	; (8006238 <HAL_RCC_ClockConfig+0x2e4>)
 800608e:	f7fb fe98 	bl	8001dc2 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d13c      	bne.n	8006114 <HAL_RCC_ClockConfig+0x1c0>
 800609a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800609e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060a2:	fa93 f3a3 	rbit	r3, r3
 80060a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80060a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060aa:	fab3 f383 	clz	r3, r3
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d102      	bne.n	80060c4 <HAL_RCC_ClockConfig+0x170>
 80060be:	4b60      	ldr	r3, [pc, #384]	; (8006240 <HAL_RCC_ClockConfig+0x2ec>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	e00f      	b.n	80060e4 <HAL_RCC_ClockConfig+0x190>
 80060c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060cc:	fa93 f3a3 	rbit	r3, r3
 80060d0:	667b      	str	r3, [r7, #100]	; 0x64
 80060d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060d6:	663b      	str	r3, [r7, #96]	; 0x60
 80060d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060da:	fa93 f3a3 	rbit	r3, r3
 80060de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060e0:	4b57      	ldr	r3, [pc, #348]	; (8006240 <HAL_RCC_ClockConfig+0x2ec>)
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060ec:	fa92 f2a2 	rbit	r2, r2
 80060f0:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80060f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060f4:	fab2 f282 	clz	r2, r2
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	f042 0220 	orr.w	r2, r2, #32
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	f002 021f 	and.w	r2, r2, #31
 8006104:	2101      	movs	r1, #1
 8006106:	fa01 f202 	lsl.w	r2, r1, r2
 800610a:	4013      	ands	r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d17b      	bne.n	8006208 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e12f      	b.n	8006374 <HAL_RCC_ClockConfig+0x420>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d13c      	bne.n	8006196 <HAL_RCC_ClockConfig+0x242>
 800611c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006120:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006124:	fa93 f3a3 	rbit	r3, r3
 8006128:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800612a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800612c:	fab3 f383 	clz	r3, r3
 8006130:	b2db      	uxtb	r3, r3
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	b2db      	uxtb	r3, r3
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d102      	bne.n	8006146 <HAL_RCC_ClockConfig+0x1f2>
 8006140:	4b3f      	ldr	r3, [pc, #252]	; (8006240 <HAL_RCC_ClockConfig+0x2ec>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	e00f      	b.n	8006166 <HAL_RCC_ClockConfig+0x212>
 8006146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800614a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	647b      	str	r3, [r7, #68]	; 0x44
 8006154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006158:	643b      	str	r3, [r7, #64]	; 0x40
 800615a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800615c:	fa93 f3a3 	rbit	r3, r3
 8006160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006162:	4b37      	ldr	r3, [pc, #220]	; (8006240 <HAL_RCC_ClockConfig+0x2ec>)
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800616a:	63ba      	str	r2, [r7, #56]	; 0x38
 800616c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800616e:	fa92 f2a2 	rbit	r2, r2
 8006172:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006176:	fab2 f282 	clz	r2, r2
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	f042 0220 	orr.w	r2, r2, #32
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	f002 021f 	and.w	r2, r2, #31
 8006186:	2101      	movs	r1, #1
 8006188:	fa01 f202 	lsl.w	r2, r1, r2
 800618c:	4013      	ands	r3, r2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d13a      	bne.n	8006208 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e0ee      	b.n	8006374 <HAL_RCC_ClockConfig+0x420>
 8006196:	2302      	movs	r3, #2
 8006198:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	fa93 f3a3 	rbit	r3, r3
 80061a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80061a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061a4:	fab3 f383 	clz	r3, r3
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	f043 0301 	orr.w	r3, r3, #1
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d102      	bne.n	80061be <HAL_RCC_ClockConfig+0x26a>
 80061b8:	4b21      	ldr	r3, [pc, #132]	; (8006240 <HAL_RCC_ClockConfig+0x2ec>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	e00d      	b.n	80061da <HAL_RCC_ClockConfig+0x286>
 80061be:	2302      	movs	r3, #2
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	fa93 f3a3 	rbit	r3, r3
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ca:	2302      	movs	r3, #2
 80061cc:	623b      	str	r3, [r7, #32]
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	fa93 f3a3 	rbit	r3, r3
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <HAL_RCC_ClockConfig+0x2ec>)
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	2202      	movs	r2, #2
 80061dc:	61ba      	str	r2, [r7, #24]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	fa92 f2a2 	rbit	r2, r2
 80061e4:	617a      	str	r2, [r7, #20]
  return result;
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	fab2 f282 	clz	r2, r2
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	f042 0220 	orr.w	r2, r2, #32
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	f002 021f 	and.w	r2, r2, #31
 80061f8:	2101      	movs	r1, #1
 80061fa:	fa01 f202 	lsl.w	r2, r1, r2
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_RCC_ClockConfig+0x2b4>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0b5      	b.n	8006374 <HAL_RCC_ClockConfig+0x420>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006208:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <HAL_RCC_ClockConfig+0x2ec>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f023 0203 	bic.w	r2, r3, #3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	490a      	ldr	r1, [pc, #40]	; (8006240 <HAL_RCC_ClockConfig+0x2ec>)
 8006216:	4313      	orrs	r3, r2
 8006218:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800621a:	f7fc f961 	bl	80024e0 <HAL_GetTick>
 800621e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006220:	e010      	b.n	8006244 <HAL_RCC_ClockConfig+0x2f0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006222:	f7fc f95d 	bl	80024e0 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006230:	4293      	cmp	r3, r2
 8006232:	d907      	bls.n	8006244 <HAL_RCC_ClockConfig+0x2f0>
      {
        return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e09d      	b.n	8006374 <HAL_RCC_ClockConfig+0x420>
 8006238:	0800c2bc 	.word	0x0800c2bc
 800623c:	40022000 	.word	0x40022000
 8006240:	40021000 	.word	0x40021000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006244:	4b4d      	ldr	r3, [pc, #308]	; (800637c <HAL_RCC_ClockConfig+0x428>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f003 020c 	and.w	r2, r3, #12
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	429a      	cmp	r2, r3
 8006254:	d1e5      	bne.n	8006222 <HAL_RCC_ClockConfig+0x2ce>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006256:	4b4a      	ldr	r3, [pc, #296]	; (8006380 <HAL_RCC_ClockConfig+0x42c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d210      	bcs.n	8006286 <HAL_RCC_ClockConfig+0x332>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006264:	4b46      	ldr	r3, [pc, #280]	; (8006380 <HAL_RCC_ClockConfig+0x42c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f023 0207 	bic.w	r2, r3, #7
 800626c:	4944      	ldr	r1, [pc, #272]	; (8006380 <HAL_RCC_ClockConfig+0x42c>)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	4313      	orrs	r3, r2
 8006272:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006274:	4b42      	ldr	r3, [pc, #264]	; (8006380 <HAL_RCC_ClockConfig+0x42c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d001      	beq.n	8006286 <HAL_RCC_ClockConfig+0x332>
    {
      return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e076      	b.n	8006374 <HAL_RCC_ClockConfig+0x420>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d025      	beq.n	80062de <HAL_RCC_ClockConfig+0x38a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d018      	beq.n	80062cc <HAL_RCC_ClockConfig+0x378>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a2:	d013      	beq.n	80062cc <HAL_RCC_ClockConfig+0x378>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80062ac:	d00e      	beq.n	80062cc <HAL_RCC_ClockConfig+0x378>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062b6:	d009      	beq.n	80062cc <HAL_RCC_ClockConfig+0x378>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062c0:	d004      	beq.n	80062cc <HAL_RCC_ClockConfig+0x378>
 80062c2:	f240 311e 	movw	r1, #798	; 0x31e
 80062c6:	482f      	ldr	r0, [pc, #188]	; (8006384 <HAL_RCC_ClockConfig+0x430>)
 80062c8:	f7fb fd7b 	bl	8001dc2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062cc:	4b2b      	ldr	r3, [pc, #172]	; (800637c <HAL_RCC_ClockConfig+0x428>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4928      	ldr	r1, [pc, #160]	; (800637c <HAL_RCC_ClockConfig+0x428>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d026      	beq.n	8006338 <HAL_RCC_ClockConfig+0x3e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d018      	beq.n	8006324 <HAL_RCC_ClockConfig+0x3d0>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fa:	d013      	beq.n	8006324 <HAL_RCC_ClockConfig+0x3d0>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006304:	d00e      	beq.n	8006324 <HAL_RCC_ClockConfig+0x3d0>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800630e:	d009      	beq.n	8006324 <HAL_RCC_ClockConfig+0x3d0>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006318:	d004      	beq.n	8006324 <HAL_RCC_ClockConfig+0x3d0>
 800631a:	f240 3125 	movw	r1, #805	; 0x325
 800631e:	4819      	ldr	r0, [pc, #100]	; (8006384 <HAL_RCC_ClockConfig+0x430>)
 8006320:	f7fb fd4f 	bl	8001dc2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006324:	4b15      	ldr	r3, [pc, #84]	; (800637c <HAL_RCC_ClockConfig+0x428>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	4912      	ldr	r1, [pc, #72]	; (800637c <HAL_RCC_ClockConfig+0x428>)
 8006334:	4313      	orrs	r3, r2
 8006336:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006338:	f000 f82c 	bl	8006394 <HAL_RCC_GetSysClockFreq>
 800633c:	4601      	mov	r1, r0
 800633e:	4b0f      	ldr	r3, [pc, #60]	; (800637c <HAL_RCC_ClockConfig+0x428>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006346:	22f0      	movs	r2, #240	; 0xf0
 8006348:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	fa92 f2a2 	rbit	r2, r2
 8006350:	60fa      	str	r2, [r7, #12]
  return result;
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	fab2 f282 	clz	r2, r2
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	40d3      	lsrs	r3, r2
 800635c:	4a0a      	ldr	r2, [pc, #40]	; (8006388 <HAL_RCC_ClockConfig+0x434>)
 800635e:	5cd3      	ldrb	r3, [r2, r3]
 8006360:	fa21 f303 	lsr.w	r3, r1, r3
 8006364:	4a09      	ldr	r2, [pc, #36]	; (800638c <HAL_RCC_ClockConfig+0x438>)
 8006366:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006368:	4b09      	ldr	r3, [pc, #36]	; (8006390 <HAL_RCC_ClockConfig+0x43c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4618      	mov	r0, r3
 800636e:	f7fc f873 	bl	8002458 <HAL_InitTick>
  
  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3778      	adds	r7, #120	; 0x78
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	40021000 	.word	0x40021000
 8006380:	40022000 	.word	0x40022000
 8006384:	0800c2bc 	.word	0x0800c2bc
 8006388:	0800c480 	.word	0x0800c480
 800638c:	2000007c 	.word	0x2000007c
 8006390:	20000080 	.word	0x20000080

08006394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006394:	b480      	push	{r7}
 8006396:	b08b      	sub	sp, #44	; 0x2c
 8006398:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	2300      	movs	r3, #0
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	2300      	movs	r3, #0
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80063ae:	4b2a      	ldr	r3, [pc, #168]	; (8006458 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f003 030c 	and.w	r3, r3, #12
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d002      	beq.n	80063c4 <HAL_RCC_GetSysClockFreq+0x30>
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d003      	beq.n	80063ca <HAL_RCC_GetSysClockFreq+0x36>
 80063c2:	e03f      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063c4:	4b25      	ldr	r3, [pc, #148]	; (800645c <HAL_RCC_GetSysClockFreq+0xc8>)
 80063c6:	623b      	str	r3, [r7, #32]
      break;
 80063c8:	e03f      	b.n	800644a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80063d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80063d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	fa92 f2a2 	rbit	r2, r2
 80063dc:	607a      	str	r2, [r7, #4]
  return result;
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	fab2 f282 	clz	r2, r2
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	40d3      	lsrs	r3, r2
 80063e8:	4a1d      	ldr	r2, [pc, #116]	; (8006460 <HAL_RCC_GetSysClockFreq+0xcc>)
 80063ea:	5cd3      	ldrb	r3, [r2, r3]
 80063ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80063ee:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	220f      	movs	r2, #15
 80063f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	fa92 f2a2 	rbit	r2, r2
 8006400:	60fa      	str	r2, [r7, #12]
  return result;
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	fab2 f282 	clz	r2, r2
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	40d3      	lsrs	r3, r2
 800640c:	4a15      	ldr	r2, [pc, #84]	; (8006464 <HAL_RCC_GetSysClockFreq+0xd0>)
 800640e:	5cd3      	ldrb	r3, [r2, r3]
 8006410:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800641c:	4a0f      	ldr	r2, [pc, #60]	; (800645c <HAL_RCC_GetSysClockFreq+0xc8>)
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	fbb2 f2f3 	udiv	r2, r2, r3
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	fb02 f303 	mul.w	r3, r2, r3
 800642a:	627b      	str	r3, [r7, #36]	; 0x24
 800642c:	e007      	b.n	800643e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800642e:	4a0b      	ldr	r2, [pc, #44]	; (800645c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	fbb2 f2f3 	udiv	r2, r2, r3
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	fb02 f303 	mul.w	r3, r2, r3
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	623b      	str	r3, [r7, #32]
      break;
 8006442:	e002      	b.n	800644a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006446:	623b      	str	r3, [r7, #32]
      break;
 8006448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800644a:	6a3b      	ldr	r3, [r7, #32]
}
 800644c:	4618      	mov	r0, r3
 800644e:	372c      	adds	r7, #44	; 0x2c
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	40021000 	.word	0x40021000
 800645c:	007a1200 	.word	0x007a1200
 8006460:	0800c498 	.word	0x0800c498
 8006464:	0800c4a8 	.word	0x0800c4a8

08006468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <HAL_RCC_GetHCLKFreq+0x14>)
 800646e:	681b      	ldr	r3, [r3, #0]
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	2000007c 	.word	0x2000007c

08006480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006486:	f7ff ffef 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 800648a:	4601      	mov	r1, r0
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006494:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006498:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	fa92 f2a2 	rbit	r2, r2
 80064a0:	603a      	str	r2, [r7, #0]
  return result;
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	fab2 f282 	clz	r2, r2
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	40d3      	lsrs	r3, r2
 80064ac:	4a04      	ldr	r2, [pc, #16]	; (80064c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80064ae:	5cd3      	ldrb	r3, [r2, r3]
 80064b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40021000 	.word	0x40021000
 80064c0:	0800c490 	.word	0x0800c490

080064c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80064ca:	f7ff ffcd 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80064ce:	4601      	mov	r1, r0
 80064d0:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80064d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80064dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	fa92 f2a2 	rbit	r2, r2
 80064e4:	603a      	str	r2, [r7, #0]
  return result;
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	fab2 f282 	clz	r2, r2
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	40d3      	lsrs	r3, r2
 80064f0:	4a04      	ldr	r2, [pc, #16]	; (8006504 <HAL_RCC_GetPCLK2Freq+0x40>)
 80064f2:	5cd3      	ldrb	r3, [r2, r3]
 80064f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40021000 	.word	0x40021000
 8006504:	0800c490 	.word	0x0800c490

08006508 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b092      	sub	sp, #72	; 0x48
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006518:	2300      	movs	r3, #0
 800651a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a62      	ldr	r2, [pc, #392]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d303      	bcc.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006528:	2172      	movs	r1, #114	; 0x72
 800652a:	4861      	ldr	r0, [pc, #388]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800652c:	f7fb fc49 	bl	8001dc2 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80f1 	beq.w	8006720 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d012      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654e:	d00d      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006558:	d008      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006562:	d003      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006564:	2178      	movs	r1, #120	; 0x78
 8006566:	4852      	ldr	r0, [pc, #328]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006568:	f7fb fc2b 	bl	8001dc2 <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800656c:	4b51      	ldr	r3, [pc, #324]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10e      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006578:	4b4e      	ldr	r3, [pc, #312]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	4a4d      	ldr	r2, [pc, #308]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800657e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006582:	61d3      	str	r3, [r2, #28]
 8006584:	4b4b      	ldr	r3, [pc, #300]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658c:	60bb      	str	r3, [r7, #8]
 800658e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006596:	4b48      	ldr	r3, [pc, #288]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d118      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065a2:	4b45      	ldr	r3, [pc, #276]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a44      	ldr	r2, [pc, #272]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ae:	f7fb ff97 	bl	80024e0 <HAL_GetTick>
 80065b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b4:	e008      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b6:	f7fb ff93 	bl	80024e0 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b64      	cmp	r3, #100	; 0x64
 80065c2:	d901      	bls.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e38f      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c8:	4b3b      	ldr	r3, [pc, #236]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0f0      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065d4:	4b37      	ldr	r3, [pc, #220]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 808a 	beq.w	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065f0:	429a      	cmp	r2, r3
 80065f2:	f000 8082 	beq.w	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065f6:	4b2f      	ldr	r3, [pc, #188]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006604:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	fa93 f3a3 	rbit	r3, r3
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006610:	fab3 f383 	clz	r3, r3
 8006614:	b2db      	uxtb	r3, r3
 8006616:	461a      	mov	r2, r3
 8006618:	4b28      	ldr	r3, [pc, #160]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	461a      	mov	r2, r3
 8006620:	2301      	movs	r3, #1
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	fa93 f3a3 	rbit	r3, r3
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006634:	fab3 f383 	clz	r3, r3
 8006638:	b2db      	uxtb	r3, r3
 800663a:	461a      	mov	r2, r3
 800663c:	4b1f      	ldr	r3, [pc, #124]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	461a      	mov	r2, r3
 8006644:	2300      	movs	r3, #0
 8006646:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006648:	4a1a      	ldr	r2, [pc, #104]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800664a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800664c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800664e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d050      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006658:	f7fb ff42 	bl	80024e0 <HAL_GetTick>
 800665c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800665e:	e00a      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006660:	f7fb ff3e 	bl	80024e0 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f241 3288 	movw	r2, #5000	; 0x1388
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x16e>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e338      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 8006676:	2302      	movs	r3, #2
 8006678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	fa93 f3a3 	rbit	r3, r3
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
 8006682:	2302      	movs	r3, #2
 8006684:	623b      	str	r3, [r7, #32]
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	fa93 f3a3 	rbit	r3, r3
 800668c:	61fb      	str	r3, [r7, #28]
  return result;
 800668e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006690:	fab3 f383 	clz	r3, r3
 8006694:	b2db      	uxtb	r3, r3
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	b2db      	uxtb	r3, r3
 800669a:	f043 0302 	orr.w	r3, r3, #2
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d10d      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80066a4:	4b03      	ldr	r3, [pc, #12]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	e012      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80066aa:	bf00      	nop
 80066ac:	03f73400 	.word	0x03f73400
 80066b0:	0800c2f4 	.word	0x0800c2f4
 80066b4:	40021000 	.word	0x40021000
 80066b8:	40007000 	.word	0x40007000
 80066bc:	10908100 	.word	0x10908100
 80066c0:	2302      	movs	r3, #2
 80066c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	fa93 f3a3 	rbit	r3, r3
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	4b97      	ldr	r3, [pc, #604]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	2202      	movs	r2, #2
 80066d2:	613a      	str	r2, [r7, #16]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	fa92 f2a2 	rbit	r2, r2
 80066da:	60fa      	str	r2, [r7, #12]
  return result;
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	fab2 f282 	clz	r2, r2
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	f002 021f 	and.w	r2, r2, #31
 80066ee:	2101      	movs	r1, #1
 80066f0:	fa01 f202 	lsl.w	r2, r1, r2
 80066f4:	4013      	ands	r3, r2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0b2      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x158>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80066fa:	4b8c      	ldr	r3, [pc, #560]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	4989      	ldr	r1, [pc, #548]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006708:	4313      	orrs	r3, r2
 800670a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800670c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006710:	2b01      	cmp	r3, #1
 8006712:	d105      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x218>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006714:	4b85      	ldr	r3, [pc, #532]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	4a84      	ldr	r2, [pc, #528]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800671a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01c      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00f      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d00b      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d007      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b03      	cmp	r3, #3
 800674a:	d003      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800674c:	21be      	movs	r1, #190	; 0xbe
 800674e:	4878      	ldr	r0, [pc, #480]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006750:	f7fb fb37 	bl	8001dc2 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006754:	4b75      	ldr	r3, [pc, #468]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	f023 0203 	bic.w	r2, r3, #3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4972      	ldr	r1, [pc, #456]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006762:	4313      	orrs	r3, r2
 8006764:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01f      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d012      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006782:	d00d      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800678c:	d008      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006796:	d003      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006798:	21c9      	movs	r1, #201	; 0xc9
 800679a:	4865      	ldr	r0, [pc, #404]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800679c:	f7fb fb11 	bl	8001dc2 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067a0:	4b62      	ldr	r3, [pc, #392]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	495f      	ldr	r1, [pc, #380]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01f      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d012      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067ce:	d00d      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067d8:	d008      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067e2:	d003      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80067e4:	21d5      	movs	r1, #213	; 0xd5
 80067e6:	4852      	ldr	r0, [pc, #328]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80067e8:	f7fb faeb 	bl	8001dc2 <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067ec:	4b4f      	ldr	r3, [pc, #316]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	494c      	ldr	r1, [pc, #304]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	d014      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	2b10      	cmp	r3, #16
 8006818:	d003      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800681a:	21e0      	movs	r1, #224	; 0xe0
 800681c:	4844      	ldr	r0, [pc, #272]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800681e:	f7fb fad0 	bl	8001dc2 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006822:	4b42      	ldr	r3, [pc, #264]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	f023 0210 	bic.w	r2, r3, #16
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	493f      	ldr	r1, [pc, #252]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006830:	4313      	orrs	r3, r2
 8006832:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d015      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006848:	d007      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x352>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006852:	21ee      	movs	r1, #238	; 0xee
 8006854:	4836      	ldr	r0, [pc, #216]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006856:	f7fb fab4 	bl	8001dc2 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800685a:	4b34      	ldr	r3, [pc, #208]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	4931      	ldr	r1, [pc, #196]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006868:	4313      	orrs	r3, r2
 800686a:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d015      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	2b20      	cmp	r3, #32
 8006886:	d004      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8006888:	f44f 7181 	mov.w	r1, #258	; 0x102
 800688c:	4828      	ldr	r0, [pc, #160]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800688e:	f7fb fa98 	bl	8001dc2 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006892:	4b26      	ldr	r3, [pc, #152]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	f023 0220 	bic.w	r2, r3, #32
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	4923      	ldr	r1, [pc, #140]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d015      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d008      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	2b40      	cmp	r3, #64	; 0x40
 80068be:	d004      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80068c0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80068c4:	481a      	ldr	r0, [pc, #104]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80068c6:	f7fb fa7c 	bl	8001dc2 <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068ca:	4b18      	ldr	r3, [pc, #96]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	4915      	ldr	r1, [pc, #84]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d025      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d013      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068f8:	d00e      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006902:	d009      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800690c:	d004      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800690e:	f240 1123 	movw	r1, #291	; 0x123
 8006912:	4807      	ldr	r0, [pc, #28]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8006914:	f7fb fa55 	bl	8001dc2 <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006918:	4b04      	ldr	r3, [pc, #16]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	4901      	ldr	r1, [pc, #4]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006926:	4313      	orrs	r3, r2
 8006928:	630b      	str	r3, [r1, #48]	; 0x30
 800692a:	e003      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800692c:	40021000 	.word	0x40021000
 8006930:	0800c2f4 	.word	0x0800c2f4
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0310 	and.w	r3, r3, #16
 800693c:	2b00      	cmp	r3, #0
 800693e:	d020      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d013      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006950:	d00e      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800695a:	d009      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006964:	d004      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006966:	f240 112d 	movw	r1, #301	; 0x12d
 800696a:	48a1      	ldr	r0, [pc, #644]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 800696c:	f7fb fa29 	bl	8001dc2 <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006970:	4ba0      	ldr	r3, [pc, #640]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	499d      	ldr	r1, [pc, #628]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 800697e:	4313      	orrs	r3, r2
 8006980:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800698a:	2b00      	cmp	r3, #0
 800698c:	d016      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800699e:	d004      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x4a2>
 80069a0:	f240 113d 	movw	r1, #317	; 0x13d
 80069a4:	4892      	ldr	r0, [pc, #584]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 80069a6:	f7fb fa0c 	bl	8001dc2 <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069aa:	4b92      	ldr	r3, [pc, #584]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	498f      	ldr	r1, [pc, #572]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d04d      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d040      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d8:	d03b      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80069e2:	d036      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e8:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80069ec:	d031      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80069f6:	d02c      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006a00:	d027      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8006a0a:	d022      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8006a14:	d01d      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1a:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8006a1e:	d018      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8006a28:	d013      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006a32:	d00e      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8006a3c:	d009      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006a46:	d004      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8006a48:	f240 115d 	movw	r1, #349	; 0x15d
 8006a4c:	4868      	ldr	r0, [pc, #416]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006a4e:	f7fb f9b8 	bl	8001dc2 <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a52:	4b68      	ldr	r3, [pc, #416]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	4965      	ldr	r1, [pc, #404]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d04d      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d040      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a80:	d03b      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a86:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8006a8a:	d036      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8006a94:	d031      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9a:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 8006a9e:	d02c      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006aa8:	d027      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 8006ab2:	d022      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 8006abc:	d01d      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 8006ac6:	d018      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ad0:	d013      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8006ada:	d00e      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 8006ae4:	d009      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8006aee:	d004      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8006af0:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8006af4:	483e      	ldr	r0, [pc, #248]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006af6:	f7fb f964 	bl	8001dc2 <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006afa:	4b3e      	ldr	r3, [pc, #248]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	493b      	ldr	r1, [pc, #236]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d016      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d009      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b28:	d004      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8006b2a:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8006b2e:	4830      	ldr	r0, [pc, #192]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006b30:	f7fb f947 	bl	8001dc2 <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006b34:	4b2f      	ldr	r3, [pc, #188]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b40:	492c      	ldr	r1, [pc, #176]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d016      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x666>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b62:	d004      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x666>
 8006b64:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8006b68:	4821      	ldr	r0, [pc, #132]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006b6a:	f7fb f92a 	bl	8001dc2 <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006b6e:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	491e      	ldr	r1, [pc, #120]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d016      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d009      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b9c:	d004      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8006b9e:	f240 11f7 	movw	r1, #503	; 0x1f7
 8006ba2:	4813      	ldr	r0, [pc, #76]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006ba4:	f7fb f90d 	bl	8001dc2 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006ba8:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	490f      	ldr	r1, [pc, #60]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d01b      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x6f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bd6:	d004      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8006bd8:	f240 2101 	movw	r1, #513	; 0x201
 8006bdc:	4804      	ldr	r0, [pc, #16]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8006bde:	f7fb f8f0 	bl	8001dc2 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006be2:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>)
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bee:	e003      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8006bf0:	0800c2f4 	.word	0x0800c2f4
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	493d      	ldr	r1, [pc, #244]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d016      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c1a:	d004      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8006c1c:	f240 210b 	movw	r1, #523	; 0x20b
 8006c20:	4834      	ldr	r0, [pc, #208]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006c22:	f7fb f8ce 	bl	8001dc2 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006c26:	4b32      	ldr	r3, [pc, #200]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c32:	492f      	ldr	r1, [pc, #188]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d016      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x76a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c54:	d004      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8006c56:	f240 2115 	movw	r1, #533	; 0x215
 8006c5a:	4826      	ldr	r0, [pc, #152]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006c5c:	f7fb f8b1 	bl	8001dc2 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006c60:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6c:	4920      	ldr	r1, [pc, #128]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d016      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x792>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8e:	d004      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x792>
 8006c90:	f240 211f 	movw	r1, #543	; 0x21f
 8006c94:	4817      	ldr	r0, [pc, #92]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006c96:	f7fb f894 	bl	8001dc2 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006c9a:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca6:	4912      	ldr	r1, [pc, #72]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d016      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc8:	d004      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006cca:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8006cce:	4809      	ldr	r0, [pc, #36]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>)
 8006cd0:	f7fb f877 	bl	8001dc2 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006cd4:	4b06      	ldr	r3, [pc, #24]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	4903      	ldr	r1, [pc, #12]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3748      	adds	r7, #72	; 0x48
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	0800c2f4 	.word	0x0800c2f4

08006cf8 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e0e1      	b.n	8006ece <HAL_RTC_Init+0x1d6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a72      	ldr	r2, [pc, #456]	; (8006ed8 <HAL_RTC_Init+0x1e0>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d004      	beq.n	8006d1e <HAL_RTC_Init+0x26>
 8006d14:	f240 1121 	movw	r1, #289	; 0x121
 8006d18:	4870      	ldr	r0, [pc, #448]	; (8006edc <HAL_RTC_Init+0x1e4>)
 8006d1a:	f7fb f852 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b40      	cmp	r3, #64	; 0x40
 8006d24:	d008      	beq.n	8006d38 <HAL_RTC_Init+0x40>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <HAL_RTC_Init+0x40>
 8006d2e:	f44f 7191 	mov.w	r1, #290	; 0x122
 8006d32:	486a      	ldr	r0, [pc, #424]	; (8006edc <HAL_RTC_Init+0x1e4>)
 8006d34:	f7fb f845 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d3e:	d904      	bls.n	8006d4a <HAL_RTC_Init+0x52>
 8006d40:	f240 1123 	movw	r1, #291	; 0x123
 8006d44:	4865      	ldr	r0, [pc, #404]	; (8006edc <HAL_RTC_Init+0x1e4>)
 8006d46:	f7fb f83c 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d52:	d304      	bcc.n	8006d5e <HAL_RTC_Init+0x66>
 8006d54:	f44f 7192 	mov.w	r1, #292	; 0x124
 8006d58:	4860      	ldr	r0, [pc, #384]	; (8006edc <HAL_RTC_Init+0x1e4>)
 8006d5a:	f7fb f832 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d013      	beq.n	8006d8e <HAL_RTC_Init+0x96>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d6e:	d00e      	beq.n	8006d8e <HAL_RTC_Init+0x96>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d78:	d009      	beq.n	8006d8e <HAL_RTC_Init+0x96>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d82:	d004      	beq.n	8006d8e <HAL_RTC_Init+0x96>
 8006d84:	f240 1125 	movw	r1, #293	; 0x125
 8006d88:	4854      	ldr	r0, [pc, #336]	; (8006edc <HAL_RTC_Init+0x1e4>)
 8006d8a:	f7fb f81a 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <HAL_RTC_Init+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d9e:	d004      	beq.n	8006daa <HAL_RTC_Init+0xb2>
 8006da0:	f44f 7193 	mov.w	r1, #294	; 0x126
 8006da4:	484d      	ldr	r0, [pc, #308]	; (8006edc <HAL_RTC_Init+0x1e4>)
 8006da6:	f7fb f80c 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d009      	beq.n	8006dc6 <HAL_RTC_Init+0xce>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dba:	d004      	beq.n	8006dc6 <HAL_RTC_Init+0xce>
 8006dbc:	f240 1127 	movw	r1, #295	; 0x127
 8006dc0:	4846      	ldr	r0, [pc, #280]	; (8006edc <HAL_RTC_Init+0x1e4>)
 8006dc2:	f7fa fffe 	bl	8001dc2 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7f5b      	ldrb	r3, [r3, #29]
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d105      	bne.n	8006ddc <HAL_RTC_Init+0xe4>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fb f844 	bl	8001e64 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	22ca      	movs	r2, #202	; 0xca
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2253      	movs	r2, #83	; 0x53
 8006df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 ffdc 	bl	8007db0 <RTC_EnterInitMode>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <HAL_RTC_Init+0x118>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	22ff      	movs	r2, #255	; 0xff
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2204      	movs	r2, #4
 8006e0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e05e      	b.n	8006ece <HAL_RTC_Init+0x1d6>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e22:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6899      	ldr	r1, [r3, #8]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	68d2      	ldr	r2, [r2, #12]
 8006e4a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6919      	ldr	r1, [r3, #16]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	041a      	lsls	r2, r3, #16
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10e      	bne.n	8006e9c <HAL_RTC_Init+0x1a4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 ff6e 	bl	8007d60 <HAL_RTC_WaitForSynchro>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d008      	beq.n	8006e9c <HAL_RTC_Init+0x1a4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	22ff      	movs	r2, #255	; 0xff
 8006e90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2204      	movs	r2, #4
 8006e96:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e018      	b.n	8006ece <HAL_RTC_Init+0x1d6>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006eaa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	22ff      	movs	r2, #255	; 0xff
 8006ec4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
  }
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40002800 	.word	0x40002800
 8006edc:	0800c350 	.word	0x0800c350

08006ee0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ee0:	b590      	push	{r4, r7, lr}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <HAL_RTC_SetTime+0x26>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d004      	beq.n	8006f06 <HAL_RTC_SetTime+0x26>
 8006efc:	f240 310f 	movw	r1, #783	; 0x30f
 8006f00:	48a4      	ldr	r0, [pc, #656]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 8006f02:	f7fa ff5e 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f0e:	d00d      	beq.n	8006f2c <HAL_RTC_SetTime+0x4c>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f18:	d008      	beq.n	8006f2c <HAL_RTC_SetTime+0x4c>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <HAL_RTC_SetTime+0x4c>
 8006f22:	f44f 7144 	mov.w	r1, #784	; 0x310
 8006f26:	489b      	ldr	r0, [pc, #620]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 8006f28:	f7fa ff4b 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d009      	beq.n	8006f48 <HAL_RTC_SetTime+0x68>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f3c:	d004      	beq.n	8006f48 <HAL_RTC_SetTime+0x68>
 8006f3e:	f240 3111 	movw	r1, #785	; 0x311
 8006f42:	4894      	ldr	r0, [pc, #592]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 8006f44:	f7fa ff3d 	bl	8001dc2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	7f1b      	ldrb	r3, [r3, #28]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_RTC_SetTime+0x74>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e12c      	b.n	80071ae <HAL_RTC_SetTime+0x2ce>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d15c      	bne.n	8007020 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01a      	beq.n	8006faa <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <HAL_RTC_SetTime+0xa4>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b0c      	cmp	r3, #12
 8006f82:	d904      	bls.n	8006f8e <HAL_RTC_SetTime+0xae>
 8006f84:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8006f88:	4882      	ldr	r0, [pc, #520]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 8006f8a:	f7fa ff1a 	bl	8001dc2 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	78db      	ldrb	r3, [r3, #3]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d015      	beq.n	8006fc2 <HAL_RTC_SetTime+0xe2>
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	78db      	ldrb	r3, [r3, #3]
 8006f9a:	2b40      	cmp	r3, #64	; 0x40
 8006f9c:	d011      	beq.n	8006fc2 <HAL_RTC_SetTime+0xe2>
 8006f9e:	f240 311d 	movw	r1, #797	; 0x31d
 8006fa2:	487c      	ldr	r0, [pc, #496]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 8006fa4:	f7fa ff0d 	bl	8001dc2 <assert_failed>
 8006fa8:	e00b      	b.n	8006fc2 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2200      	movs	r2, #0
 8006fae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b17      	cmp	r3, #23
 8006fb6:	d904      	bls.n	8006fc2 <HAL_RTC_SetTime+0xe2>
 8006fb8:	f240 3122 	movw	r1, #802	; 0x322
 8006fbc:	4875      	ldr	r0, [pc, #468]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 8006fbe:	f7fa ff00 	bl	8001dc2 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b3b      	cmp	r3, #59	; 0x3b
 8006fc8:	d904      	bls.n	8006fd4 <HAL_RTC_SetTime+0xf4>
 8006fca:	f44f 7149 	mov.w	r1, #804	; 0x324
 8006fce:	4871      	ldr	r0, [pc, #452]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 8006fd0:	f7fa fef7 	bl	8001dc2 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	789b      	ldrb	r3, [r3, #2]
 8006fd8:	2b3b      	cmp	r3, #59	; 0x3b
 8006fda:	d904      	bls.n	8006fe6 <HAL_RTC_SetTime+0x106>
 8006fdc:	f240 3125 	movw	r1, #805	; 0x325
 8006fe0:	486c      	ldr	r0, [pc, #432]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 8006fe2:	f7fa feee 	bl	8001dc2 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 ff0c 	bl	8007e08 <RTC_ByteToBcd2>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	785b      	ldrb	r3, [r3, #1]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 ff05 	bl	8007e08 <RTC_ByteToBcd2>
 8006ffe:	4603      	mov	r3, r0
 8007000:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007002:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	789b      	ldrb	r3, [r3, #2]
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fefd 	bl	8007e08 <RTC_ByteToBcd2>
 800700e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007010:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	78db      	ldrb	r3, [r3, #3]
 8007018:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	e062      	b.n	80070e6 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	d022      	beq.n	8007074 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 ff06 	bl	8007e44 <RTC_Bcd2ToByte>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <HAL_RTC_SetTime+0x16e>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fefe 	bl	8007e44 <RTC_Bcd2ToByte>
 8007048:	4603      	mov	r3, r0
 800704a:	2b0c      	cmp	r3, #12
 800704c:	d904      	bls.n	8007058 <HAL_RTC_SetTime+0x178>
 800704e:	f44f 714c 	mov.w	r1, #816	; 0x330
 8007052:	4850      	ldr	r0, [pc, #320]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 8007054:	f7fa feb5 	bl	8001dc2 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	78db      	ldrb	r3, [r3, #3]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d019      	beq.n	8007094 <HAL_RTC_SetTime+0x1b4>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	78db      	ldrb	r3, [r3, #3]
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d015      	beq.n	8007094 <HAL_RTC_SetTime+0x1b4>
 8007068:	f240 3131 	movw	r1, #817	; 0x331
 800706c:	4849      	ldr	r0, [pc, #292]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 800706e:	f7fa fea8 	bl	8001dc2 <assert_failed>
 8007072:	e00f      	b.n	8007094 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2200      	movs	r2, #0
 8007078:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fee0 	bl	8007e44 <RTC_Bcd2ToByte>
 8007084:	4603      	mov	r3, r0
 8007086:	2b17      	cmp	r3, #23
 8007088:	d904      	bls.n	8007094 <HAL_RTC_SetTime+0x1b4>
 800708a:	f240 3136 	movw	r1, #822	; 0x336
 800708e:	4841      	ldr	r0, [pc, #260]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 8007090:	f7fa fe97 	bl	8001dc2 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fed3 	bl	8007e44 <RTC_Bcd2ToByte>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b3b      	cmp	r3, #59	; 0x3b
 80070a2:	d904      	bls.n	80070ae <HAL_RTC_SetTime+0x1ce>
 80070a4:	f44f 714e 	mov.w	r1, #824	; 0x338
 80070a8:	483a      	ldr	r0, [pc, #232]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 80070aa:	f7fa fe8a 	bl	8001dc2 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	789b      	ldrb	r3, [r3, #2]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fec6 	bl	8007e44 <RTC_Bcd2ToByte>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b3b      	cmp	r3, #59	; 0x3b
 80070bc:	d904      	bls.n	80070c8 <HAL_RTC_SetTime+0x1e8>
 80070be:	f240 3139 	movw	r1, #825	; 0x339
 80070c2:	4834      	ldr	r0, [pc, #208]	; (8007194 <HAL_RTC_SetTime+0x2b4>)
 80070c4:	f7fa fe7d 	bl	8001dc2 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070d4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80070da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	78db      	ldrb	r3, [r3, #3]
 80070e0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	22ca      	movs	r2, #202	; 0xca
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2253      	movs	r2, #83	; 0x53
 80070f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fe5a 	bl	8007db0 <RTC_EnterInitMode>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	22ff      	movs	r2, #255	; 0xff
 8007108:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2204      	movs	r2, #4
 800710e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e049      	b.n	80071ae <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007124:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007128:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007138:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6899      	ldr	r1, [r3, #8]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	431a      	orrs	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007160:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d113      	bne.n	8007198 <HAL_RTC_SetTime+0x2b8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 fdf5 	bl	8007d60 <HAL_RTC_WaitForSynchro>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00d      	beq.n	8007198 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	22ff      	movs	r2, #255	; 0xff
 8007182:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2204      	movs	r2, #4
 8007188:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e00c      	b.n	80071ae <HAL_RTC_SetTime+0x2ce>
 8007194:	0800c350 	.word	0x0800c350
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	22ff      	movs	r2, #255	; 0xff
 800719e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2201      	movs	r2, #1
 80071a4:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80071ac:	2300      	movs	r3, #0
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd90      	pop	{r4, r7, pc}
 80071b6:	bf00      	nop

080071b8 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <HAL_RTC_GetTime+0x26>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d004      	beq.n	80071de <HAL_RTC_GetTime+0x26>
 80071d4:	f44f 7164 	mov.w	r1, #912	; 0x390
 80071d8:	482c      	ldr	r0, [pc, #176]	; (800728c <HAL_RTC_GetTime+0xd4>)
 80071da:	f7fa fdf2 	bl	8001dc2 <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007200:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007204:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	0c1b      	lsrs	r3, r3, #16
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007210:	b2da      	uxtb	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	0a1b      	lsrs	r3, r3, #8
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007220:	b2da      	uxtb	r2, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722e:	b2da      	uxtb	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	0c1b      	lsrs	r3, r3, #16
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	b2da      	uxtb	r2, r3
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d11a      	bne.n	8007280 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fdf8 	bl	8007e44 <RTC_Bcd2ToByte>
 8007254:	4603      	mov	r3, r0
 8007256:	461a      	mov	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	4618      	mov	r0, r3
 8007262:	f000 fdef 	bl	8007e44 <RTC_Bcd2ToByte>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	789b      	ldrb	r3, [r3, #2]
 8007272:	4618      	mov	r0, r3
 8007274:	f000 fde6 	bl	8007e44 <RTC_Bcd2ToByte>
 8007278:	4603      	mov	r3, r0
 800727a:	461a      	mov	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	0800c350 	.word	0x0800c350

08007290 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007290:	b590      	push	{r4, r7, lr}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <HAL_RTC_SetDate+0x26>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d004      	beq.n	80072b6 <HAL_RTC_SetDate+0x26>
 80072ac:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 80072b0:	488e      	ldr	r0, [pc, #568]	; (80074ec <HAL_RTC_SetDate+0x25c>)
 80072b2:	f7fa fd86 	bl	8001dc2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	7f1b      	ldrb	r3, [r3, #28]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_RTC_SetDate+0x32>
 80072be:	2302      	movs	r3, #2
 80072c0:	e10f      	b.n	80074e2 <HAL_RTC_SetDate+0x252>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2202      	movs	r2, #2
 80072cc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10e      	bne.n	80072f2 <HAL_RTC_SetDate+0x62>
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	785b      	ldrb	r3, [r3, #1]
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	f023 0310 	bic.w	r3, r3, #16
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	330a      	adds	r3, #10
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d01c      	beq.n	8007334 <HAL_RTC_SetDate+0xa4>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d018      	beq.n	8007334 <HAL_RTC_SetDate+0xa4>
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b03      	cmp	r3, #3
 8007308:	d014      	beq.n	8007334 <HAL_RTC_SetDate+0xa4>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b04      	cmp	r3, #4
 8007310:	d010      	beq.n	8007334 <HAL_RTC_SetDate+0xa4>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b05      	cmp	r3, #5
 8007318:	d00c      	beq.n	8007334 <HAL_RTC_SetDate+0xa4>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b06      	cmp	r3, #6
 8007320:	d008      	beq.n	8007334 <HAL_RTC_SetDate+0xa4>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b07      	cmp	r3, #7
 8007328:	d004      	beq.n	8007334 <HAL_RTC_SetDate+0xa4>
 800732a:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 800732e:	486f      	ldr	r0, [pc, #444]	; (80074ec <HAL_RTC_SetDate+0x25c>)
 8007330:	f7fa fd47 	bl	8001dc2 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d13f      	bne.n	80073ba <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	78db      	ldrb	r3, [r3, #3]
 800733e:	2b63      	cmp	r3, #99	; 0x63
 8007340:	d904      	bls.n	800734c <HAL_RTC_SetDate+0xbc>
 8007342:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8007346:	4869      	ldr	r0, [pc, #420]	; (80074ec <HAL_RTC_SetDate+0x25c>)
 8007348:	f7fa fd3b 	bl	8001dc2 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <HAL_RTC_SetDate+0xcc>
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b0c      	cmp	r3, #12
 800735a:	d904      	bls.n	8007366 <HAL_RTC_SetDate+0xd6>
 800735c:	f240 31cd 	movw	r1, #973	; 0x3cd
 8007360:	4862      	ldr	r0, [pc, #392]	; (80074ec <HAL_RTC_SetDate+0x25c>)
 8007362:	f7fa fd2e 	bl	8001dc2 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	789b      	ldrb	r3, [r3, #2]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_RTC_SetDate+0xe6>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	789b      	ldrb	r3, [r3, #2]
 8007372:	2b1f      	cmp	r3, #31
 8007374:	d904      	bls.n	8007380 <HAL_RTC_SetDate+0xf0>
 8007376:	f240 31ce 	movw	r1, #974	; 0x3ce
 800737a:	485c      	ldr	r0, [pc, #368]	; (80074ec <HAL_RTC_SetDate+0x25c>)
 800737c:	f7fa fd21 	bl	8001dc2 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	78db      	ldrb	r3, [r3, #3]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fd3f 	bl	8007e08 <RTC_ByteToBcd2>
 800738a:	4603      	mov	r3, r0
 800738c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fd38 	bl	8007e08 <RTC_ByteToBcd2>
 8007398:	4603      	mov	r3, r0
 800739a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800739c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	789b      	ldrb	r3, [r3, #2]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fd30 	bl	8007e08 <RTC_ByteToBcd2>
 80073a8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80073aa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	e045      	b.n	8007446 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	78db      	ldrb	r3, [r3, #3]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fd40 	bl	8007e44 <RTC_Bcd2ToByte>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b63      	cmp	r3, #99	; 0x63
 80073c8:	d904      	bls.n	80073d4 <HAL_RTC_SetDate+0x144>
 80073ca:	f240 31d7 	movw	r1, #983	; 0x3d7
 80073ce:	4847      	ldr	r0, [pc, #284]	; (80074ec <HAL_RTC_SetDate+0x25c>)
 80073d0:	f7fa fcf7 	bl	8001dc2 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fd33 	bl	8007e44 <RTC_Bcd2ToByte>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <HAL_RTC_SetDate+0x164>
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	785b      	ldrb	r3, [r3, #1]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 fd2b 	bl	8007e44 <RTC_Bcd2ToByte>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b0c      	cmp	r3, #12
 80073f2:	d904      	bls.n	80073fe <HAL_RTC_SetDate+0x16e>
 80073f4:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 80073f8:	483c      	ldr	r0, [pc, #240]	; (80074ec <HAL_RTC_SetDate+0x25c>)
 80073fa:	f7fa fce2 	bl	8001dc2 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	789b      	ldrb	r3, [r3, #2]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fd1e 	bl	8007e44 <RTC_Bcd2ToByte>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <HAL_RTC_SetDate+0x18e>
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	789b      	ldrb	r3, [r3, #2]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fd16 	bl	8007e44 <RTC_Bcd2ToByte>
 8007418:	4603      	mov	r3, r0
 800741a:	2b1f      	cmp	r3, #31
 800741c:	d904      	bls.n	8007428 <HAL_RTC_SetDate+0x198>
 800741e:	f240 31d9 	movw	r1, #985	; 0x3d9
 8007422:	4832      	ldr	r0, [pc, #200]	; (80074ec <HAL_RTC_SetDate+0x25c>)
 8007424:	f7fa fccd 	bl	8001dc2 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	78db      	ldrb	r3, [r3, #3]
 800742c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	785b      	ldrb	r3, [r3, #1]
 8007432:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007434:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800743a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007442:	4313      	orrs	r3, r2
 8007444:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	22ca      	movs	r2, #202	; 0xca
 800744c:	625a      	str	r2, [r3, #36]	; 0x24
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2253      	movs	r2, #83	; 0x53
 8007454:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 fcaa 	bl	8007db0 <RTC_EnterInitMode>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	22ff      	movs	r2, #255	; 0xff
 8007468:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2204      	movs	r2, #4
 800746e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e033      	b.n	80074e2 <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007484:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007488:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007498:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d111      	bne.n	80074cc <HAL_RTC_SetDate+0x23c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 fc59 	bl	8007d60 <HAL_RTC_WaitForSynchro>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	22ff      	movs	r2, #255	; 0xff
 80074ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2204      	movs	r2, #4
 80074c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e00a      	b.n	80074e2 <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	22ff      	movs	r2, #255	; 0xff
 80074d2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2201      	movs	r2, #1
 80074d8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80074e0:	2300      	movs	r3, #0
  }
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd90      	pop	{r4, r7, pc}
 80074ea:	bf00      	nop
 80074ec:	0800c350 	.word	0x0800c350

080074f0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d007      	beq.n	8007516 <HAL_RTC_GetDate+0x26>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d004      	beq.n	8007516 <HAL_RTC_GetDate+0x26>
 800750c:	f240 4126 	movw	r1, #1062	; 0x426
 8007510:	4824      	ldr	r0, [pc, #144]	; (80075a4 <HAL_RTC_GetDate+0xb4>)
 8007512:	f7fa fc56 	bl	8001dc2 <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007520:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007524:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	b2da      	uxtb	r2, r3
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	0a1b      	lsrs	r3, r3, #8
 8007534:	b2db      	uxtb	r3, r3
 8007536:	f003 031f 	and.w	r3, r3, #31
 800753a:	b2da      	uxtb	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007548:	b2da      	uxtb	r2, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	0b5b      	lsrs	r3, r3, #13
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f003 0307 	and.w	r3, r3, #7
 8007558:	b2da      	uxtb	r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d11a      	bne.n	800759a <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	78db      	ldrb	r3, [r3, #3]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fc6b 	bl	8007e44 <RTC_Bcd2ToByte>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	785b      	ldrb	r3, [r3, #1]
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fc62 	bl	8007e44 <RTC_Bcd2ToByte>
 8007580:	4603      	mov	r3, r0
 8007582:	461a      	mov	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	789b      	ldrb	r3, [r3, #2]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fc59 	bl	8007e44 <RTC_Bcd2ToByte>
 8007592:	4603      	mov	r3, r0
 8007594:	461a      	mov	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	0800c350 	.word	0x0800c350

080075a8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80075a8:	b590      	push	{r4, r7, lr}
 80075aa:	b089      	sub	sp, #36	; 0x24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61fb      	str	r3, [r7, #28]
 80075bc:	2300      	movs	r3, #0
 80075be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d007      	beq.n	80075d6 <HAL_RTC_SetAlarm_IT+0x2e>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d004      	beq.n	80075d6 <HAL_RTC_SetAlarm_IT+0x2e>
 80075cc:	f240 5153 	movw	r1, #1363	; 0x553
 80075d0:	48a1      	ldr	r0, [pc, #644]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80075d2:	f7fa fbf6 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075de:	d009      	beq.n	80075f4 <HAL_RTC_SetAlarm_IT+0x4c>
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e8:	d004      	beq.n	80075f4 <HAL_RTC_SetAlarm_IT+0x4c>
 80075ea:	f240 5154 	movw	r1, #1364	; 0x554
 80075ee:	489a      	ldr	r0, [pc, #616]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80075f0:	f7fa fbe7 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <HAL_RTC_SetAlarm_IT+0x62>
 8007600:	f240 5155 	movw	r1, #1365	; 0x555
 8007604:	4894      	ldr	r0, [pc, #592]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007606:	f7fa fbdc 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d009      	beq.n	8007626 <HAL_RTC_SetAlarm_IT+0x7e>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761a:	d004      	beq.n	8007626 <HAL_RTC_SetAlarm_IT+0x7e>
 800761c:	f240 5156 	movw	r1, #1366	; 0x556
 8007620:	488d      	ldr	r0, [pc, #564]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007622:	f7fa fbce 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800762e:	d304      	bcc.n	800763a <HAL_RTC_SetAlarm_IT+0x92>
 8007630:	f240 5157 	movw	r1, #1367	; 0x557
 8007634:	4888      	ldr	r0, [pc, #544]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007636:	f7fa fbc4 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d04f      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800764a:	d04a      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007654:	d045      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800765e:	d040      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007668:	d03b      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007672:	d036      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800767c:	d031      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8007686:	d02c      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007690:	d027      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800769a:	d022      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80076a4:	d01d      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80076ae:	d018      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80076b8:	d013      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80076c2:	d00e      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80076cc:	d009      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80076d6:	d004      	beq.n	80076e2 <HAL_RTC_SetAlarm_IT+0x13a>
 80076d8:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 80076dc:	485e      	ldr	r0, [pc, #376]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80076de:	f7fa fb70 	bl	8001dc2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	7f1b      	ldrb	r3, [r3, #28]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d101      	bne.n	80076ee <HAL_RTC_SetAlarm_IT+0x146>
 80076ea:	2302      	movs	r3, #2
 80076ec:	e242      	b.n	8007b74 <HAL_RTC_SetAlarm_IT+0x5cc>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2202      	movs	r2, #2
 80076f8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f040 80ad 	bne.w	800785c <HAL_RTC_SetAlarm_IT+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01a      	beq.n	8007746 <HAL_RTC_SetAlarm_IT+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <HAL_RTC_SetAlarm_IT+0x178>
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b0c      	cmp	r3, #12
 800771e:	d904      	bls.n	800772a <HAL_RTC_SetAlarm_IT+0x182>
 8007720:	f240 5163 	movw	r1, #1379	; 0x563
 8007724:	484c      	ldr	r0, [pc, #304]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007726:	f7fa fb4c 	bl	8001dc2 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	78db      	ldrb	r3, [r3, #3]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d015      	beq.n	800775e <HAL_RTC_SetAlarm_IT+0x1b6>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	78db      	ldrb	r3, [r3, #3]
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d011      	beq.n	800775e <HAL_RTC_SetAlarm_IT+0x1b6>
 800773a:	f240 5164 	movw	r1, #1380	; 0x564
 800773e:	4846      	ldr	r0, [pc, #280]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8007740:	f7fa fb3f 	bl	8001dc2 <assert_failed>
 8007744:	e00b      	b.n	800775e <HAL_RTC_SetAlarm_IT+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2200      	movs	r2, #0
 800774a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b17      	cmp	r3, #23
 8007752:	d904      	bls.n	800775e <HAL_RTC_SetAlarm_IT+0x1b6>
 8007754:	f240 5169 	movw	r1, #1385	; 0x569
 8007758:	483f      	ldr	r0, [pc, #252]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 800775a:	f7fa fb32 	bl	8001dc2 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	2b3b      	cmp	r3, #59	; 0x3b
 8007764:	d904      	bls.n	8007770 <HAL_RTC_SetAlarm_IT+0x1c8>
 8007766:	f240 516b 	movw	r1, #1387	; 0x56b
 800776a:	483b      	ldr	r0, [pc, #236]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 800776c:	f7fa fb29 	bl	8001dc2 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	789b      	ldrb	r3, [r3, #2]
 8007774:	2b3b      	cmp	r3, #59	; 0x3b
 8007776:	d904      	bls.n	8007782 <HAL_RTC_SetAlarm_IT+0x1da>
 8007778:	f240 516c 	movw	r1, #1388	; 0x56c
 800777c:	4836      	ldr	r0, [pc, #216]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 800777e:	f7fa fb20 	bl	8001dc2 <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10f      	bne.n	80077aa <HAL_RTC_SetAlarm_IT+0x202>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <HAL_RTC_SetAlarm_IT+0x1f6>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800779a:	2b1f      	cmp	r3, #31
 800779c:	d92d      	bls.n	80077fa <HAL_RTC_SetAlarm_IT+0x252>
 800779e:	f44f 61ae 	mov.w	r1, #1392	; 0x570
 80077a2:	482d      	ldr	r0, [pc, #180]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80077a4:	f7fa fb0d 	bl	8001dc2 <assert_failed>
 80077a8:	e027      	b.n	80077fa <HAL_RTC_SetAlarm_IT+0x252>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d022      	beq.n	80077fa <HAL_RTC_SetAlarm_IT+0x252>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d01d      	beq.n	80077fa <HAL_RTC_SetAlarm_IT+0x252>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d018      	beq.n	80077fa <HAL_RTC_SetAlarm_IT+0x252>
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d013      	beq.n	80077fa <HAL_RTC_SetAlarm_IT+0x252>
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077d8:	2b05      	cmp	r3, #5
 80077da:	d00e      	beq.n	80077fa <HAL_RTC_SetAlarm_IT+0x252>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077e2:	2b06      	cmp	r3, #6
 80077e4:	d009      	beq.n	80077fa <HAL_RTC_SetAlarm_IT+0x252>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ec:	2b07      	cmp	r3, #7
 80077ee:	d004      	beq.n	80077fa <HAL_RTC_SetAlarm_IT+0x252>
 80077f0:	f240 5174 	movw	r1, #1396	; 0x574
 80077f4:	4818      	ldr	r0, [pc, #96]	; (8007858 <HAL_RTC_SetAlarm_IT+0x2b0>)
 80077f6:	f7fa fae4 	bl	8001dc2 <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fb02 	bl	8007e08 <RTC_ByteToBcd2>
 8007804:	4603      	mov	r3, r0
 8007806:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	785b      	ldrb	r3, [r3, #1]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fafb 	bl	8007e08 <RTC_ByteToBcd2>
 8007812:	4603      	mov	r3, r0
 8007814:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007816:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	789b      	ldrb	r3, [r3, #2]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 faf3 	bl	8007e08 <RTC_ByteToBcd2>
 8007822:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007824:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	78db      	ldrb	r3, [r3, #3]
 800782c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800782e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fae5 	bl	8007e08 <RTC_ByteToBcd2>
 800783e:	4603      	mov	r3, r0
 8007840:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007842:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800784a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007850:	4313      	orrs	r3, r2
 8007852:	61fb      	str	r3, [r7, #28]
 8007854:	e0d0      	b.n	80079f8 <HAL_RTC_SetAlarm_IT+0x450>
 8007856:	bf00      	nop
 8007858:	0800c350 	.word	0x0800c350
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d022      	beq.n	80078b0 <HAL_RTC_SetAlarm_IT+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fae8 	bl	8007e44 <RTC_Bcd2ToByte>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <HAL_RTC_SetAlarm_IT+0x2e2>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fae0 	bl	8007e44 <RTC_Bcd2ToByte>
 8007884:	4603      	mov	r3, r0
 8007886:	2b0c      	cmp	r3, #12
 8007888:	d904      	bls.n	8007894 <HAL_RTC_SetAlarm_IT+0x2ec>
 800788a:	f240 5182 	movw	r1, #1410	; 0x582
 800788e:	489d      	ldr	r0, [pc, #628]	; (8007b04 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007890:	f7fa fa97 	bl	8001dc2 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	78db      	ldrb	r3, [r3, #3]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d019      	beq.n	80078d0 <HAL_RTC_SetAlarm_IT+0x328>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	78db      	ldrb	r3, [r3, #3]
 80078a0:	2b40      	cmp	r3, #64	; 0x40
 80078a2:	d015      	beq.n	80078d0 <HAL_RTC_SetAlarm_IT+0x328>
 80078a4:	f240 5183 	movw	r1, #1411	; 0x583
 80078a8:	4896      	ldr	r0, [pc, #600]	; (8007b04 <HAL_RTC_SetAlarm_IT+0x55c>)
 80078aa:	f7fa fa8a 	bl	8001dc2 <assert_failed>
 80078ae:	e00f      	b.n	80078d0 <HAL_RTC_SetAlarm_IT+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2200      	movs	r2, #0
 80078b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fac2 	bl	8007e44 <RTC_Bcd2ToByte>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b17      	cmp	r3, #23
 80078c4:	d904      	bls.n	80078d0 <HAL_RTC_SetAlarm_IT+0x328>
 80078c6:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 80078ca:	488e      	ldr	r0, [pc, #568]	; (8007b04 <HAL_RTC_SetAlarm_IT+0x55c>)
 80078cc:	f7fa fa79 	bl	8001dc2 <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	785b      	ldrb	r3, [r3, #1]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fab5 	bl	8007e44 <RTC_Bcd2ToByte>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b3b      	cmp	r3, #59	; 0x3b
 80078de:	d904      	bls.n	80078ea <HAL_RTC_SetAlarm_IT+0x342>
 80078e0:	f240 518b 	movw	r1, #1419	; 0x58b
 80078e4:	4887      	ldr	r0, [pc, #540]	; (8007b04 <HAL_RTC_SetAlarm_IT+0x55c>)
 80078e6:	f7fa fa6c 	bl	8001dc2 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	789b      	ldrb	r3, [r3, #2]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 faa8 	bl	8007e44 <RTC_Bcd2ToByte>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b3b      	cmp	r3, #59	; 0x3b
 80078f8:	d904      	bls.n	8007904 <HAL_RTC_SetAlarm_IT+0x35c>
 80078fa:	f240 518c 	movw	r1, #1420	; 0x58c
 80078fe:	4881      	ldr	r0, [pc, #516]	; (8007b04 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007900:	f7fa fa5f 	bl	8001dc2 <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d117      	bne.n	800793c <HAL_RTC_SetAlarm_IT+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fa96 	bl	8007e44 <RTC_Bcd2ToByte>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d008      	beq.n	8007930 <HAL_RTC_SetAlarm_IT+0x388>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fa8d 	bl	8007e44 <RTC_Bcd2ToByte>
 800792a:	4603      	mov	r3, r0
 800792c:	2b1f      	cmp	r3, #31
 800792e:	d949      	bls.n	80079c4 <HAL_RTC_SetAlarm_IT+0x41c>
 8007930:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 8007934:	4873      	ldr	r0, [pc, #460]	; (8007b04 <HAL_RTC_SetAlarm_IT+0x55c>)
 8007936:	f7fa fa44 	bl	8001dc2 <assert_failed>
 800793a:	e043      	b.n	80079c4 <HAL_RTC_SetAlarm_IT+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fa7e 	bl	8007e44 <RTC_Bcd2ToByte>
 8007948:	4603      	mov	r3, r0
 800794a:	2b01      	cmp	r3, #1
 800794c:	d03a      	beq.n	80079c4 <HAL_RTC_SetAlarm_IT+0x41c>
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007954:	4618      	mov	r0, r3
 8007956:	f000 fa75 	bl	8007e44 <RTC_Bcd2ToByte>
 800795a:	4603      	mov	r3, r0
 800795c:	2b02      	cmp	r3, #2
 800795e:	d031      	beq.n	80079c4 <HAL_RTC_SetAlarm_IT+0x41c>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fa6c 	bl	8007e44 <RTC_Bcd2ToByte>
 800796c:	4603      	mov	r3, r0
 800796e:	2b03      	cmp	r3, #3
 8007970:	d028      	beq.n	80079c4 <HAL_RTC_SetAlarm_IT+0x41c>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007978:	4618      	mov	r0, r3
 800797a:	f000 fa63 	bl	8007e44 <RTC_Bcd2ToByte>
 800797e:	4603      	mov	r3, r0
 8007980:	2b04      	cmp	r3, #4
 8007982:	d01f      	beq.n	80079c4 <HAL_RTC_SetAlarm_IT+0x41c>
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fa5a 	bl	8007e44 <RTC_Bcd2ToByte>
 8007990:	4603      	mov	r3, r0
 8007992:	2b05      	cmp	r3, #5
 8007994:	d016      	beq.n	80079c4 <HAL_RTC_SetAlarm_IT+0x41c>
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fa51 	bl	8007e44 <RTC_Bcd2ToByte>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b06      	cmp	r3, #6
 80079a6:	d00d      	beq.n	80079c4 <HAL_RTC_SetAlarm_IT+0x41c>
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 fa48 	bl	8007e44 <RTC_Bcd2ToByte>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b07      	cmp	r3, #7
 80079b8:	d004      	beq.n	80079c4 <HAL_RTC_SetAlarm_IT+0x41c>
 80079ba:	f240 5194 	movw	r1, #1428	; 0x594
 80079be:	4851      	ldr	r0, [pc, #324]	; (8007b04 <HAL_RTC_SetAlarm_IT+0x55c>)
 80079c0:	f7fa f9ff 	bl	8001dc2 <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80079d0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80079d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	78db      	ldrb	r3, [r3, #3]
 80079dc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80079de:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079e6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80079e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80079ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80079f4:	4313      	orrs	r3, r2
 80079f6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	22ca      	movs	r2, #202	; 0xca
 8007a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2253      	movs	r2, #83	; 0x53
 8007a12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1c:	d148      	bne.n	8007ab0 <HAL_RTC_SetAlarm_IT+0x508>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a2c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007a3e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007a40:	f7fa fd4e 	bl	80024e0 <HAL_GetTick>
 8007a44:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007a46:	e013      	b.n	8007a70 <HAL_RTC_SetAlarm_IT+0x4c8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a48:	f7fa fd4a 	bl	80024e0 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a56:	d90b      	bls.n	8007a70 <HAL_RTC_SetAlarm_IT+0x4c8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	22ff      	movs	r2, #255	; 0xff
 8007a5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2203      	movs	r2, #3
 8007a64:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e081      	b.n	8007b74 <HAL_RTC_SetAlarm_IT+0x5cc>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0e4      	beq.n	8007a48 <HAL_RTC_SetAlarm_IT+0x4a0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69fa      	ldr	r2, [r7, #28]
 8007a84:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a9c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007aac:	609a      	str	r2, [r3, #8]
 8007aae:	e04a      	b.n	8007b46 <HAL_RTC_SetAlarm_IT+0x59e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007abe:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007ad0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ad2:	f7fa fd05 	bl	80024e0 <HAL_GetTick>
 8007ad6:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007ad8:	e016      	b.n	8007b08 <HAL_RTC_SetAlarm_IT+0x560>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ada:	f7fa fd01 	bl	80024e0 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ae8:	d90e      	bls.n	8007b08 <HAL_RTC_SetAlarm_IT+0x560>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	22ff      	movs	r2, #255	; 0xff
 8007af0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2203      	movs	r2, #3
 8007af6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e038      	b.n	8007b74 <HAL_RTC_SetAlarm_IT+0x5cc>
 8007b02:	bf00      	nop
 8007b04:	0800c350 	.word	0x0800c350
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0e1      	beq.n	8007ada <HAL_RTC_SetAlarm_IT+0x532>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b34:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b44:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007b46:	4b0d      	ldr	r3, [pc, #52]	; (8007b7c <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a0c      	ldr	r2, [pc, #48]	; (8007b7c <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b50:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007b52:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	4a09      	ldr	r2, [pc, #36]	; (8007b7c <HAL_RTC_SetAlarm_IT+0x5d4>)
 8007b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b5c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	22ff      	movs	r2, #255	; 0xff
 8007b64:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3724      	adds	r7, #36	; 0x24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd90      	pop	{r4, r7, pc}
 8007b7c:	40010400 	.word	0x40010400

08007b80 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	2300      	movs	r3, #0
 8007b94:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <HAL_RTC_GetAlarm+0x2c>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d004      	beq.n	8007bac <HAL_RTC_GetAlarm+0x2c>
 8007ba2:	f240 6166 	movw	r1, #1638	; 0x666
 8007ba6:	484a      	ldr	r0, [pc, #296]	; (8007cd0 <HAL_RTC_GetAlarm+0x150>)
 8007ba8:	f7fa f90b 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_ALARM(Alarm));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bb2:	d008      	beq.n	8007bc6 <HAL_RTC_GetAlarm+0x46>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bba:	d004      	beq.n	8007bc6 <HAL_RTC_GetAlarm+0x46>
 8007bbc:	f240 6167 	movw	r1, #1639	; 0x667
 8007bc0:	4843      	ldr	r0, [pc, #268]	; (8007cd0 <HAL_RTC_GetAlarm+0x150>)
 8007bc2:	f7fa f8fe 	bl	8001dc2 <assert_failed>

  if (Alarm == RTC_ALARM_A)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bcc:	d10e      	bne.n	8007bec <HAL_RTC_GetAlarm+0x6c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bd4:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007be8:	613b      	str	r3, [r7, #16]
 8007bea:	e00d      	b.n	8007c08 <HAL_RTC_GetAlarm+0x88>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bf2:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c02:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c06:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	0c1b      	lsrs	r3, r3, #16
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	0a1b      	lsrs	r3, r3, #8
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	0c1b      	lsrs	r3, r3, #16
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	0e1b      	lsrs	r3, r3, #24
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d125      	bne.n	8007cc4 <HAL_RTC_GetAlarm+0x144>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f8e1 	bl	8007e44 <RTC_Bcd2ToByte>
 8007c82:	4603      	mov	r3, r0
 8007c84:	461a      	mov	r2, r3
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 f8d8 	bl	8007e44 <RTC_Bcd2ToByte>
 8007c94:	4603      	mov	r3, r0
 8007c96:	461a      	mov	r2, r3
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	789b      	ldrb	r3, [r3, #2]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 f8cf 	bl	8007e44 <RTC_Bcd2ToByte>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	461a      	mov	r2, r3
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 f8c5 	bl	8007e44 <RTC_Bcd2ToByte>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	0800c350 	.word	0x0800c350

08007cd4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d012      	beq.n	8007d10 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00b      	beq.n	8007d10 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7f9 fc1f 	bl	800153c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007d0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d012      	beq.n	8007d44 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f9f9 	bl	8008124 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007d42:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007d44:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <HAL_RTC_AlarmIRQHandler+0x88>)
 8007d46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007d4a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	775a      	strb	r2, [r3, #29]
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	40010400 	.word	0x40010400

08007d60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d7a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007d7c:	f7fa fbb0 	bl	80024e0 <HAL_GetTick>
 8007d80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d82:	e009      	b.n	8007d98 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d84:	f7fa fbac 	bl	80024e0 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d92:	d901      	bls.n	8007d98 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e007      	b.n	8007da8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0ee      	beq.n	8007d84 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d119      	bne.n	8007dfe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007dd4:	f7fa fb84 	bl	80024e0 <HAL_GetTick>
 8007dd8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007dda:	e009      	b.n	8007df0 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ddc:	f7fa fb80 	bl	80024e0 <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dea:	d901      	bls.n	8007df0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e007      	b.n	8007e00 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0ee      	beq.n	8007ddc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007e16:	e005      	b.n	8007e24 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	3b0a      	subs	r3, #10
 8007e22:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	2b09      	cmp	r3, #9
 8007e28:	d8f6      	bhi.n	8007e18 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	b2db      	uxtb	r3, r3
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	091b      	lsrs	r3, r3, #4
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	f003 030f 	and.w	r3, r3, #15
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	4413      	add	r3, r2
 8007e72:	b2db      	uxtb	r3, r3
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d013      	beq.n	8007ebe <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d010      	beq.n	8007ebe <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d00d      	beq.n	8007ebe <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d00a      	beq.n	8007ebe <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d007      	beq.n	8007ebe <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b06      	cmp	r3, #6
 8007eb2:	d004      	beq.n	8007ebe <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
 8007eb4:	f44f 7158 	mov.w	r1, #864	; 0x360
 8007eb8:	485a      	ldr	r0, [pc, #360]	; (8008024 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8007eba:	f7f9 ff82 	bl	8001dc2 <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec4:	d304      	bcc.n	8007ed0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 8007ec6:	f240 3161 	movw	r1, #865	; 0x361
 8007eca:	4856      	ldr	r0, [pc, #344]	; (8008024 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8007ecc:	f7f9 ff79 	bl	8001dc2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	7f1b      	ldrb	r3, [r3, #28]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_RTCEx_SetWakeUpTimer_IT+0x5c>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e09e      	b.n	800801a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	22ca      	movs	r2, #202	; 0xca
 8007eee:	625a      	str	r2, [r3, #36]	; 0x24
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2253      	movs	r2, #83	; 0x53
 8007ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d01e      	beq.n	8007f44 <HAL_RTCEx_SetWakeUpTimer_IT+0xc4>
  {
    tickstart = HAL_GetTick();
 8007f06:	f7fa faeb 	bl	80024e0 <HAL_GetTick>
 8007f0a:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8007f0c:	e013      	b.n	8007f36 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f0e:	f7fa fae7 	bl	80024e0 <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f1c:	d90b      	bls.n	8007f36 <HAL_RTCEx_SetWakeUpTimer_IT+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	22ff      	movs	r2, #255	; 0xff
 8007f24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2203      	movs	r2, #3
 8007f2a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e071      	b.n	800801a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e4      	bne.n	8007f0e <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689a      	ldr	r2, [r3, #8]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f52:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007f64:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007f66:	f7fa fabb 	bl	80024e0 <HAL_GetTick>
 8007f6a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007f6c:	e013      	b.n	8007f96 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f6e:	f7fa fab7 	bl	80024e0 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f7c:	d90b      	bls.n	8007f96 <HAL_RTCEx_SetWakeUpTimer_IT+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	22ff      	movs	r2, #255	; 0xff
 8007f84:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2203      	movs	r2, #3
 8007f8a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e041      	b.n	800801a <HAL_RTCEx_SetWakeUpTimer_IT+0x19a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f003 0304 	and.w	r3, r3, #4
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0e4      	beq.n	8007f6e <HAL_RTCEx_SetWakeUpTimer_IT+0xee>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0207 	bic.w	r2, r2, #7
 8007fba:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6899      	ldr	r1, [r3, #8]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007fcc:	4b16      	ldr	r3, [pc, #88]	; (8008028 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a15      	ldr	r2, [pc, #84]	; (8008028 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fd6:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007fd8:	4b13      	ldr	r3, [pc, #76]	; (8008028 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	4a12      	ldr	r2, [pc, #72]	; (8008028 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fe2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689a      	ldr	r2, [r3, #8]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ff2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689a      	ldr	r2, [r3, #8]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008002:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	22ff      	movs	r2, #255	; 0xff
 800800a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	0800c388 	.word	0x0800c388
 8008028:	40010400 	.word	0x40010400

0800802c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	7f1b      	ldrb	r3, [r3, #28]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8008040:	2302      	movs	r3, #2
 8008042:	e047      	b.n	80080d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2202      	movs	r2, #2
 800804e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	22ca      	movs	r2, #202	; 0xca
 8008056:	625a      	str	r2, [r3, #36]	; 0x24
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2253      	movs	r2, #83	; 0x53
 800805e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800806e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800807e:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8008080:	f7fa fa2e 	bl	80024e0 <HAL_GetTick>
 8008084:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8008086:	e013      	b.n	80080b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008088:	f7fa fa2a 	bl	80024e0 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008096:	d90b      	bls.n	80080b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	22ff      	movs	r2, #255	; 0xff
 800809e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2203      	movs	r2, #3
 80080a4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e011      	b.n	80080d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0e4      	beq.n	8008088 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	22ff      	movs	r2, #255	; 0xff
 80080c4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00b      	beq.n	800810a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7f9 f9f6 	bl	80014e4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008108:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800810a:	4b05      	ldr	r3, [pc, #20]	; (8008120 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800810c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008110:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	775a      	strb	r2, [r3, #29]
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	40010400 	.word	0x40010400

08008124 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e0be      	b.n	80082c8 <HAL_TIM_Base_Init+0x190>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a60      	ldr	r2, [pc, #384]	; (80082d0 <HAL_TIM_Base_Init+0x198>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d036      	beq.n	80081c2 <HAL_TIM_Base_Init+0x8a>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815c:	d031      	beq.n	80081c2 <HAL_TIM_Base_Init+0x8a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a5c      	ldr	r2, [pc, #368]	; (80082d4 <HAL_TIM_Base_Init+0x19c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d02c      	beq.n	80081c2 <HAL_TIM_Base_Init+0x8a>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a5a      	ldr	r2, [pc, #360]	; (80082d8 <HAL_TIM_Base_Init+0x1a0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d027      	beq.n	80081c2 <HAL_TIM_Base_Init+0x8a>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a59      	ldr	r2, [pc, #356]	; (80082dc <HAL_TIM_Base_Init+0x1a4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d022      	beq.n	80081c2 <HAL_TIM_Base_Init+0x8a>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a57      	ldr	r2, [pc, #348]	; (80082e0 <HAL_TIM_Base_Init+0x1a8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d01d      	beq.n	80081c2 <HAL_TIM_Base_Init+0x8a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a56      	ldr	r2, [pc, #344]	; (80082e4 <HAL_TIM_Base_Init+0x1ac>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d018      	beq.n	80081c2 <HAL_TIM_Base_Init+0x8a>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a54      	ldr	r2, [pc, #336]	; (80082e8 <HAL_TIM_Base_Init+0x1b0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <HAL_TIM_Base_Init+0x8a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a53      	ldr	r2, [pc, #332]	; (80082ec <HAL_TIM_Base_Init+0x1b4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00e      	beq.n	80081c2 <HAL_TIM_Base_Init+0x8a>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a51      	ldr	r2, [pc, #324]	; (80082f0 <HAL_TIM_Base_Init+0x1b8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d009      	beq.n	80081c2 <HAL_TIM_Base_Init+0x8a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a50      	ldr	r2, [pc, #320]	; (80082f4 <HAL_TIM_Base_Init+0x1bc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d004      	beq.n	80081c2 <HAL_TIM_Base_Init+0x8a>
 80081b8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80081bc:	484e      	ldr	r0, [pc, #312]	; (80082f8 <HAL_TIM_Base_Init+0x1c0>)
 80081be:	f7f9 fe00 	bl	8001dc2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d014      	beq.n	80081f4 <HAL_TIM_Base_Init+0xbc>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b10      	cmp	r3, #16
 80081d0:	d010      	beq.n	80081f4 <HAL_TIM_Base_Init+0xbc>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	2b20      	cmp	r3, #32
 80081d8:	d00c      	beq.n	80081f4 <HAL_TIM_Base_Init+0xbc>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d008      	beq.n	80081f4 <HAL_TIM_Base_Init+0xbc>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b60      	cmp	r3, #96	; 0x60
 80081e8:	d004      	beq.n	80081f4 <HAL_TIM_Base_Init+0xbc>
 80081ea:	f240 111b 	movw	r1, #283	; 0x11b
 80081ee:	4842      	ldr	r0, [pc, #264]	; (80082f8 <HAL_TIM_Base_Init+0x1c0>)
 80081f0:	f7f9 fde7 	bl	8001dc2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00e      	beq.n	800821a <HAL_TIM_Base_Init+0xe2>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008204:	d009      	beq.n	800821a <HAL_TIM_Base_Init+0xe2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800820e:	d004      	beq.n	800821a <HAL_TIM_Base_Init+0xe2>
 8008210:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8008214:	4838      	ldr	r0, [pc, #224]	; (80082f8 <HAL_TIM_Base_Init+0x1c0>)
 8008216:	f7f9 fdd4 	bl	8001dc2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d008      	beq.n	8008234 <HAL_TIM_Base_Init+0xfc>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	2b80      	cmp	r3, #128	; 0x80
 8008228:	d004      	beq.n	8008234 <HAL_TIM_Base_Init+0xfc>
 800822a:	f240 111d 	movw	r1, #285	; 0x11d
 800822e:	4832      	ldr	r0, [pc, #200]	; (80082f8 <HAL_TIM_Base_Init+0x1c0>)
 8008230:	f7f9 fdc7 	bl	8001dc2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d106      	bne.n	800824e <HAL_TIM_Base_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7fa f809 	bl	8002260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2202      	movs	r2, #2
 8008252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3304      	adds	r3, #4
 800825e:	4619      	mov	r1, r3
 8008260:	4610      	mov	r0, r2
 8008262:	f000 fa49 	bl	80086f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	40012c00 	.word	0x40012c00
 80082d4:	40000400 	.word	0x40000400
 80082d8:	40000800 	.word	0x40000800
 80082dc:	40001000 	.word	0x40001000
 80082e0:	40001400 	.word	0x40001400
 80082e4:	40013400 	.word	0x40013400
 80082e8:	40014000 	.word	0x40014000
 80082ec:	40014400 	.word	0x40014400
 80082f0:	40014800 	.word	0x40014800
 80082f4:	40015000 	.word	0x40015000
 80082f8:	0800c3c4 	.word	0x0800c3c4

080082fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a46      	ldr	r2, [pc, #280]	; (8008424 <HAL_TIM_Base_Start+0x128>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d036      	beq.n	800837c <HAL_TIM_Base_Start+0x80>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008316:	d031      	beq.n	800837c <HAL_TIM_Base_Start+0x80>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a42      	ldr	r2, [pc, #264]	; (8008428 <HAL_TIM_Base_Start+0x12c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d02c      	beq.n	800837c <HAL_TIM_Base_Start+0x80>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a41      	ldr	r2, [pc, #260]	; (800842c <HAL_TIM_Base_Start+0x130>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d027      	beq.n	800837c <HAL_TIM_Base_Start+0x80>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a3f      	ldr	r2, [pc, #252]	; (8008430 <HAL_TIM_Base_Start+0x134>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d022      	beq.n	800837c <HAL_TIM_Base_Start+0x80>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a3e      	ldr	r2, [pc, #248]	; (8008434 <HAL_TIM_Base_Start+0x138>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d01d      	beq.n	800837c <HAL_TIM_Base_Start+0x80>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a3c      	ldr	r2, [pc, #240]	; (8008438 <HAL_TIM_Base_Start+0x13c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d018      	beq.n	800837c <HAL_TIM_Base_Start+0x80>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a3b      	ldr	r2, [pc, #236]	; (800843c <HAL_TIM_Base_Start+0x140>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d013      	beq.n	800837c <HAL_TIM_Base_Start+0x80>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a39      	ldr	r2, [pc, #228]	; (8008440 <HAL_TIM_Base_Start+0x144>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00e      	beq.n	800837c <HAL_TIM_Base_Start+0x80>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a38      	ldr	r2, [pc, #224]	; (8008444 <HAL_TIM_Base_Start+0x148>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d009      	beq.n	800837c <HAL_TIM_Base_Start+0x80>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a36      	ldr	r2, [pc, #216]	; (8008448 <HAL_TIM_Base_Start+0x14c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <HAL_TIM_Base_Start+0x80>
 8008372:	f240 119b 	movw	r1, #411	; 0x19b
 8008376:	4835      	ldr	r0, [pc, #212]	; (800844c <HAL_TIM_Base_Start+0x150>)
 8008378:	f7f9 fd23 	bl	8001dc2 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b01      	cmp	r3, #1
 8008386:	d001      	beq.n	800838c <HAL_TIM_Base_Start+0x90>
  {
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e047      	b.n	800841c <HAL_TIM_Base_Start+0x120>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a22      	ldr	r2, [pc, #136]	; (8008424 <HAL_TIM_Base_Start+0x128>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d01d      	beq.n	80083da <HAL_TIM_Base_Start+0xde>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a6:	d018      	beq.n	80083da <HAL_TIM_Base_Start+0xde>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1e      	ldr	r2, [pc, #120]	; (8008428 <HAL_TIM_Base_Start+0x12c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d013      	beq.n	80083da <HAL_TIM_Base_Start+0xde>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1d      	ldr	r2, [pc, #116]	; (800842c <HAL_TIM_Base_Start+0x130>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00e      	beq.n	80083da <HAL_TIM_Base_Start+0xde>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a1d      	ldr	r2, [pc, #116]	; (8008438 <HAL_TIM_Base_Start+0x13c>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d009      	beq.n	80083da <HAL_TIM_Base_Start+0xde>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1c      	ldr	r2, [pc, #112]	; (800843c <HAL_TIM_Base_Start+0x140>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d004      	beq.n	80083da <HAL_TIM_Base_Start+0xde>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a1c      	ldr	r2, [pc, #112]	; (8008448 <HAL_TIM_Base_Start+0x14c>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d115      	bne.n	8008406 <HAL_TIM_Base_Start+0x10a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <HAL_TIM_Base_Start+0x154>)
 80083e2:	4013      	ands	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b06      	cmp	r3, #6
 80083ea:	d015      	beq.n	8008418 <HAL_TIM_Base_Start+0x11c>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f2:	d011      	beq.n	8008418 <HAL_TIM_Base_Start+0x11c>
    {
      __HAL_TIM_ENABLE(htim);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0201 	orr.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008404:	e008      	b.n	8008418 <HAL_TIM_Base_Start+0x11c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f042 0201 	orr.w	r2, r2, #1
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	e000      	b.n	800841a <HAL_TIM_Base_Start+0x11e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008418:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	40012c00 	.word	0x40012c00
 8008428:	40000400 	.word	0x40000400
 800842c:	40000800 	.word	0x40000800
 8008430:	40001000 	.word	0x40001000
 8008434:	40001400 	.word	0x40001400
 8008438:	40013400 	.word	0x40013400
 800843c:	40014000 	.word	0x40014000
 8008440:	40014400 	.word	0x40014400
 8008444:	40014800 	.word	0x40014800
 8008448:	40015000 	.word	0x40015000
 800844c:	0800c3c4 	.word	0x0800c3c4
 8008450:	00010007 	.word	0x00010007

08008454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b02      	cmp	r3, #2
 8008468:	d122      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b02      	cmp	r3, #2
 8008476:	d11b      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f06f 0202 	mvn.w	r2, #2
 8008480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f90f 	bl	80086ba <HAL_TIM_IC_CaptureCallback>
 800849c:	e005      	b.n	80084aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f901 	bl	80086a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f912 	bl	80086ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d122      	bne.n	8008504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	d11b      	bne.n	8008504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0204 	mvn.w	r2, #4
 80084d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2202      	movs	r2, #2
 80084da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f8e5 	bl	80086ba <HAL_TIM_IC_CaptureCallback>
 80084f0:	e005      	b.n	80084fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f8d7 	bl	80086a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f8e8 	bl	80086ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	f003 0308 	and.w	r3, r3, #8
 800850e:	2b08      	cmp	r3, #8
 8008510:	d122      	bne.n	8008558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	2b08      	cmp	r3, #8
 800851e:	d11b      	bne.n	8008558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f06f 0208 	mvn.w	r2, #8
 8008528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2204      	movs	r2, #4
 800852e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f8bb 	bl	80086ba <HAL_TIM_IC_CaptureCallback>
 8008544:	e005      	b.n	8008552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f8ad 	bl	80086a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f8be 	bl	80086ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f003 0310 	and.w	r3, r3, #16
 8008562:	2b10      	cmp	r3, #16
 8008564:	d122      	bne.n	80085ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f003 0310 	and.w	r3, r3, #16
 8008570:	2b10      	cmp	r3, #16
 8008572:	d11b      	bne.n	80085ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f06f 0210 	mvn.w	r2, #16
 800857c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2208      	movs	r2, #8
 8008582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f891 	bl	80086ba <HAL_TIM_IC_CaptureCallback>
 8008598:	e005      	b.n	80085a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f883 	bl	80086a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f894 	bl	80086ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d10e      	bne.n	80085d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d107      	bne.n	80085d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f06f 0201 	mvn.w	r2, #1
 80085d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f85d 	bl	8008692 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e2:	2b80      	cmp	r3, #128	; 0x80
 80085e4:	d10e      	bne.n	8008604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f0:	2b80      	cmp	r3, #128	; 0x80
 80085f2:	d107      	bne.n	8008604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fa70 	bl	8008ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800860e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008612:	d10e      	bne.n	8008632 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861e:	2b80      	cmp	r3, #128	; 0x80
 8008620:	d107      	bne.n	8008632 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800862a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fa63 	bl	8008af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863c:	2b40      	cmp	r3, #64	; 0x40
 800863e:	d10e      	bne.n	800865e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864a:	2b40      	cmp	r3, #64	; 0x40
 800864c:	d107      	bne.n	800865e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f842 	bl	80086e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b20      	cmp	r3, #32
 800866a:	d10e      	bne.n	800868a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	2b20      	cmp	r3, #32
 8008678:	d107      	bne.n	800868a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f06f 0220 	mvn.w	r2, #32
 8008682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fa23 	bl	8008ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800869a:	bf00      	nop
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086ae:	bf00      	nop
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086c2:	bf00      	nop
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a42      	ldr	r2, [pc, #264]	; (8008814 <TIM_Base_SetConfig+0x11c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d013      	beq.n	8008738 <TIM_Base_SetConfig+0x40>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008716:	d00f      	beq.n	8008738 <TIM_Base_SetConfig+0x40>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a3f      	ldr	r2, [pc, #252]	; (8008818 <TIM_Base_SetConfig+0x120>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d00b      	beq.n	8008738 <TIM_Base_SetConfig+0x40>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a3e      	ldr	r2, [pc, #248]	; (800881c <TIM_Base_SetConfig+0x124>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d007      	beq.n	8008738 <TIM_Base_SetConfig+0x40>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a3d      	ldr	r2, [pc, #244]	; (8008820 <TIM_Base_SetConfig+0x128>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d003      	beq.n	8008738 <TIM_Base_SetConfig+0x40>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a3c      	ldr	r2, [pc, #240]	; (8008824 <TIM_Base_SetConfig+0x12c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d108      	bne.n	800874a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a31      	ldr	r2, [pc, #196]	; (8008814 <TIM_Base_SetConfig+0x11c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d01f      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008758:	d01b      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a2e      	ldr	r2, [pc, #184]	; (8008818 <TIM_Base_SetConfig+0x120>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d017      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a2d      	ldr	r2, [pc, #180]	; (800881c <TIM_Base_SetConfig+0x124>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d013      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a2c      	ldr	r2, [pc, #176]	; (8008820 <TIM_Base_SetConfig+0x128>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00f      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a2c      	ldr	r2, [pc, #176]	; (8008828 <TIM_Base_SetConfig+0x130>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00b      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a2b      	ldr	r2, [pc, #172]	; (800882c <TIM_Base_SetConfig+0x134>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d007      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a2a      	ldr	r2, [pc, #168]	; (8008830 <TIM_Base_SetConfig+0x138>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d003      	beq.n	8008792 <TIM_Base_SetConfig+0x9a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a25      	ldr	r2, [pc, #148]	; (8008824 <TIM_Base_SetConfig+0x12c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d108      	bne.n	80087a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a12      	ldr	r2, [pc, #72]	; (8008814 <TIM_Base_SetConfig+0x11c>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d013      	beq.n	80087f8 <TIM_Base_SetConfig+0x100>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a13      	ldr	r2, [pc, #76]	; (8008820 <TIM_Base_SetConfig+0x128>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00f      	beq.n	80087f8 <TIM_Base_SetConfig+0x100>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a13      	ldr	r2, [pc, #76]	; (8008828 <TIM_Base_SetConfig+0x130>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d00b      	beq.n	80087f8 <TIM_Base_SetConfig+0x100>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a12      	ldr	r2, [pc, #72]	; (800882c <TIM_Base_SetConfig+0x134>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d007      	beq.n	80087f8 <TIM_Base_SetConfig+0x100>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a11      	ldr	r2, [pc, #68]	; (8008830 <TIM_Base_SetConfig+0x138>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d003      	beq.n	80087f8 <TIM_Base_SetConfig+0x100>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a0c      	ldr	r2, [pc, #48]	; (8008824 <TIM_Base_SetConfig+0x12c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d103      	bne.n	8008800 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	615a      	str	r2, [r3, #20]
}
 8008806:	bf00      	nop
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	40012c00 	.word	0x40012c00
 8008818:	40000400 	.word	0x40000400
 800881c:	40000800 	.word	0x40000800
 8008820:	40013400 	.word	0x40013400
 8008824:	40015000 	.word	0x40015000
 8008828:	40014000 	.word	0x40014000
 800882c:	40014400 	.word	0x40014400
 8008830:	40014800 	.word	0x40014800

08008834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a9a      	ldr	r2, [pc, #616]	; (8008aac <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d02c      	beq.n	80088a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008850:	d027      	beq.n	80088a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a96      	ldr	r2, [pc, #600]	; (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d022      	beq.n	80088a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a94      	ldr	r2, [pc, #592]	; (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d01d      	beq.n	80088a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a93      	ldr	r2, [pc, #588]	; (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d018      	beq.n	80088a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a91      	ldr	r2, [pc, #580]	; (8008abc <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d013      	beq.n	80088a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a90      	ldr	r2, [pc, #576]	; (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d00e      	beq.n	80088a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a8e      	ldr	r2, [pc, #568]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d009      	beq.n	80088a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a8d      	ldr	r2, [pc, #564]	; (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d004      	beq.n	80088a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008898:	f240 71b4 	movw	r1, #1972	; 0x7b4
 800889c:	488b      	ldr	r0, [pc, #556]	; (8008acc <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800889e:	f7f9 fa90 	bl	8001dc2 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d020      	beq.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b10      	cmp	r3, #16
 80088b0:	d01c      	beq.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b20      	cmp	r3, #32
 80088b8:	d018      	beq.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b30      	cmp	r3, #48	; 0x30
 80088c0:	d014      	beq.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b40      	cmp	r3, #64	; 0x40
 80088c8:	d010      	beq.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b50      	cmp	r3, #80	; 0x50
 80088d0:	d00c      	beq.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b60      	cmp	r3, #96	; 0x60
 80088d8:	d008      	beq.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b70      	cmp	r3, #112	; 0x70
 80088e0:	d004      	beq.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088e2:	f240 71b5 	movw	r1, #1973	; 0x7b5
 80088e6:	4879      	ldr	r0, [pc, #484]	; (8008acc <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 80088e8:	f7f9 fa6b 	bl	8001dc2 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	2b80      	cmp	r3, #128	; 0x80
 80088f2:	d008      	beq.n	8008906 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80088fc:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8008900:	4872      	ldr	r0, [pc, #456]	; (8008acc <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008902:	f7f9 fa5e 	bl	8001dc2 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800890c:	2b01      	cmp	r3, #1
 800890e:	d101      	bne.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008910:	2302      	movs	r3, #2
 8008912:	e0c6      	b.n	8008aa2 <HAL_TIMEx_MasterConfigSynchronization+0x26e>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a5c      	ldr	r2, [pc, #368]	; (8008aac <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d009      	beq.n	8008952 <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a5f      	ldr	r2, [pc, #380]	; (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d004      	beq.n	8008952 <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a5e      	ldr	r2, [pc, #376]	; (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d161      	bne.n	8008a16 <HAL_TIMEx_MasterConfigSynchronization+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d054      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008962:	d04f      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800896c:	d04a      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008976:	d045      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008980:	d040      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800898a:	d03b      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008994:	d036      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800899e:	d031      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80089a8:	d02c      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089b2:	d027      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80089bc:	d022      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80089c6:	d01d      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80089d0:	d018      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80089da:	d013      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80089e4:	d00e      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80089ee:	d009      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80089f8:	d004      	beq.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
 80089fa:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80089fe:	4833      	ldr	r0, [pc, #204]	; (8008acc <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8008a00:	f7f9 f9df 	bl	8001dc2 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a1d      	ldr	r2, [pc, #116]	; (8008aac <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d01d      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a42:	d018      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a19      	ldr	r2, [pc, #100]	; (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d013      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a18      	ldr	r2, [pc, #96]	; (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00e      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a18      	ldr	r2, [pc, #96]	; (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d009      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a17      	ldr	r2, [pc, #92]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d004      	beq.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0x242>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a15      	ldr	r2, [pc, #84]	; (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d10c      	bne.n	8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	40012c00 	.word	0x40012c00
 8008ab0:	40000400 	.word	0x40000400
 8008ab4:	40000800 	.word	0x40000800
 8008ab8:	40001000 	.word	0x40001000
 8008abc:	40001400 	.word	0x40001400
 8008ac0:	40013400 	.word	0x40013400
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40015000 	.word	0x40015000
 8008acc:	0800c3fc 	.word	0x0800c3fc

08008ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e077      	b.n	8008c0e <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d014      	beq.n	8008b50 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a3b      	ldr	r2, [pc, #236]	; (8008c18 <HAL_UART_Init+0x10c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d02d      	beq.n	8008b8c <HAL_UART_Init+0x80>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a39      	ldr	r2, [pc, #228]	; (8008c1c <HAL_UART_Init+0x110>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d028      	beq.n	8008b8c <HAL_UART_Init+0x80>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a38      	ldr	r2, [pc, #224]	; (8008c20 <HAL_UART_Init+0x114>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d023      	beq.n	8008b8c <HAL_UART_Init+0x80>
 8008b44:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008b48:	4836      	ldr	r0, [pc, #216]	; (8008c24 <HAL_UART_Init+0x118>)
 8008b4a:	f7f9 f93a 	bl	8001dc2 <assert_failed>
 8008b4e:	e01d      	b.n	8008b8c <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a30      	ldr	r2, [pc, #192]	; (8008c18 <HAL_UART_Init+0x10c>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d018      	beq.n	8008b8c <HAL_UART_Init+0x80>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a2f      	ldr	r2, [pc, #188]	; (8008c1c <HAL_UART_Init+0x110>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d013      	beq.n	8008b8c <HAL_UART_Init+0x80>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a2d      	ldr	r2, [pc, #180]	; (8008c20 <HAL_UART_Init+0x114>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d00e      	beq.n	8008b8c <HAL_UART_Init+0x80>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a2d      	ldr	r2, [pc, #180]	; (8008c28 <HAL_UART_Init+0x11c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d009      	beq.n	8008b8c <HAL_UART_Init+0x80>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a2b      	ldr	r2, [pc, #172]	; (8008c2c <HAL_UART_Init+0x120>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d004      	beq.n	8008b8c <HAL_UART_Init+0x80>
 8008b82:	f240 1131 	movw	r1, #305	; 0x131
 8008b86:	4827      	ldr	r0, [pc, #156]	; (8008c24 <HAL_UART_Init+0x118>)
 8008b88:	f7f9 f91b 	bl	8001dc2 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d106      	bne.n	8008ba2 <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7f9 fbd1 	bl	8002344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2224      	movs	r2, #36	; 0x24
 8008ba6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f022 0201 	bic.w	r2, r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fbe9 	bl	8009390 <UART_SetConfig>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d101      	bne.n	8008bc8 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e022      	b.n	8008c0e <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fe41 	bl	8009858 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008be4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689a      	ldr	r2, [r3, #8]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bf4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f042 0201 	orr.w	r2, r2, #1
 8008c04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 ff74 	bl	8009af4 <UART_CheckIdleState>
 8008c0c:	4603      	mov	r3, r0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	40013800 	.word	0x40013800
 8008c1c:	40004400 	.word	0x40004400
 8008c20:	40004800 	.word	0x40004800
 8008c24:	0800c438 	.word	0x0800c438
 8008c28:	40004c00 	.word	0x40004c00
 8008c2c:	40005000 	.word	0x40005000

08008c30 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b08b      	sub	sp, #44	; 0x2c
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	d156      	bne.n	8008cf4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <HAL_UART_Transmit_IT+0x22>
 8008c4c:	88fb      	ldrh	r3, [r7, #6]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e04f      	b.n	8008cf6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d101      	bne.n	8008c64 <HAL_UART_Transmit_IT+0x34>
 8008c60:	2302      	movs	r3, #2
 8008c62:	e048      	b.n	8008cf6 <HAL_UART_Transmit_IT+0xc6>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	88fa      	ldrh	r2, [r7, #6]
 8008c76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	88fa      	ldrh	r2, [r7, #6]
 8008c7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2221      	movs	r2, #33	; 0x21
 8008c94:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c9e:	d107      	bne.n	8008cb0 <HAL_UART_Transmit_IT+0x80>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d103      	bne.n	8008cb0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4a16      	ldr	r2, [pc, #88]	; (8008d04 <HAL_UART_Transmit_IT+0xd4>)
 8008cac:	669a      	str	r2, [r3, #104]	; 0x68
 8008cae:	e002      	b.n	8008cb6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a15      	ldr	r2, [pc, #84]	; (8008d08 <HAL_UART_Transmit_IT+0xd8>)
 8008cb4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	e853 3f00 	ldrex	r3, [r3]
 8008cca:	613b      	str	r3, [r7, #16]
   return(result);
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	623b      	str	r3, [r7, #32]
 8008cde:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce0:	69f9      	ldr	r1, [r7, #28]
 8008ce2:	6a3a      	ldr	r2, [r7, #32]
 8008ce4:	e841 2300 	strex	r3, r2, [r1]
 8008ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e6      	bne.n	8008cbe <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	e000      	b.n	8008cf6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8008cf4:	2302      	movs	r3, #2
  }
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	372c      	adds	r7, #44	; 0x2c
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	0800a013 	.word	0x0800a013
 8008d08:	08009f5b 	.word	0x08009f5b

08008d0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08a      	sub	sp, #40	; 0x28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4613      	mov	r3, r2
 8008d18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d1e:	2b20      	cmp	r3, #32
 8008d20:	d13d      	bne.n	8008d9e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d002      	beq.n	8008d2e <HAL_UART_Receive_IT+0x22>
 8008d28:	88fb      	ldrh	r3, [r7, #6]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e036      	b.n	8008da0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d101      	bne.n	8008d40 <HAL_UART_Receive_IT+0x34>
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e02f      	b.n	8008da0 <HAL_UART_Receive_IT+0x94>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d018      	beq.n	8008d8e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	623b      	str	r3, [r7, #32]
 8008d7c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	69f9      	ldr	r1, [r7, #28]
 8008d80:	6a3a      	ldr	r2, [r7, #32]
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e6      	bne.n	8008d5c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d8e:	88fb      	ldrh	r3, [r7, #6]
 8008d90:	461a      	mov	r2, r3
 8008d92:	68b9      	ldr	r1, [r7, #8]
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 ffbb 	bl	8009d10 <UART_Start_Receive_IT>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	e000      	b.n	8008da0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d9e:	2302      	movs	r3, #2
  }
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3728      	adds	r7, #40	; 0x28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b0ba      	sub	sp, #232	; 0xe8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008dce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008dd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008ddc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d115      	bne.n	8008e10 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00f      	beq.n	8008e10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d009      	beq.n	8008e10 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 82a3 	beq.w	800934c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
      }
      return;
 8008e0e:	e29d      	b.n	800934c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 8117 	beq.w	8009048 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008e26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008e2a:	4b85      	ldr	r3, [pc, #532]	; (8009040 <HAL_UART_IRQHandler+0x298>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 810a 	beq.w	8009048 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d011      	beq.n	8008e64 <HAL_UART_IRQHandler+0xbc>
 8008e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2201      	movs	r2, #1
 8008e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e5a:	f043 0201 	orr.w	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e68:	f003 0302 	and.w	r3, r3, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d011      	beq.n	8008e94 <HAL_UART_IRQHandler+0xec>
 8008e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2202      	movs	r2, #2
 8008e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e8a:	f043 0204 	orr.w	r2, r3, #4
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e98:	f003 0304 	and.w	r3, r3, #4
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d011      	beq.n	8008ec4 <HAL_UART_IRQHandler+0x11c>
 8008ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00b      	beq.n	8008ec4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2204      	movs	r2, #4
 8008eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eba:	f043 0202 	orr.w	r2, r3, #2
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec8:	f003 0308 	and.w	r3, r3, #8
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d017      	beq.n	8008f00 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ed4:	f003 0320 	and.w	r3, r3, #32
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d105      	bne.n	8008ee8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ee0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00b      	beq.n	8008f00 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2208      	movs	r2, #8
 8008eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ef6:	f043 0208 	orr.w	r2, r3, #8
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d012      	beq.n	8008f32 <HAL_UART_IRQHandler+0x18a>
 8008f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00c      	beq.n	8008f32 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f28:	f043 0220 	orr.w	r2, r3, #32
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 8209 	beq.w	8009350 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00d      	beq.n	8008f66 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f4e:	f003 0320 	and.w	r3, r3, #32
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d007      	beq.n	8008f66 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7a:	2b40      	cmp	r3, #64	; 0x40
 8008f7c:	d005      	beq.n	8008f8a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d04f      	beq.n	800902a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 ff6c 	bl	8009e68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9a:	2b40      	cmp	r3, #64	; 0x40
 8008f9c:	d141      	bne.n	8009022 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fac:	e853 3f00 	ldrex	r3, [r3]
 8008fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3308      	adds	r3, #8
 8008fc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008fca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008fd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1d9      	bne.n	8008f9e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d013      	beq.n	800901a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff6:	4a13      	ldr	r2, [pc, #76]	; (8009044 <HAL_UART_IRQHandler+0x29c>)
 8008ff8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7f9 fc17 	bl	8002832 <HAL_DMA_Abort_IT>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d017      	beq.n	800903a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800900e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009018:	e00f      	b.n	800903a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f9a2 	bl	8009364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009020:	e00b      	b.n	800903a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f99e 	bl	8009364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009028:	e007      	b.n	800903a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f99a 	bl	8009364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009038:	e18a      	b.n	8009350 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800903a:	bf00      	nop
    return;
 800903c:	e188      	b.n	8009350 <HAL_UART_IRQHandler+0x5a8>
 800903e:	bf00      	nop
 8009040:	04000120 	.word	0x04000120
 8009044:	08009f2f 	.word	0x08009f2f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800904c:	2b01      	cmp	r3, #1
 800904e:	f040 8143 	bne.w	80092d8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009056:	f003 0310 	and.w	r3, r3, #16
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 813c 	beq.w	80092d8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009064:	f003 0310 	and.w	r3, r3, #16
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 8135 	beq.w	80092d8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2210      	movs	r2, #16
 8009074:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	f040 80b1 	bne.w	80091e8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009092:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 815c 	beq.w	8009354 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090a6:	429a      	cmp	r2, r3
 80090a8:	f080 8154 	bcs.w	8009354 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	2b20      	cmp	r3, #32
 80090be:	f000 8085 	beq.w	80091cc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80090d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090fc:	e841 2300 	strex	r3, r2, [r1]
 8009100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1da      	bne.n	80090c2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3308      	adds	r3, #8
 8009112:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009116:	e853 3f00 	ldrex	r3, [r3]
 800911a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800911c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800911e:	f023 0301 	bic.w	r3, r3, #1
 8009122:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3308      	adds	r3, #8
 800912c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009130:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009134:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009138:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009142:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e1      	bne.n	800910c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3308      	adds	r3, #8
 800914e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009152:	e853 3f00 	ldrex	r3, [r3]
 8009156:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800915a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800915e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3308      	adds	r3, #8
 8009168:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800916c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800916e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009172:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800917a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e3      	bne.n	8009148 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2220      	movs	r2, #32
 8009184:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800919a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800919c:	f023 0310 	bic.w	r3, r3, #16
 80091a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	461a      	mov	r2, r3
 80091aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80091b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e4      	bne.n	800918c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7f9 fafa 	bl	80027c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091d8:	b29b      	uxth	r3, r3
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	b29b      	uxth	r3, r3
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f8c9 	bl	8009378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091e6:	e0b5      	b.n	8009354 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009202:	b29b      	uxth	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 80a7 	beq.w	8009358 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800920a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 80a2 	beq.w	8009358 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009236:	647b      	str	r3, [r7, #68]	; 0x44
 8009238:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800923c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e4      	bne.n	8009214 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3308      	adds	r3, #8
 8009250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	623b      	str	r3, [r7, #32]
   return(result);
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	f023 0301 	bic.w	r3, r3, #1
 8009260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3308      	adds	r3, #8
 800926a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800926e:	633a      	str	r2, [r7, #48]	; 0x30
 8009270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e3      	bne.n	800924a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f023 0310 	bic.w	r3, r3, #16
 80092a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80092b6:	61fb      	str	r3, [r7, #28]
 80092b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	69b9      	ldr	r1, [r7, #24]
 80092bc:	69fa      	ldr	r2, [r7, #28]
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	617b      	str	r3, [r7, #20]
   return(result);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e4      	bne.n	8009294 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f851 	bl	8009378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092d6:	e03f      	b.n	8009358 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00e      	beq.n	8009302 <HAL_UART_IRQHandler+0x55a>
 80092e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d008      	beq.n	8009302 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80092f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 f86f 	bl	800a3de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009300:	e02d      	b.n	800935e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00e      	beq.n	800932c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800930e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009316:	2b00      	cmp	r3, #0
 8009318:	d008      	beq.n	800932c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800931e:	2b00      	cmp	r3, #0
 8009320:	d01c      	beq.n	800935c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	4798      	blx	r3
    }
    return;
 800932a:	e017      	b.n	800935c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800932c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d012      	beq.n	800935e <HAL_UART_IRQHandler+0x5b6>
 8009338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800933c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00c      	beq.n	800935e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fec4 	bl	800a0d2 <UART_EndTransmit_IT>
    return;
 800934a:	e008      	b.n	800935e <HAL_UART_IRQHandler+0x5b6>
      return;
 800934c:	bf00      	nop
 800934e:	e006      	b.n	800935e <HAL_UART_IRQHandler+0x5b6>
    return;
 8009350:	bf00      	nop
 8009352:	e004      	b.n	800935e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009354:	bf00      	nop
 8009356:	e002      	b.n	800935e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009358:	bf00      	nop
 800935a:	e000      	b.n	800935e <HAL_UART_IRQHandler+0x5b6>
    return;
 800935c:	bf00      	nop
  }

}
 800935e:	37e8      	adds	r7, #232	; 0xe8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	4a9a      	ldr	r2, [pc, #616]	; (800960c <UART_SetConfig+0x27c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d904      	bls.n	80093b0 <UART_SetConfig+0x20>
 80093a6:	f640 313f 	movw	r1, #2879	; 0xb3f
 80093aa:	4899      	ldr	r0, [pc, #612]	; (8009610 <UART_SetConfig+0x280>)
 80093ac:	f7f8 fd09 	bl	8001dc2 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093b8:	d00d      	beq.n	80093d6 <UART_SetConfig+0x46>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <UART_SetConfig+0x46>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ca:	d004      	beq.n	80093d6 <UART_SetConfig+0x46>
 80093cc:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80093d0:	488f      	ldr	r0, [pc, #572]	; (8009610 <UART_SetConfig+0x280>)
 80093d2:	f7f8 fcf6 	bl	8001dc2 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093de:	d012      	beq.n	8009406 <UART_SetConfig+0x76>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00e      	beq.n	8009406 <UART_SetConfig+0x76>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093f0:	d009      	beq.n	8009406 <UART_SetConfig+0x76>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093fa:	d004      	beq.n	8009406 <UART_SetConfig+0x76>
 80093fc:	f640 3141 	movw	r1, #2881	; 0xb41
 8009400:	4883      	ldr	r0, [pc, #524]	; (8009610 <UART_SetConfig+0x280>)
 8009402:	f7f8 fcde 	bl	8001dc2 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d009      	beq.n	8009422 <UART_SetConfig+0x92>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009416:	d004      	beq.n	8009422 <UART_SetConfig+0x92>
 8009418:	f640 3142 	movw	r1, #2882	; 0xb42
 800941c:	487c      	ldr	r0, [pc, #496]	; (8009610 <UART_SetConfig+0x280>)
 800941e:	f7f8 fcd0 	bl	8001dc2 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00e      	beq.n	8009448 <UART_SetConfig+0xb8>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009432:	d009      	beq.n	8009448 <UART_SetConfig+0xb8>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800943c:	d004      	beq.n	8009448 <UART_SetConfig+0xb8>
 800943e:	f640 3144 	movw	r1, #2884	; 0xb44
 8009442:	4873      	ldr	r0, [pc, #460]	; (8009610 <UART_SetConfig+0x280>)
 8009444:	f7f8 fcbd 	bl	8001dc2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	695b      	ldr	r3, [r3, #20]
 800944c:	f023 030c 	bic.w	r3, r3, #12
 8009450:	2b00      	cmp	r3, #0
 8009452:	d103      	bne.n	800945c <UART_SetConfig+0xcc>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d104      	bne.n	8009466 <UART_SetConfig+0xd6>
 800945c:	f640 3145 	movw	r1, #2885	; 0xb45
 8009460:	486b      	ldr	r0, [pc, #428]	; (8009610 <UART_SetConfig+0x280>)
 8009462:	f7f8 fcae 	bl	8001dc2 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d013      	beq.n	8009496 <UART_SetConfig+0x106>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009476:	d00e      	beq.n	8009496 <UART_SetConfig+0x106>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009480:	d009      	beq.n	8009496 <UART_SetConfig+0x106>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800948a:	d004      	beq.n	8009496 <UART_SetConfig+0x106>
 800948c:	f640 3146 	movw	r1, #2886	; 0xb46
 8009490:	485f      	ldr	r0, [pc, #380]	; (8009610 <UART_SetConfig+0x280>)
 8009492:	f7f8 fc96 	bl	8001dc2 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d009      	beq.n	80094b2 <UART_SetConfig+0x122>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a6:	d004      	beq.n	80094b2 <UART_SetConfig+0x122>
 80094a8:	f640 3147 	movw	r1, #2887	; 0xb47
 80094ac:	4858      	ldr	r0, [pc, #352]	; (8009610 <UART_SetConfig+0x280>)
 80094ae:	f7f8 fc88 	bl	8001dc2 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	689a      	ldr	r2, [r3, #8]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	431a      	orrs	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	431a      	orrs	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	4b50      	ldr	r3, [pc, #320]	; (8009614 <UART_SetConfig+0x284>)
 80094d2:	4013      	ands	r3, r2
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	6812      	ldr	r2, [r2, #0]
 80094d8:	6979      	ldr	r1, [r7, #20]
 80094da:	430b      	orrs	r3, r1
 80094dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68da      	ldr	r2, [r3, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	4313      	orrs	r3, r2
 8009502:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	430a      	orrs	r2, r1
 8009516:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a3e      	ldr	r2, [pc, #248]	; (8009618 <UART_SetConfig+0x288>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d11f      	bne.n	8009562 <UART_SetConfig+0x1d2>
 8009522:	4b3e      	ldr	r3, [pc, #248]	; (800961c <UART_SetConfig+0x28c>)
 8009524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	2b03      	cmp	r3, #3
 800952c:	d816      	bhi.n	800955c <UART_SetConfig+0x1cc>
 800952e:	a201      	add	r2, pc, #4	; (adr r2, 8009534 <UART_SetConfig+0x1a4>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	08009545 	.word	0x08009545
 8009538:	08009551 	.word	0x08009551
 800953c:	08009557 	.word	0x08009557
 8009540:	0800954b 	.word	0x0800954b
 8009544:	2301      	movs	r3, #1
 8009546:	77fb      	strb	r3, [r7, #31]
 8009548:	e0c4      	b.n	80096d4 <UART_SetConfig+0x344>
 800954a:	2302      	movs	r3, #2
 800954c:	77fb      	strb	r3, [r7, #31]
 800954e:	e0c1      	b.n	80096d4 <UART_SetConfig+0x344>
 8009550:	2304      	movs	r3, #4
 8009552:	77fb      	strb	r3, [r7, #31]
 8009554:	e0be      	b.n	80096d4 <UART_SetConfig+0x344>
 8009556:	2308      	movs	r3, #8
 8009558:	77fb      	strb	r3, [r7, #31]
 800955a:	e0bb      	b.n	80096d4 <UART_SetConfig+0x344>
 800955c:	2310      	movs	r3, #16
 800955e:	77fb      	strb	r3, [r7, #31]
 8009560:	e0b8      	b.n	80096d4 <UART_SetConfig+0x344>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a2e      	ldr	r2, [pc, #184]	; (8009620 <UART_SetConfig+0x290>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d124      	bne.n	80095b6 <UART_SetConfig+0x226>
 800956c:	4b2b      	ldr	r3, [pc, #172]	; (800961c <UART_SetConfig+0x28c>)
 800956e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009574:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009578:	d011      	beq.n	800959e <UART_SetConfig+0x20e>
 800957a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800957e:	d817      	bhi.n	80095b0 <UART_SetConfig+0x220>
 8009580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009584:	d011      	beq.n	80095aa <UART_SetConfig+0x21a>
 8009586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800958a:	d811      	bhi.n	80095b0 <UART_SetConfig+0x220>
 800958c:	2b00      	cmp	r3, #0
 800958e:	d003      	beq.n	8009598 <UART_SetConfig+0x208>
 8009590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009594:	d006      	beq.n	80095a4 <UART_SetConfig+0x214>
 8009596:	e00b      	b.n	80095b0 <UART_SetConfig+0x220>
 8009598:	2300      	movs	r3, #0
 800959a:	77fb      	strb	r3, [r7, #31]
 800959c:	e09a      	b.n	80096d4 <UART_SetConfig+0x344>
 800959e:	2302      	movs	r3, #2
 80095a0:	77fb      	strb	r3, [r7, #31]
 80095a2:	e097      	b.n	80096d4 <UART_SetConfig+0x344>
 80095a4:	2304      	movs	r3, #4
 80095a6:	77fb      	strb	r3, [r7, #31]
 80095a8:	e094      	b.n	80096d4 <UART_SetConfig+0x344>
 80095aa:	2308      	movs	r3, #8
 80095ac:	77fb      	strb	r3, [r7, #31]
 80095ae:	e091      	b.n	80096d4 <UART_SetConfig+0x344>
 80095b0:	2310      	movs	r3, #16
 80095b2:	77fb      	strb	r3, [r7, #31]
 80095b4:	e08e      	b.n	80096d4 <UART_SetConfig+0x344>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a1a      	ldr	r2, [pc, #104]	; (8009624 <UART_SetConfig+0x294>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d133      	bne.n	8009628 <UART_SetConfig+0x298>
 80095c0:	4b16      	ldr	r3, [pc, #88]	; (800961c <UART_SetConfig+0x28c>)
 80095c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80095c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80095cc:	d011      	beq.n	80095f2 <UART_SetConfig+0x262>
 80095ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80095d2:	d817      	bhi.n	8009604 <UART_SetConfig+0x274>
 80095d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095d8:	d011      	beq.n	80095fe <UART_SetConfig+0x26e>
 80095da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095de:	d811      	bhi.n	8009604 <UART_SetConfig+0x274>
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d003      	beq.n	80095ec <UART_SetConfig+0x25c>
 80095e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095e8:	d006      	beq.n	80095f8 <UART_SetConfig+0x268>
 80095ea:	e00b      	b.n	8009604 <UART_SetConfig+0x274>
 80095ec:	2300      	movs	r3, #0
 80095ee:	77fb      	strb	r3, [r7, #31]
 80095f0:	e070      	b.n	80096d4 <UART_SetConfig+0x344>
 80095f2:	2302      	movs	r3, #2
 80095f4:	77fb      	strb	r3, [r7, #31]
 80095f6:	e06d      	b.n	80096d4 <UART_SetConfig+0x344>
 80095f8:	2304      	movs	r3, #4
 80095fa:	77fb      	strb	r3, [r7, #31]
 80095fc:	e06a      	b.n	80096d4 <UART_SetConfig+0x344>
 80095fe:	2308      	movs	r3, #8
 8009600:	77fb      	strb	r3, [r7, #31]
 8009602:	e067      	b.n	80096d4 <UART_SetConfig+0x344>
 8009604:	2310      	movs	r3, #16
 8009606:	77fb      	strb	r3, [r7, #31]
 8009608:	e064      	b.n	80096d4 <UART_SetConfig+0x344>
 800960a:	bf00      	nop
 800960c:	00895440 	.word	0x00895440
 8009610:	0800c438 	.word	0x0800c438
 8009614:	efff69f3 	.word	0xefff69f3
 8009618:	40013800 	.word	0x40013800
 800961c:	40021000 	.word	0x40021000
 8009620:	40004400 	.word	0x40004400
 8009624:	40004800 	.word	0x40004800
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a86      	ldr	r2, [pc, #536]	; (8009848 <UART_SetConfig+0x4b8>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d124      	bne.n	800967c <UART_SetConfig+0x2ec>
 8009632:	4b86      	ldr	r3, [pc, #536]	; (800984c <UART_SetConfig+0x4bc>)
 8009634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009636:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800963a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800963e:	d011      	beq.n	8009664 <UART_SetConfig+0x2d4>
 8009640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009644:	d817      	bhi.n	8009676 <UART_SetConfig+0x2e6>
 8009646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800964a:	d011      	beq.n	8009670 <UART_SetConfig+0x2e0>
 800964c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009650:	d811      	bhi.n	8009676 <UART_SetConfig+0x2e6>
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <UART_SetConfig+0x2ce>
 8009656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800965a:	d006      	beq.n	800966a <UART_SetConfig+0x2da>
 800965c:	e00b      	b.n	8009676 <UART_SetConfig+0x2e6>
 800965e:	2300      	movs	r3, #0
 8009660:	77fb      	strb	r3, [r7, #31]
 8009662:	e037      	b.n	80096d4 <UART_SetConfig+0x344>
 8009664:	2302      	movs	r3, #2
 8009666:	77fb      	strb	r3, [r7, #31]
 8009668:	e034      	b.n	80096d4 <UART_SetConfig+0x344>
 800966a:	2304      	movs	r3, #4
 800966c:	77fb      	strb	r3, [r7, #31]
 800966e:	e031      	b.n	80096d4 <UART_SetConfig+0x344>
 8009670:	2308      	movs	r3, #8
 8009672:	77fb      	strb	r3, [r7, #31]
 8009674:	e02e      	b.n	80096d4 <UART_SetConfig+0x344>
 8009676:	2310      	movs	r3, #16
 8009678:	77fb      	strb	r3, [r7, #31]
 800967a:	e02b      	b.n	80096d4 <UART_SetConfig+0x344>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a73      	ldr	r2, [pc, #460]	; (8009850 <UART_SetConfig+0x4c0>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d124      	bne.n	80096d0 <UART_SetConfig+0x340>
 8009686:	4b71      	ldr	r3, [pc, #452]	; (800984c <UART_SetConfig+0x4bc>)
 8009688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800968e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009692:	d011      	beq.n	80096b8 <UART_SetConfig+0x328>
 8009694:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009698:	d817      	bhi.n	80096ca <UART_SetConfig+0x33a>
 800969a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800969e:	d011      	beq.n	80096c4 <UART_SetConfig+0x334>
 80096a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096a4:	d811      	bhi.n	80096ca <UART_SetConfig+0x33a>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <UART_SetConfig+0x322>
 80096aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096ae:	d006      	beq.n	80096be <UART_SetConfig+0x32e>
 80096b0:	e00b      	b.n	80096ca <UART_SetConfig+0x33a>
 80096b2:	2300      	movs	r3, #0
 80096b4:	77fb      	strb	r3, [r7, #31]
 80096b6:	e00d      	b.n	80096d4 <UART_SetConfig+0x344>
 80096b8:	2302      	movs	r3, #2
 80096ba:	77fb      	strb	r3, [r7, #31]
 80096bc:	e00a      	b.n	80096d4 <UART_SetConfig+0x344>
 80096be:	2304      	movs	r3, #4
 80096c0:	77fb      	strb	r3, [r7, #31]
 80096c2:	e007      	b.n	80096d4 <UART_SetConfig+0x344>
 80096c4:	2308      	movs	r3, #8
 80096c6:	77fb      	strb	r3, [r7, #31]
 80096c8:	e004      	b.n	80096d4 <UART_SetConfig+0x344>
 80096ca:	2310      	movs	r3, #16
 80096cc:	77fb      	strb	r3, [r7, #31]
 80096ce:	e001      	b.n	80096d4 <UART_SetConfig+0x344>
 80096d0:	2310      	movs	r3, #16
 80096d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096dc:	d15c      	bne.n	8009798 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80096de:	7ffb      	ldrb	r3, [r7, #31]
 80096e0:	2b08      	cmp	r3, #8
 80096e2:	d828      	bhi.n	8009736 <UART_SetConfig+0x3a6>
 80096e4:	a201      	add	r2, pc, #4	; (adr r2, 80096ec <UART_SetConfig+0x35c>)
 80096e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ea:	bf00      	nop
 80096ec:	08009711 	.word	0x08009711
 80096f0:	08009719 	.word	0x08009719
 80096f4:	08009721 	.word	0x08009721
 80096f8:	08009737 	.word	0x08009737
 80096fc:	08009727 	.word	0x08009727
 8009700:	08009737 	.word	0x08009737
 8009704:	08009737 	.word	0x08009737
 8009708:	08009737 	.word	0x08009737
 800970c:	0800972f 	.word	0x0800972f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009710:	f7fc feb6 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 8009714:	61b8      	str	r0, [r7, #24]
        break;
 8009716:	e013      	b.n	8009740 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009718:	f7fc fed4 	bl	80064c4 <HAL_RCC_GetPCLK2Freq>
 800971c:	61b8      	str	r0, [r7, #24]
        break;
 800971e:	e00f      	b.n	8009740 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009720:	4b4c      	ldr	r3, [pc, #304]	; (8009854 <UART_SetConfig+0x4c4>)
 8009722:	61bb      	str	r3, [r7, #24]
        break;
 8009724:	e00c      	b.n	8009740 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009726:	f7fc fe35 	bl	8006394 <HAL_RCC_GetSysClockFreq>
 800972a:	61b8      	str	r0, [r7, #24]
        break;
 800972c:	e008      	b.n	8009740 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800972e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009732:	61bb      	str	r3, [r7, #24]
        break;
 8009734:	e004      	b.n	8009740 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	77bb      	strb	r3, [r7, #30]
        break;
 800973e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d074      	beq.n	8009830 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	005a      	lsls	r2, r3, #1
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	085b      	lsrs	r3, r3, #1
 8009750:	441a      	add	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	fbb2 f3f3 	udiv	r3, r2, r3
 800975a:	b29b      	uxth	r3, r3
 800975c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b0f      	cmp	r3, #15
 8009762:	d916      	bls.n	8009792 <UART_SetConfig+0x402>
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800976a:	d212      	bcs.n	8009792 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	b29b      	uxth	r3, r3
 8009770:	f023 030f 	bic.w	r3, r3, #15
 8009774:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	085b      	lsrs	r3, r3, #1
 800977a:	b29b      	uxth	r3, r3
 800977c:	f003 0307 	and.w	r3, r3, #7
 8009780:	b29a      	uxth	r2, r3
 8009782:	89fb      	ldrh	r3, [r7, #14]
 8009784:	4313      	orrs	r3, r2
 8009786:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	89fa      	ldrh	r2, [r7, #14]
 800978e:	60da      	str	r2, [r3, #12]
 8009790:	e04e      	b.n	8009830 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	77bb      	strb	r3, [r7, #30]
 8009796:	e04b      	b.n	8009830 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009798:	7ffb      	ldrb	r3, [r7, #31]
 800979a:	2b08      	cmp	r3, #8
 800979c:	d827      	bhi.n	80097ee <UART_SetConfig+0x45e>
 800979e:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <UART_SetConfig+0x414>)
 80097a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a4:	080097c9 	.word	0x080097c9
 80097a8:	080097d1 	.word	0x080097d1
 80097ac:	080097d9 	.word	0x080097d9
 80097b0:	080097ef 	.word	0x080097ef
 80097b4:	080097df 	.word	0x080097df
 80097b8:	080097ef 	.word	0x080097ef
 80097bc:	080097ef 	.word	0x080097ef
 80097c0:	080097ef 	.word	0x080097ef
 80097c4:	080097e7 	.word	0x080097e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097c8:	f7fc fe5a 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 80097cc:	61b8      	str	r0, [r7, #24]
        break;
 80097ce:	e013      	b.n	80097f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097d0:	f7fc fe78 	bl	80064c4 <HAL_RCC_GetPCLK2Freq>
 80097d4:	61b8      	str	r0, [r7, #24]
        break;
 80097d6:	e00f      	b.n	80097f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097d8:	4b1e      	ldr	r3, [pc, #120]	; (8009854 <UART_SetConfig+0x4c4>)
 80097da:	61bb      	str	r3, [r7, #24]
        break;
 80097dc:	e00c      	b.n	80097f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097de:	f7fc fdd9 	bl	8006394 <HAL_RCC_GetSysClockFreq>
 80097e2:	61b8      	str	r0, [r7, #24]
        break;
 80097e4:	e008      	b.n	80097f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097ea:	61bb      	str	r3, [r7, #24]
        break;
 80097ec:	e004      	b.n	80097f8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	77bb      	strb	r3, [r7, #30]
        break;
 80097f6:	bf00      	nop
    }

    if (pclk != 0U)
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d018      	beq.n	8009830 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	085a      	lsrs	r2, r3, #1
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	441a      	add	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009810:	b29b      	uxth	r3, r3
 8009812:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	2b0f      	cmp	r3, #15
 8009818:	d908      	bls.n	800982c <UART_SetConfig+0x49c>
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009820:	d204      	bcs.n	800982c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	60da      	str	r2, [r3, #12]
 800982a:	e001      	b.n	8009830 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800983c:	7fbb      	ldrb	r3, [r7, #30]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	40004c00 	.word	0x40004c00
 800984c:	40021000 	.word	0x40021000
 8009850:	40005000 	.word	0x40005000
 8009854:	007a1200 	.word	0x007a1200

08009858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009864:	2bff      	cmp	r3, #255	; 0xff
 8009866:	d904      	bls.n	8009872 <UART_AdvFeatureConfig+0x1a>
 8009868:	f640 31c8 	movw	r1, #3016	; 0xbc8
 800986c:	489d      	ldr	r0, [pc, #628]	; (8009ae4 <UART_AdvFeatureConfig+0x28c>)
 800986e:	f7f8 faa8 	bl	8001dc2 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b00      	cmp	r3, #0
 800987c:	d018      	beq.n	80098b0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009882:	2b00      	cmp	r3, #0
 8009884:	d009      	beq.n	800989a <UART_AdvFeatureConfig+0x42>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800988e:	d004      	beq.n	800989a <UART_AdvFeatureConfig+0x42>
 8009890:	f640 31cd 	movw	r1, #3021	; 0xbcd
 8009894:	4893      	ldr	r0, [pc, #588]	; (8009ae4 <UART_AdvFeatureConfig+0x28c>)
 8009896:	f7f8 fa94 	bl	8001dc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	430a      	orrs	r2, r1
 80098ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	f003 0302 	and.w	r3, r3, #2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d018      	beq.n	80098ee <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d009      	beq.n	80098d8 <UART_AdvFeatureConfig+0x80>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098cc:	d004      	beq.n	80098d8 <UART_AdvFeatureConfig+0x80>
 80098ce:	f640 31d4 	movw	r1, #3028	; 0xbd4
 80098d2:	4884      	ldr	r0, [pc, #528]	; (8009ae4 <UART_AdvFeatureConfig+0x28c>)
 80098d4:	f7f8 fa75 	bl	8001dc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f2:	f003 0304 	and.w	r3, r3, #4
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d018      	beq.n	800992c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d009      	beq.n	8009916 <UART_AdvFeatureConfig+0xbe>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009906:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800990a:	d004      	beq.n	8009916 <UART_AdvFeatureConfig+0xbe>
 800990c:	f640 31db 	movw	r1, #3035	; 0xbdb
 8009910:	4874      	ldr	r0, [pc, #464]	; (8009ae4 <UART_AdvFeatureConfig+0x28c>)
 8009912:	f7f8 fa56 	bl	8001dc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	430a      	orrs	r2, r1
 800992a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009930:	f003 0308 	and.w	r3, r3, #8
 8009934:	2b00      	cmp	r3, #0
 8009936:	d018      	beq.n	800996a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993c:	2b00      	cmp	r3, #0
 800993e:	d009      	beq.n	8009954 <UART_AdvFeatureConfig+0xfc>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009948:	d004      	beq.n	8009954 <UART_AdvFeatureConfig+0xfc>
 800994a:	f640 31e2 	movw	r1, #3042	; 0xbe2
 800994e:	4865      	ldr	r0, [pc, #404]	; (8009ae4 <UART_AdvFeatureConfig+0x28c>)
 8009950:	f7f8 fa37 	bl	8001dc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	430a      	orrs	r2, r1
 8009968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	f003 0310 	and.w	r3, r3, #16
 8009972:	2b00      	cmp	r3, #0
 8009974:	d018      	beq.n	80099a8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997a:	2b00      	cmp	r3, #0
 800997c:	d009      	beq.n	8009992 <UART_AdvFeatureConfig+0x13a>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009986:	d004      	beq.n	8009992 <UART_AdvFeatureConfig+0x13a>
 8009988:	f640 31e9 	movw	r1, #3049	; 0xbe9
 800998c:	4855      	ldr	r0, [pc, #340]	; (8009ae4 <UART_AdvFeatureConfig+0x28c>)
 800998e:	f7f8 fa18 	bl	8001dc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	430a      	orrs	r2, r1
 80099a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d018      	beq.n	80099e6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d009      	beq.n	80099d0 <UART_AdvFeatureConfig+0x178>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c4:	d004      	beq.n	80099d0 <UART_AdvFeatureConfig+0x178>
 80099c6:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 80099ca:	4846      	ldr	r0, [pc, #280]	; (8009ae4 <UART_AdvFeatureConfig+0x28c>)
 80099cc:	f7f8 f9f9 	bl	8001dc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d054      	beq.n	8009a9c <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a3c      	ldr	r2, [pc, #240]	; (8009ae8 <UART_AdvFeatureConfig+0x290>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d00e      	beq.n	8009a1a <UART_AdvFeatureConfig+0x1c2>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a3a      	ldr	r2, [pc, #232]	; (8009aec <UART_AdvFeatureConfig+0x294>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d009      	beq.n	8009a1a <UART_AdvFeatureConfig+0x1c2>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a39      	ldr	r2, [pc, #228]	; (8009af0 <UART_AdvFeatureConfig+0x298>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d004      	beq.n	8009a1a <UART_AdvFeatureConfig+0x1c2>
 8009a10:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8009a14:	4833      	ldr	r0, [pc, #204]	; (8009ae4 <UART_AdvFeatureConfig+0x28c>)
 8009a16:	f7f8 f9d4 	bl	8001dc2 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d009      	beq.n	8009a36 <UART_AdvFeatureConfig+0x1de>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a2a:	d004      	beq.n	8009a36 <UART_AdvFeatureConfig+0x1de>
 8009a2c:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8009a30:	482c      	ldr	r0, [pc, #176]	; (8009ae4 <UART_AdvFeatureConfig+0x28c>)
 8009a32:	f7f8 f9c6 	bl	8001dc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a54:	d122      	bne.n	8009a9c <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d013      	beq.n	8009a86 <UART_AdvFeatureConfig+0x22e>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a66:	d00e      	beq.n	8009a86 <UART_AdvFeatureConfig+0x22e>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a70:	d009      	beq.n	8009a86 <UART_AdvFeatureConfig+0x22e>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a7a:	d004      	beq.n	8009a86 <UART_AdvFeatureConfig+0x22e>
 8009a7c:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8009a80:	4818      	ldr	r0, [pc, #96]	; (8009ae4 <UART_AdvFeatureConfig+0x28c>)
 8009a82:	f7f8 f99e 	bl	8001dc2 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	430a      	orrs	r2, r1
 8009a9a:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d018      	beq.n	8009ada <UART_AdvFeatureConfig+0x282>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d009      	beq.n	8009ac4 <UART_AdvFeatureConfig+0x26c>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ab4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ab8:	d004      	beq.n	8009ac4 <UART_AdvFeatureConfig+0x26c>
 8009aba:	f640 4105 	movw	r1, #3077	; 0xc05
 8009abe:	4809      	ldr	r0, [pc, #36]	; (8009ae4 <UART_AdvFeatureConfig+0x28c>)
 8009ac0:	f7f8 f97f 	bl	8001dc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	605a      	str	r2, [r3, #4]
  }
}
 8009ada:	bf00      	nop
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0800c438 	.word	0x0800c438
 8009ae8:	40013800 	.word	0x40013800
 8009aec:	40004400 	.word	0x40004400
 8009af0:	40004800 	.word	0x40004800

08009af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af02      	add	r7, sp, #8
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b04:	f7f8 fcec 	bl	80024e0 <HAL_GetTick>
 8009b08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0308 	and.w	r3, r3, #8
 8009b14:	2b08      	cmp	r3, #8
 8009b16:	d10e      	bne.n	8009b36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f82d 	bl	8009b86 <UART_WaitOnFlagUntilTimeout>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e023      	b.n	8009b7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 0304 	and.w	r3, r3, #4
 8009b40:	2b04      	cmp	r3, #4
 8009b42:	d10e      	bne.n	8009b62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f817 	bl	8009b86 <UART_WaitOnFlagUntilTimeout>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e00d      	b.n	8009b7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b09c      	sub	sp, #112	; 0x70
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	603b      	str	r3, [r7, #0]
 8009b92:	4613      	mov	r3, r2
 8009b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b96:	e0a5      	b.n	8009ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9e:	f000 80a1 	beq.w	8009ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ba2:	f7f8 fc9d 	bl	80024e0 <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d302      	bcc.n	8009bb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d13e      	bne.n	8009c36 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc0:	e853 3f00 	ldrex	r3, [r3]
 8009bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bcc:	667b      	str	r3, [r7, #100]	; 0x64
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bd8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bde:	e841 2300 	strex	r3, r2, [r1]
 8009be2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1e6      	bne.n	8009bb8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3308      	adds	r3, #8
 8009bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf4:	e853 3f00 	ldrex	r3, [r3]
 8009bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfc:	f023 0301 	bic.w	r3, r3, #1
 8009c00:	663b      	str	r3, [r7, #96]	; 0x60
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3308      	adds	r3, #8
 8009c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c12:	e841 2300 	strex	r3, r2, [r1]
 8009c16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1e5      	bne.n	8009bea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2220      	movs	r2, #32
 8009c22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2220      	movs	r2, #32
 8009c28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e067      	b.n	8009d06 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d04f      	beq.n	8009ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c52:	d147      	bne.n	8009ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	e853 3f00 	ldrex	r3, [r3]
 8009c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c84:	e841 2300 	strex	r3, r2, [r1]
 8009c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e6      	bne.n	8009c5e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3308      	adds	r3, #8
 8009c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	e853 3f00 	ldrex	r3, [r3]
 8009c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	f023 0301 	bic.w	r3, r3, #1
 8009ca6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	3308      	adds	r3, #8
 8009cae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cb0:	623a      	str	r2, [r7, #32]
 8009cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb4:	69f9      	ldr	r1, [r7, #28]
 8009cb6:	6a3a      	ldr	r2, [r7, #32]
 8009cb8:	e841 2300 	strex	r3, r2, [r1]
 8009cbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1e5      	bne.n	8009c90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e010      	b.n	8009d06 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	69da      	ldr	r2, [r3, #28]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4013      	ands	r3, r2
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	bf0c      	ite	eq
 8009cf4:	2301      	moveq	r3, #1
 8009cf6:	2300      	movne	r3, #0
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	f43f af4a 	beq.w	8009b98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3770      	adds	r7, #112	; 0x70
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b091      	sub	sp, #68	; 0x44
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	88fa      	ldrh	r2, [r7, #6]
 8009d28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	88fa      	ldrh	r2, [r7, #6]
 8009d30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d42:	d10e      	bne.n	8009d62 <UART_Start_Receive_IT+0x52>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d105      	bne.n	8009d58 <UART_Start_Receive_IT+0x48>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009d52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d56:	e02d      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	22ff      	movs	r2, #255	; 0xff
 8009d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d60:	e028      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10d      	bne.n	8009d86 <UART_Start_Receive_IT+0x76>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d104      	bne.n	8009d7c <UART_Start_Receive_IT+0x6c>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	22ff      	movs	r2, #255	; 0xff
 8009d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d7a:	e01b      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	227f      	movs	r2, #127	; 0x7f
 8009d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d84:	e016      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d8e:	d10d      	bne.n	8009dac <UART_Start_Receive_IT+0x9c>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <UART_Start_Receive_IT+0x92>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	227f      	movs	r2, #127	; 0x7f
 8009d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009da0:	e008      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	223f      	movs	r2, #63	; 0x3f
 8009da6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009daa:	e003      	b.n	8009db4 <UART_Start_Receive_IT+0xa4>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2222      	movs	r2, #34	; 0x22
 8009dc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	f043 0301 	orr.w	r3, r3, #1
 8009dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3308      	adds	r3, #8
 8009de0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009de2:	637a      	str	r2, [r7, #52]	; 0x34
 8009de4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e5      	bne.n	8009dc2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dfe:	d107      	bne.n	8009e10 <UART_Start_Receive_IT+0x100>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d103      	bne.n	8009e10 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4a15      	ldr	r2, [pc, #84]	; (8009e60 <UART_Start_Receive_IT+0x150>)
 8009e0c:	665a      	str	r2, [r3, #100]	; 0x64
 8009e0e:	e002      	b.n	8009e16 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4a14      	ldr	r2, [pc, #80]	; (8009e64 <UART_Start_Receive_IT+0x154>)
 8009e14:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	e853 3f00 	ldrex	r3, [r3]
 8009e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3c:	623b      	str	r3, [r7, #32]
 8009e3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e40:	69f9      	ldr	r1, [r7, #28]
 8009e42:	6a3a      	ldr	r2, [r7, #32]
 8009e44:	e841 2300 	strex	r3, r2, [r1]
 8009e48:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1e6      	bne.n	8009e1e <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3744      	adds	r7, #68	; 0x44
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	0800a283 	.word	0x0800a283
 8009e64:	0800a127 	.word	0x0800a127

08009e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b095      	sub	sp, #84	; 0x54
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e96:	e841 2300 	strex	r3, r2, [r1]
 8009e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e6      	bne.n	8009e70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	e853 3f00 	ldrex	r3, [r3]
 8009eb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	f023 0301 	bic.w	r3, r3, #1
 8009eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eca:	e841 2300 	strex	r3, r2, [r1]
 8009ece:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1e5      	bne.n	8009ea2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d118      	bne.n	8009f10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	e853 3f00 	ldrex	r3, [r3]
 8009eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f023 0310 	bic.w	r3, r3, #16
 8009ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009efc:	61bb      	str	r3, [r7, #24]
 8009efe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f00:	6979      	ldr	r1, [r7, #20]
 8009f02:	69ba      	ldr	r2, [r7, #24]
 8009f04:	e841 2300 	strex	r3, r2, [r1]
 8009f08:	613b      	str	r3, [r7, #16]
   return(result);
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1e6      	bne.n	8009ede <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2220      	movs	r2, #32
 8009f14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009f22:	bf00      	nop
 8009f24:	3754      	adds	r7, #84	; 0x54
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b084      	sub	sp, #16
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff fa09 	bl	8009364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f52:	bf00      	nop
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b08f      	sub	sp, #60	; 0x3c
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f66:	2b21      	cmp	r3, #33	; 0x21
 8009f68:	d14d      	bne.n	800a006 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d132      	bne.n	8009fdc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
 8009f7e:	e853 3f00 	ldrex	r3, [r3]
 8009f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f96:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f9c:	e841 2300 	strex	r3, r2, [r1]
 8009fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e6      	bne.n	8009f76 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	e853 3f00 	ldrex	r3, [r3]
 8009fb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	61bb      	str	r3, [r7, #24]
 8009fc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6979      	ldr	r1, [r7, #20]
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e6      	bne.n	8009fa8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009fda:	e014      	b.n	800a006 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe0:	781a      	ldrb	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	b292      	uxth	r2, r2
 8009fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fee:	1c5a      	adds	r2, r3, #1
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a006:	bf00      	nop
 800a008:	373c      	adds	r7, #60	; 0x3c
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a012:	b480      	push	{r7}
 800a014:	b091      	sub	sp, #68	; 0x44
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a01e:	2b21      	cmp	r3, #33	; 0x21
 800a020:	d151      	bne.n	800a0c6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a028:	b29b      	uxth	r3, r3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d132      	bne.n	800a094 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	623b      	str	r3, [r7, #32]
   return(result);
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a042:	63bb      	str	r3, [r7, #56]	; 0x38
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	633b      	str	r3, [r7, #48]	; 0x30
 800a04e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a054:	e841 2300 	strex	r3, r2, [r1]
 800a058:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e6      	bne.n	800a02e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a074:	637b      	str	r3, [r7, #52]	; 0x34
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07e:	61fb      	str	r3, [r7, #28]
 800a080:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	69b9      	ldr	r1, [r7, #24]
 800a084:	69fa      	ldr	r2, [r7, #28]
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	617b      	str	r3, [r7, #20]
   return(result);
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e6      	bne.n	800a060 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a092:	e018      	b.n	800a0c6 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a09c:	881a      	ldrh	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0a6:	b292      	uxth	r2, r2
 800a0a8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ae:	1c9a      	adds	r2, r3, #2
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a0c6:	bf00      	nop
 800a0c8:	3744      	adds	r7, #68	; 0x44
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b088      	sub	sp, #32
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ee:	61fb      	str	r3, [r7, #28]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	61bb      	str	r3, [r7, #24]
 800a0fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	6979      	ldr	r1, [r7, #20]
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	e841 2300 	strex	r3, r2, [r1]
 800a104:	613b      	str	r3, [r7, #16]
   return(result);
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e6      	bne.n	800a0da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2220      	movs	r2, #32
 800a110:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7f7 f967 	bl	80013ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a11e:	bf00      	nop
 800a120:	3720      	adds	r7, #32
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b096      	sub	sp, #88	; 0x58
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a134:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a13c:	2b22      	cmp	r3, #34	; 0x22
 800a13e:	f040 8094 	bne.w	800a26a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a148:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a14c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a150:	b2d9      	uxtb	r1, r3
 800a152:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a156:	b2da      	uxtb	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15c:	400a      	ands	r2, r1
 800a15e:	b2d2      	uxtb	r2, r2
 800a160:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a166:	1c5a      	adds	r2, r3, #1
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a172:	b29b      	uxth	r3, r3
 800a174:	3b01      	subs	r3, #1
 800a176:	b29a      	uxth	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a184:	b29b      	uxth	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d177      	bne.n	800a27a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a192:	e853 3f00 	ldrex	r3, [r3]
 800a196:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a19e:	653b      	str	r3, [r7, #80]	; 0x50
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a8:	647b      	str	r3, [r7, #68]	; 0x44
 800a1aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1b0:	e841 2300 	strex	r3, r2, [r1]
 800a1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1e6      	bne.n	800a18a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	e853 3f00 	ldrex	r3, [r3]
 800a1ca:	623b      	str	r3, [r7, #32]
   return(result);
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	f023 0301 	bic.w	r3, r3, #1
 800a1d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1dc:	633a      	str	r2, [r7, #48]	; 0x30
 800a1de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e4:	e841 2300 	strex	r3, r2, [r1]
 800a1e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e5      	bne.n	800a1bc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2220      	movs	r2, #32
 800a1f4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a200:	2b01      	cmp	r3, #1
 800a202:	d12e      	bne.n	800a262 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	e853 3f00 	ldrex	r3, [r3]
 800a216:	60fb      	str	r3, [r7, #12]
   return(result);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f023 0310 	bic.w	r3, r3, #16
 800a21e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	461a      	mov	r2, r3
 800a226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a228:	61fb      	str	r3, [r7, #28]
 800a22a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22c:	69b9      	ldr	r1, [r7, #24]
 800a22e:	69fa      	ldr	r2, [r7, #28]
 800a230:	e841 2300 	strex	r3, r2, [r1]
 800a234:	617b      	str	r3, [r7, #20]
   return(result);
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e6      	bne.n	800a20a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	f003 0310 	and.w	r3, r3, #16
 800a246:	2b10      	cmp	r3, #16
 800a248:	d103      	bne.n	800a252 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2210      	movs	r2, #16
 800a250:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a258:	4619      	mov	r1, r3
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff f88c 	bl	8009378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a260:	e00b      	b.n	800a27a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7f7 f8f8 	bl	8001458 <HAL_UART_RxCpltCallback>
}
 800a268:	e007      	b.n	800a27a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	699a      	ldr	r2, [r3, #24]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f042 0208 	orr.w	r2, r2, #8
 800a278:	619a      	str	r2, [r3, #24]
}
 800a27a:	bf00      	nop
 800a27c:	3758      	adds	r7, #88	; 0x58
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b096      	sub	sp, #88	; 0x58
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a290:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a298:	2b22      	cmp	r3, #34	; 0x22
 800a29a:	f040 8094 	bne.w	800a3c6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a2a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ac:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a2ae:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a2b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c2:	1c9a      	adds	r2, r3, #2
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d177      	bne.n	800a3d6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ee:	e853 3f00 	ldrex	r3, [r3]
 800a2f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	461a      	mov	r2, r3
 800a302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a304:	643b      	str	r3, [r7, #64]	; 0x40
 800a306:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a308:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a30a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a30c:	e841 2300 	strex	r3, r2, [r1]
 800a310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e6      	bne.n	800a2e6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	3308      	adds	r3, #8
 800a31e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	e853 3f00 	ldrex	r3, [r3]
 800a326:	61fb      	str	r3, [r7, #28]
   return(result);
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	f023 0301 	bic.w	r3, r3, #1
 800a32e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3308      	adds	r3, #8
 800a336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a338:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a33a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a33e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a340:	e841 2300 	strex	r3, r2, [r1]
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e5      	bne.n	800a318 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2220      	movs	r2, #32
 800a350:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d12e      	bne.n	800a3be <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	e853 3f00 	ldrex	r3, [r3]
 800a372:	60bb      	str	r3, [r7, #8]
   return(result);
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	f023 0310 	bic.w	r3, r3, #16
 800a37a:	647b      	str	r3, [r7, #68]	; 0x44
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a384:	61bb      	str	r3, [r7, #24]
 800a386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a388:	6979      	ldr	r1, [r7, #20]
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	e841 2300 	strex	r3, r2, [r1]
 800a390:	613b      	str	r3, [r7, #16]
   return(result);
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e6      	bne.n	800a366 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	f003 0310 	and.w	r3, r3, #16
 800a3a2:	2b10      	cmp	r3, #16
 800a3a4:	d103      	bne.n	800a3ae <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2210      	movs	r2, #16
 800a3ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7fe ffde 	bl	8009378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3bc:	e00b      	b.n	800a3d6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7f7 f84a 	bl	8001458 <HAL_UART_RxCpltCallback>
}
 800a3c4:	e007      	b.n	800a3d6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	699a      	ldr	r2, [r3, #24]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f042 0208 	orr.w	r2, r2, #8
 800a3d4:	619a      	str	r2, [r3, #24]
}
 800a3d6:	bf00      	nop
 800a3d8:	3758      	adds	r7, #88	; 0x58
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b083      	sub	sp, #12
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
	...

0800a3f4 <__errno>:
 800a3f4:	4b01      	ldr	r3, [pc, #4]	; (800a3fc <__errno+0x8>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	20000088 	.word	0x20000088

0800a400 <__libc_init_array>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	4d0d      	ldr	r5, [pc, #52]	; (800a438 <__libc_init_array+0x38>)
 800a404:	4c0d      	ldr	r4, [pc, #52]	; (800a43c <__libc_init_array+0x3c>)
 800a406:	1b64      	subs	r4, r4, r5
 800a408:	10a4      	asrs	r4, r4, #2
 800a40a:	2600      	movs	r6, #0
 800a40c:	42a6      	cmp	r6, r4
 800a40e:	d109      	bne.n	800a424 <__libc_init_array+0x24>
 800a410:	4d0b      	ldr	r5, [pc, #44]	; (800a440 <__libc_init_array+0x40>)
 800a412:	4c0c      	ldr	r4, [pc, #48]	; (800a444 <__libc_init_array+0x44>)
 800a414:	f001 fe0c 	bl	800c030 <_init>
 800a418:	1b64      	subs	r4, r4, r5
 800a41a:	10a4      	asrs	r4, r4, #2
 800a41c:	2600      	movs	r6, #0
 800a41e:	42a6      	cmp	r6, r4
 800a420:	d105      	bne.n	800a42e <__libc_init_array+0x2e>
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	f855 3b04 	ldr.w	r3, [r5], #4
 800a428:	4798      	blx	r3
 800a42a:	3601      	adds	r6, #1
 800a42c:	e7ee      	b.n	800a40c <__libc_init_array+0xc>
 800a42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a432:	4798      	blx	r3
 800a434:	3601      	adds	r6, #1
 800a436:	e7f2      	b.n	800a41e <__libc_init_array+0x1e>
 800a438:	0800c66c 	.word	0x0800c66c
 800a43c:	0800c66c 	.word	0x0800c66c
 800a440:	0800c66c 	.word	0x0800c66c
 800a444:	0800c670 	.word	0x0800c670

0800a448 <memset>:
 800a448:	4402      	add	r2, r0
 800a44a:	4603      	mov	r3, r0
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d100      	bne.n	800a452 <memset+0xa>
 800a450:	4770      	bx	lr
 800a452:	f803 1b01 	strb.w	r1, [r3], #1
 800a456:	e7f9      	b.n	800a44c <memset+0x4>

0800a458 <iprintf>:
 800a458:	b40f      	push	{r0, r1, r2, r3}
 800a45a:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <iprintf+0x2c>)
 800a45c:	b513      	push	{r0, r1, r4, lr}
 800a45e:	681c      	ldr	r4, [r3, #0]
 800a460:	b124      	cbz	r4, 800a46c <iprintf+0x14>
 800a462:	69a3      	ldr	r3, [r4, #24]
 800a464:	b913      	cbnz	r3, 800a46c <iprintf+0x14>
 800a466:	4620      	mov	r0, r4
 800a468:	f000 f91a 	bl	800a6a0 <__sinit>
 800a46c:	ab05      	add	r3, sp, #20
 800a46e:	9a04      	ldr	r2, [sp, #16]
 800a470:	68a1      	ldr	r1, [r4, #8]
 800a472:	9301      	str	r3, [sp, #4]
 800a474:	4620      	mov	r0, r4
 800a476:	f000 fd77 	bl	800af68 <_vfiprintf_r>
 800a47a:	b002      	add	sp, #8
 800a47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a480:	b004      	add	sp, #16
 800a482:	4770      	bx	lr
 800a484:	20000088 	.word	0x20000088

0800a488 <siscanf>:
 800a488:	b40e      	push	{r1, r2, r3}
 800a48a:	b510      	push	{r4, lr}
 800a48c:	b09f      	sub	sp, #124	; 0x7c
 800a48e:	ac21      	add	r4, sp, #132	; 0x84
 800a490:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a494:	f854 2b04 	ldr.w	r2, [r4], #4
 800a498:	9201      	str	r2, [sp, #4]
 800a49a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a49e:	9004      	str	r0, [sp, #16]
 800a4a0:	9008      	str	r0, [sp, #32]
 800a4a2:	f7f5 fea7 	bl	80001f4 <strlen>
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	; (800a4d8 <siscanf+0x50>)
 800a4a8:	9005      	str	r0, [sp, #20]
 800a4aa:	9009      	str	r0, [sp, #36]	; 0x24
 800a4ac:	930d      	str	r3, [sp, #52]	; 0x34
 800a4ae:	480b      	ldr	r0, [pc, #44]	; (800a4dc <siscanf+0x54>)
 800a4b0:	9a01      	ldr	r2, [sp, #4]
 800a4b2:	6800      	ldr	r0, [r0, #0]
 800a4b4:	9403      	str	r4, [sp, #12]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	9311      	str	r3, [sp, #68]	; 0x44
 800a4ba:	9316      	str	r3, [sp, #88]	; 0x58
 800a4bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a4c4:	a904      	add	r1, sp, #16
 800a4c6:	4623      	mov	r3, r4
 800a4c8:	f000 fbac 	bl	800ac24 <__ssvfiscanf_r>
 800a4cc:	b01f      	add	sp, #124	; 0x7c
 800a4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d2:	b003      	add	sp, #12
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	0800a503 	.word	0x0800a503
 800a4dc:	20000088 	.word	0x20000088

0800a4e0 <__sread>:
 800a4e0:	b510      	push	{r4, lr}
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e8:	f001 f94e 	bl	800b788 <_read_r>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	bfab      	itete	ge
 800a4f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a4f4:	181b      	addge	r3, r3, r0
 800a4f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4fa:	bfac      	ite	ge
 800a4fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4fe:	81a3      	strhlt	r3, [r4, #12]
 800a500:	bd10      	pop	{r4, pc}

0800a502 <__seofread>:
 800a502:	2000      	movs	r0, #0
 800a504:	4770      	bx	lr

0800a506 <__swrite>:
 800a506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50a:	461f      	mov	r7, r3
 800a50c:	898b      	ldrh	r3, [r1, #12]
 800a50e:	05db      	lsls	r3, r3, #23
 800a510:	4605      	mov	r5, r0
 800a512:	460c      	mov	r4, r1
 800a514:	4616      	mov	r6, r2
 800a516:	d505      	bpl.n	800a524 <__swrite+0x1e>
 800a518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51c:	2302      	movs	r3, #2
 800a51e:	2200      	movs	r2, #0
 800a520:	f000 f95e 	bl	800a7e0 <_lseek_r>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a52a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	4632      	mov	r2, r6
 800a532:	463b      	mov	r3, r7
 800a534:	4628      	mov	r0, r5
 800a536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a53a:	f000 b837 	b.w	800a5ac <_write_r>

0800a53e <__sseek>:
 800a53e:	b510      	push	{r4, lr}
 800a540:	460c      	mov	r4, r1
 800a542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a546:	f000 f94b 	bl	800a7e0 <_lseek_r>
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	bf15      	itete	ne
 800a550:	6560      	strne	r0, [r4, #84]	; 0x54
 800a552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a55a:	81a3      	strheq	r3, [r4, #12]
 800a55c:	bf18      	it	ne
 800a55e:	81a3      	strhne	r3, [r4, #12]
 800a560:	bd10      	pop	{r4, pc}

0800a562 <__sclose>:
 800a562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a566:	f000 b833 	b.w	800a5d0 <_close_r>
	...

0800a56c <_vsiprintf_r>:
 800a56c:	b500      	push	{lr}
 800a56e:	b09b      	sub	sp, #108	; 0x6c
 800a570:	9100      	str	r1, [sp, #0]
 800a572:	9104      	str	r1, [sp, #16]
 800a574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a578:	9105      	str	r1, [sp, #20]
 800a57a:	9102      	str	r1, [sp, #8]
 800a57c:	4905      	ldr	r1, [pc, #20]	; (800a594 <_vsiprintf_r+0x28>)
 800a57e:	9103      	str	r1, [sp, #12]
 800a580:	4669      	mov	r1, sp
 800a582:	f000 f9f5 	bl	800a970 <_svfiprintf_r>
 800a586:	9b00      	ldr	r3, [sp, #0]
 800a588:	2200      	movs	r2, #0
 800a58a:	701a      	strb	r2, [r3, #0]
 800a58c:	b01b      	add	sp, #108	; 0x6c
 800a58e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a592:	bf00      	nop
 800a594:	ffff0208 	.word	0xffff0208

0800a598 <vsiprintf>:
 800a598:	4613      	mov	r3, r2
 800a59a:	460a      	mov	r2, r1
 800a59c:	4601      	mov	r1, r0
 800a59e:	4802      	ldr	r0, [pc, #8]	; (800a5a8 <vsiprintf+0x10>)
 800a5a0:	6800      	ldr	r0, [r0, #0]
 800a5a2:	f7ff bfe3 	b.w	800a56c <_vsiprintf_r>
 800a5a6:	bf00      	nop
 800a5a8:	20000088 	.word	0x20000088

0800a5ac <_write_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	4d07      	ldr	r5, [pc, #28]	; (800a5cc <_write_r+0x20>)
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	4608      	mov	r0, r1
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	602a      	str	r2, [r5, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	f7f7 fd49 	bl	8002052 <_write>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d102      	bne.n	800a5ca <_write_r+0x1e>
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	b103      	cbz	r3, 800a5ca <_write_r+0x1e>
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	20000a38 	.word	0x20000a38

0800a5d0 <_close_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4d06      	ldr	r5, [pc, #24]	; (800a5ec <_close_r+0x1c>)
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4608      	mov	r0, r1
 800a5da:	602b      	str	r3, [r5, #0]
 800a5dc:	f7f7 fd55 	bl	800208a <_close>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_close_r+0x1a>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_close_r+0x1a>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	20000a38 	.word	0x20000a38

0800a5f0 <std>:
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	b510      	push	{r4, lr}
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a5fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5fe:	6083      	str	r3, [r0, #8]
 800a600:	8181      	strh	r1, [r0, #12]
 800a602:	6643      	str	r3, [r0, #100]	; 0x64
 800a604:	81c2      	strh	r2, [r0, #14]
 800a606:	6183      	str	r3, [r0, #24]
 800a608:	4619      	mov	r1, r3
 800a60a:	2208      	movs	r2, #8
 800a60c:	305c      	adds	r0, #92	; 0x5c
 800a60e:	f7ff ff1b 	bl	800a448 <memset>
 800a612:	4b05      	ldr	r3, [pc, #20]	; (800a628 <std+0x38>)
 800a614:	6263      	str	r3, [r4, #36]	; 0x24
 800a616:	4b05      	ldr	r3, [pc, #20]	; (800a62c <std+0x3c>)
 800a618:	62a3      	str	r3, [r4, #40]	; 0x28
 800a61a:	4b05      	ldr	r3, [pc, #20]	; (800a630 <std+0x40>)
 800a61c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a61e:	4b05      	ldr	r3, [pc, #20]	; (800a634 <std+0x44>)
 800a620:	6224      	str	r4, [r4, #32]
 800a622:	6323      	str	r3, [r4, #48]	; 0x30
 800a624:	bd10      	pop	{r4, pc}
 800a626:	bf00      	nop
 800a628:	0800a4e1 	.word	0x0800a4e1
 800a62c:	0800a507 	.word	0x0800a507
 800a630:	0800a53f 	.word	0x0800a53f
 800a634:	0800a563 	.word	0x0800a563

0800a638 <_cleanup_r>:
 800a638:	4901      	ldr	r1, [pc, #4]	; (800a640 <_cleanup_r+0x8>)
 800a63a:	f000 b8af 	b.w	800a79c <_fwalk_reent>
 800a63e:	bf00      	nop
 800a640:	0800bd49 	.word	0x0800bd49

0800a644 <__sfmoreglue>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	1e4a      	subs	r2, r1, #1
 800a648:	2568      	movs	r5, #104	; 0x68
 800a64a:	4355      	muls	r5, r2
 800a64c:	460e      	mov	r6, r1
 800a64e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a652:	f000 f8d7 	bl	800a804 <_malloc_r>
 800a656:	4604      	mov	r4, r0
 800a658:	b140      	cbz	r0, 800a66c <__sfmoreglue+0x28>
 800a65a:	2100      	movs	r1, #0
 800a65c:	e9c0 1600 	strd	r1, r6, [r0]
 800a660:	300c      	adds	r0, #12
 800a662:	60a0      	str	r0, [r4, #8]
 800a664:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a668:	f7ff feee 	bl	800a448 <memset>
 800a66c:	4620      	mov	r0, r4
 800a66e:	bd70      	pop	{r4, r5, r6, pc}

0800a670 <__sfp_lock_acquire>:
 800a670:	4801      	ldr	r0, [pc, #4]	; (800a678 <__sfp_lock_acquire+0x8>)
 800a672:	f000 b8b3 	b.w	800a7dc <__retarget_lock_acquire_recursive>
 800a676:	bf00      	nop
 800a678:	20000a34 	.word	0x20000a34

0800a67c <__sfp_lock_release>:
 800a67c:	4801      	ldr	r0, [pc, #4]	; (800a684 <__sfp_lock_release+0x8>)
 800a67e:	f000 b8ae 	b.w	800a7de <__retarget_lock_release_recursive>
 800a682:	bf00      	nop
 800a684:	20000a34 	.word	0x20000a34

0800a688 <__sinit_lock_acquire>:
 800a688:	4801      	ldr	r0, [pc, #4]	; (800a690 <__sinit_lock_acquire+0x8>)
 800a68a:	f000 b8a7 	b.w	800a7dc <__retarget_lock_acquire_recursive>
 800a68e:	bf00      	nop
 800a690:	20000a2f 	.word	0x20000a2f

0800a694 <__sinit_lock_release>:
 800a694:	4801      	ldr	r0, [pc, #4]	; (800a69c <__sinit_lock_release+0x8>)
 800a696:	f000 b8a2 	b.w	800a7de <__retarget_lock_release_recursive>
 800a69a:	bf00      	nop
 800a69c:	20000a2f 	.word	0x20000a2f

0800a6a0 <__sinit>:
 800a6a0:	b510      	push	{r4, lr}
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	f7ff fff0 	bl	800a688 <__sinit_lock_acquire>
 800a6a8:	69a3      	ldr	r3, [r4, #24]
 800a6aa:	b11b      	cbz	r3, 800a6b4 <__sinit+0x14>
 800a6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b0:	f7ff bff0 	b.w	800a694 <__sinit_lock_release>
 800a6b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6b8:	6523      	str	r3, [r4, #80]	; 0x50
 800a6ba:	4b13      	ldr	r3, [pc, #76]	; (800a708 <__sinit+0x68>)
 800a6bc:	4a13      	ldr	r2, [pc, #76]	; (800a70c <__sinit+0x6c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6c2:	42a3      	cmp	r3, r4
 800a6c4:	bf04      	itt	eq
 800a6c6:	2301      	moveq	r3, #1
 800a6c8:	61a3      	streq	r3, [r4, #24]
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f000 f820 	bl	800a710 <__sfp>
 800a6d0:	6060      	str	r0, [r4, #4]
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 f81c 	bl	800a710 <__sfp>
 800a6d8:	60a0      	str	r0, [r4, #8]
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 f818 	bl	800a710 <__sfp>
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	60e0      	str	r0, [r4, #12]
 800a6e4:	2104      	movs	r1, #4
 800a6e6:	6860      	ldr	r0, [r4, #4]
 800a6e8:	f7ff ff82 	bl	800a5f0 <std>
 800a6ec:	68a0      	ldr	r0, [r4, #8]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	2109      	movs	r1, #9
 800a6f2:	f7ff ff7d 	bl	800a5f0 <std>
 800a6f6:	68e0      	ldr	r0, [r4, #12]
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	2112      	movs	r1, #18
 800a6fc:	f7ff ff78 	bl	800a5f0 <std>
 800a700:	2301      	movs	r3, #1
 800a702:	61a3      	str	r3, [r4, #24]
 800a704:	e7d2      	b.n	800a6ac <__sinit+0xc>
 800a706:	bf00      	nop
 800a708:	0800c4b8 	.word	0x0800c4b8
 800a70c:	0800a639 	.word	0x0800a639

0800a710 <__sfp>:
 800a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a712:	4607      	mov	r7, r0
 800a714:	f7ff ffac 	bl	800a670 <__sfp_lock_acquire>
 800a718:	4b1e      	ldr	r3, [pc, #120]	; (800a794 <__sfp+0x84>)
 800a71a:	681e      	ldr	r6, [r3, #0]
 800a71c:	69b3      	ldr	r3, [r6, #24]
 800a71e:	b913      	cbnz	r3, 800a726 <__sfp+0x16>
 800a720:	4630      	mov	r0, r6
 800a722:	f7ff ffbd 	bl	800a6a0 <__sinit>
 800a726:	3648      	adds	r6, #72	; 0x48
 800a728:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	d503      	bpl.n	800a738 <__sfp+0x28>
 800a730:	6833      	ldr	r3, [r6, #0]
 800a732:	b30b      	cbz	r3, 800a778 <__sfp+0x68>
 800a734:	6836      	ldr	r6, [r6, #0]
 800a736:	e7f7      	b.n	800a728 <__sfp+0x18>
 800a738:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a73c:	b9d5      	cbnz	r5, 800a774 <__sfp+0x64>
 800a73e:	4b16      	ldr	r3, [pc, #88]	; (800a798 <__sfp+0x88>)
 800a740:	60e3      	str	r3, [r4, #12]
 800a742:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a746:	6665      	str	r5, [r4, #100]	; 0x64
 800a748:	f000 f847 	bl	800a7da <__retarget_lock_init_recursive>
 800a74c:	f7ff ff96 	bl	800a67c <__sfp_lock_release>
 800a750:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a754:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a758:	6025      	str	r5, [r4, #0]
 800a75a:	61a5      	str	r5, [r4, #24]
 800a75c:	2208      	movs	r2, #8
 800a75e:	4629      	mov	r1, r5
 800a760:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a764:	f7ff fe70 	bl	800a448 <memset>
 800a768:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a76c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a770:	4620      	mov	r0, r4
 800a772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a774:	3468      	adds	r4, #104	; 0x68
 800a776:	e7d9      	b.n	800a72c <__sfp+0x1c>
 800a778:	2104      	movs	r1, #4
 800a77a:	4638      	mov	r0, r7
 800a77c:	f7ff ff62 	bl	800a644 <__sfmoreglue>
 800a780:	4604      	mov	r4, r0
 800a782:	6030      	str	r0, [r6, #0]
 800a784:	2800      	cmp	r0, #0
 800a786:	d1d5      	bne.n	800a734 <__sfp+0x24>
 800a788:	f7ff ff78 	bl	800a67c <__sfp_lock_release>
 800a78c:	230c      	movs	r3, #12
 800a78e:	603b      	str	r3, [r7, #0]
 800a790:	e7ee      	b.n	800a770 <__sfp+0x60>
 800a792:	bf00      	nop
 800a794:	0800c4b8 	.word	0x0800c4b8
 800a798:	ffff0001 	.word	0xffff0001

0800a79c <_fwalk_reent>:
 800a79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	4688      	mov	r8, r1
 800a7a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7a8:	2700      	movs	r7, #0
 800a7aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7ae:	f1b9 0901 	subs.w	r9, r9, #1
 800a7b2:	d505      	bpl.n	800a7c0 <_fwalk_reent+0x24>
 800a7b4:	6824      	ldr	r4, [r4, #0]
 800a7b6:	2c00      	cmp	r4, #0
 800a7b8:	d1f7      	bne.n	800a7aa <_fwalk_reent+0xe>
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c0:	89ab      	ldrh	r3, [r5, #12]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d907      	bls.n	800a7d6 <_fwalk_reent+0x3a>
 800a7c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	d003      	beq.n	800a7d6 <_fwalk_reent+0x3a>
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	47c0      	blx	r8
 800a7d4:	4307      	orrs	r7, r0
 800a7d6:	3568      	adds	r5, #104	; 0x68
 800a7d8:	e7e9      	b.n	800a7ae <_fwalk_reent+0x12>

0800a7da <__retarget_lock_init_recursive>:
 800a7da:	4770      	bx	lr

0800a7dc <__retarget_lock_acquire_recursive>:
 800a7dc:	4770      	bx	lr

0800a7de <__retarget_lock_release_recursive>:
 800a7de:	4770      	bx	lr

0800a7e0 <_lseek_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4d07      	ldr	r5, [pc, #28]	; (800a800 <_lseek_r+0x20>)
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	4608      	mov	r0, r1
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	602a      	str	r2, [r5, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	f7f7 fc72 	bl	80020d8 <_lseek>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d102      	bne.n	800a7fe <_lseek_r+0x1e>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	b103      	cbz	r3, 800a7fe <_lseek_r+0x1e>
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	20000a38 	.word	0x20000a38

0800a804 <_malloc_r>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	1ccd      	adds	r5, r1, #3
 800a808:	f025 0503 	bic.w	r5, r5, #3
 800a80c:	3508      	adds	r5, #8
 800a80e:	2d0c      	cmp	r5, #12
 800a810:	bf38      	it	cc
 800a812:	250c      	movcc	r5, #12
 800a814:	2d00      	cmp	r5, #0
 800a816:	4606      	mov	r6, r0
 800a818:	db01      	blt.n	800a81e <_malloc_r+0x1a>
 800a81a:	42a9      	cmp	r1, r5
 800a81c:	d903      	bls.n	800a826 <_malloc_r+0x22>
 800a81e:	230c      	movs	r3, #12
 800a820:	6033      	str	r3, [r6, #0]
 800a822:	2000      	movs	r0, #0
 800a824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a826:	f001 fb57 	bl	800bed8 <__malloc_lock>
 800a82a:	4921      	ldr	r1, [pc, #132]	; (800a8b0 <_malloc_r+0xac>)
 800a82c:	680a      	ldr	r2, [r1, #0]
 800a82e:	4614      	mov	r4, r2
 800a830:	b99c      	cbnz	r4, 800a85a <_malloc_r+0x56>
 800a832:	4f20      	ldr	r7, [pc, #128]	; (800a8b4 <_malloc_r+0xb0>)
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	b923      	cbnz	r3, 800a842 <_malloc_r+0x3e>
 800a838:	4621      	mov	r1, r4
 800a83a:	4630      	mov	r0, r6
 800a83c:	f000 ffb6 	bl	800b7ac <_sbrk_r>
 800a840:	6038      	str	r0, [r7, #0]
 800a842:	4629      	mov	r1, r5
 800a844:	4630      	mov	r0, r6
 800a846:	f000 ffb1 	bl	800b7ac <_sbrk_r>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	d123      	bne.n	800a896 <_malloc_r+0x92>
 800a84e:	230c      	movs	r3, #12
 800a850:	6033      	str	r3, [r6, #0]
 800a852:	4630      	mov	r0, r6
 800a854:	f001 fb46 	bl	800bee4 <__malloc_unlock>
 800a858:	e7e3      	b.n	800a822 <_malloc_r+0x1e>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	1b5b      	subs	r3, r3, r5
 800a85e:	d417      	bmi.n	800a890 <_malloc_r+0x8c>
 800a860:	2b0b      	cmp	r3, #11
 800a862:	d903      	bls.n	800a86c <_malloc_r+0x68>
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	441c      	add	r4, r3
 800a868:	6025      	str	r5, [r4, #0]
 800a86a:	e004      	b.n	800a876 <_malloc_r+0x72>
 800a86c:	6863      	ldr	r3, [r4, #4]
 800a86e:	42a2      	cmp	r2, r4
 800a870:	bf0c      	ite	eq
 800a872:	600b      	streq	r3, [r1, #0]
 800a874:	6053      	strne	r3, [r2, #4]
 800a876:	4630      	mov	r0, r6
 800a878:	f001 fb34 	bl	800bee4 <__malloc_unlock>
 800a87c:	f104 000b 	add.w	r0, r4, #11
 800a880:	1d23      	adds	r3, r4, #4
 800a882:	f020 0007 	bic.w	r0, r0, #7
 800a886:	1ac2      	subs	r2, r0, r3
 800a888:	d0cc      	beq.n	800a824 <_malloc_r+0x20>
 800a88a:	1a1b      	subs	r3, r3, r0
 800a88c:	50a3      	str	r3, [r4, r2]
 800a88e:	e7c9      	b.n	800a824 <_malloc_r+0x20>
 800a890:	4622      	mov	r2, r4
 800a892:	6864      	ldr	r4, [r4, #4]
 800a894:	e7cc      	b.n	800a830 <_malloc_r+0x2c>
 800a896:	1cc4      	adds	r4, r0, #3
 800a898:	f024 0403 	bic.w	r4, r4, #3
 800a89c:	42a0      	cmp	r0, r4
 800a89e:	d0e3      	beq.n	800a868 <_malloc_r+0x64>
 800a8a0:	1a21      	subs	r1, r4, r0
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f000 ff82 	bl	800b7ac <_sbrk_r>
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d1dd      	bne.n	800a868 <_malloc_r+0x64>
 800a8ac:	e7cf      	b.n	800a84e <_malloc_r+0x4a>
 800a8ae:	bf00      	nop
 800a8b0:	20000160 	.word	0x20000160
 800a8b4:	20000164 	.word	0x20000164

0800a8b8 <__ssputs_r>:
 800a8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8bc:	688e      	ldr	r6, [r1, #8]
 800a8be:	429e      	cmp	r6, r3
 800a8c0:	4682      	mov	sl, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	4690      	mov	r8, r2
 800a8c6:	461f      	mov	r7, r3
 800a8c8:	d838      	bhi.n	800a93c <__ssputs_r+0x84>
 800a8ca:	898a      	ldrh	r2, [r1, #12]
 800a8cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8d0:	d032      	beq.n	800a938 <__ssputs_r+0x80>
 800a8d2:	6825      	ldr	r5, [r4, #0]
 800a8d4:	6909      	ldr	r1, [r1, #16]
 800a8d6:	eba5 0901 	sub.w	r9, r5, r1
 800a8da:	6965      	ldr	r5, [r4, #20]
 800a8dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	444b      	add	r3, r9
 800a8e8:	106d      	asrs	r5, r5, #1
 800a8ea:	429d      	cmp	r5, r3
 800a8ec:	bf38      	it	cc
 800a8ee:	461d      	movcc	r5, r3
 800a8f0:	0553      	lsls	r3, r2, #21
 800a8f2:	d531      	bpl.n	800a958 <__ssputs_r+0xa0>
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	f7ff ff85 	bl	800a804 <_malloc_r>
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	b950      	cbnz	r0, 800a914 <__ssputs_r+0x5c>
 800a8fe:	230c      	movs	r3, #12
 800a900:	f8ca 3000 	str.w	r3, [sl]
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a90a:	81a3      	strh	r3, [r4, #12]
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295
 800a910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a914:	6921      	ldr	r1, [r4, #16]
 800a916:	464a      	mov	r2, r9
 800a918:	f001 fab6 	bl	800be88 <memcpy>
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a926:	81a3      	strh	r3, [r4, #12]
 800a928:	6126      	str	r6, [r4, #16]
 800a92a:	6165      	str	r5, [r4, #20]
 800a92c:	444e      	add	r6, r9
 800a92e:	eba5 0509 	sub.w	r5, r5, r9
 800a932:	6026      	str	r6, [r4, #0]
 800a934:	60a5      	str	r5, [r4, #8]
 800a936:	463e      	mov	r6, r7
 800a938:	42be      	cmp	r6, r7
 800a93a:	d900      	bls.n	800a93e <__ssputs_r+0x86>
 800a93c:	463e      	mov	r6, r7
 800a93e:	4632      	mov	r2, r6
 800a940:	6820      	ldr	r0, [r4, #0]
 800a942:	4641      	mov	r1, r8
 800a944:	f001 faae 	bl	800bea4 <memmove>
 800a948:	68a3      	ldr	r3, [r4, #8]
 800a94a:	6822      	ldr	r2, [r4, #0]
 800a94c:	1b9b      	subs	r3, r3, r6
 800a94e:	4432      	add	r2, r6
 800a950:	60a3      	str	r3, [r4, #8]
 800a952:	6022      	str	r2, [r4, #0]
 800a954:	2000      	movs	r0, #0
 800a956:	e7db      	b.n	800a910 <__ssputs_r+0x58>
 800a958:	462a      	mov	r2, r5
 800a95a:	f001 fb19 	bl	800bf90 <_realloc_r>
 800a95e:	4606      	mov	r6, r0
 800a960:	2800      	cmp	r0, #0
 800a962:	d1e1      	bne.n	800a928 <__ssputs_r+0x70>
 800a964:	6921      	ldr	r1, [r4, #16]
 800a966:	4650      	mov	r0, sl
 800a968:	f001 fac2 	bl	800bef0 <_free_r>
 800a96c:	e7c7      	b.n	800a8fe <__ssputs_r+0x46>
	...

0800a970 <_svfiprintf_r>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	4698      	mov	r8, r3
 800a976:	898b      	ldrh	r3, [r1, #12]
 800a978:	061b      	lsls	r3, r3, #24
 800a97a:	b09d      	sub	sp, #116	; 0x74
 800a97c:	4607      	mov	r7, r0
 800a97e:	460d      	mov	r5, r1
 800a980:	4614      	mov	r4, r2
 800a982:	d50e      	bpl.n	800a9a2 <_svfiprintf_r+0x32>
 800a984:	690b      	ldr	r3, [r1, #16]
 800a986:	b963      	cbnz	r3, 800a9a2 <_svfiprintf_r+0x32>
 800a988:	2140      	movs	r1, #64	; 0x40
 800a98a:	f7ff ff3b 	bl	800a804 <_malloc_r>
 800a98e:	6028      	str	r0, [r5, #0]
 800a990:	6128      	str	r0, [r5, #16]
 800a992:	b920      	cbnz	r0, 800a99e <_svfiprintf_r+0x2e>
 800a994:	230c      	movs	r3, #12
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	e0d1      	b.n	800ab42 <_svfiprintf_r+0x1d2>
 800a99e:	2340      	movs	r3, #64	; 0x40
 800a9a0:	616b      	str	r3, [r5, #20]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a6:	2320      	movs	r3, #32
 800a9a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9b0:	2330      	movs	r3, #48	; 0x30
 800a9b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab5c <_svfiprintf_r+0x1ec>
 800a9b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9ba:	f04f 0901 	mov.w	r9, #1
 800a9be:	4623      	mov	r3, r4
 800a9c0:	469a      	mov	sl, r3
 800a9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9c6:	b10a      	cbz	r2, 800a9cc <_svfiprintf_r+0x5c>
 800a9c8:	2a25      	cmp	r2, #37	; 0x25
 800a9ca:	d1f9      	bne.n	800a9c0 <_svfiprintf_r+0x50>
 800a9cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a9d0:	d00b      	beq.n	800a9ea <_svfiprintf_r+0x7a>
 800a9d2:	465b      	mov	r3, fp
 800a9d4:	4622      	mov	r2, r4
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f7ff ff6d 	bl	800a8b8 <__ssputs_r>
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f000 80aa 	beq.w	800ab38 <_svfiprintf_r+0x1c8>
 800a9e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9e6:	445a      	add	r2, fp
 800a9e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 80a2 	beq.w	800ab38 <_svfiprintf_r+0x1c8>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9fe:	f10a 0a01 	add.w	sl, sl, #1
 800aa02:	9304      	str	r3, [sp, #16]
 800aa04:	9307      	str	r3, [sp, #28]
 800aa06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa0a:	931a      	str	r3, [sp, #104]	; 0x68
 800aa0c:	4654      	mov	r4, sl
 800aa0e:	2205      	movs	r2, #5
 800aa10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa14:	4851      	ldr	r0, [pc, #324]	; (800ab5c <_svfiprintf_r+0x1ec>)
 800aa16:	f7f5 fbfb 	bl	8000210 <memchr>
 800aa1a:	9a04      	ldr	r2, [sp, #16]
 800aa1c:	b9d8      	cbnz	r0, 800aa56 <_svfiprintf_r+0xe6>
 800aa1e:	06d0      	lsls	r0, r2, #27
 800aa20:	bf44      	itt	mi
 800aa22:	2320      	movmi	r3, #32
 800aa24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa28:	0711      	lsls	r1, r2, #28
 800aa2a:	bf44      	itt	mi
 800aa2c:	232b      	movmi	r3, #43	; 0x2b
 800aa2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa32:	f89a 3000 	ldrb.w	r3, [sl]
 800aa36:	2b2a      	cmp	r3, #42	; 0x2a
 800aa38:	d015      	beq.n	800aa66 <_svfiprintf_r+0xf6>
 800aa3a:	9a07      	ldr	r2, [sp, #28]
 800aa3c:	4654      	mov	r4, sl
 800aa3e:	2000      	movs	r0, #0
 800aa40:	f04f 0c0a 	mov.w	ip, #10
 800aa44:	4621      	mov	r1, r4
 800aa46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa4a:	3b30      	subs	r3, #48	; 0x30
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	d94e      	bls.n	800aaee <_svfiprintf_r+0x17e>
 800aa50:	b1b0      	cbz	r0, 800aa80 <_svfiprintf_r+0x110>
 800aa52:	9207      	str	r2, [sp, #28]
 800aa54:	e014      	b.n	800aa80 <_svfiprintf_r+0x110>
 800aa56:	eba0 0308 	sub.w	r3, r0, r8
 800aa5a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	46a2      	mov	sl, r4
 800aa64:	e7d2      	b.n	800aa0c <_svfiprintf_r+0x9c>
 800aa66:	9b03      	ldr	r3, [sp, #12]
 800aa68:	1d19      	adds	r1, r3, #4
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	9103      	str	r1, [sp, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	bfbb      	ittet	lt
 800aa72:	425b      	neglt	r3, r3
 800aa74:	f042 0202 	orrlt.w	r2, r2, #2
 800aa78:	9307      	strge	r3, [sp, #28]
 800aa7a:	9307      	strlt	r3, [sp, #28]
 800aa7c:	bfb8      	it	lt
 800aa7e:	9204      	strlt	r2, [sp, #16]
 800aa80:	7823      	ldrb	r3, [r4, #0]
 800aa82:	2b2e      	cmp	r3, #46	; 0x2e
 800aa84:	d10c      	bne.n	800aaa0 <_svfiprintf_r+0x130>
 800aa86:	7863      	ldrb	r3, [r4, #1]
 800aa88:	2b2a      	cmp	r3, #42	; 0x2a
 800aa8a:	d135      	bne.n	800aaf8 <_svfiprintf_r+0x188>
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	1d1a      	adds	r2, r3, #4
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	9203      	str	r2, [sp, #12]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	bfb8      	it	lt
 800aa98:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa9c:	3402      	adds	r4, #2
 800aa9e:	9305      	str	r3, [sp, #20]
 800aaa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab6c <_svfiprintf_r+0x1fc>
 800aaa4:	7821      	ldrb	r1, [r4, #0]
 800aaa6:	2203      	movs	r2, #3
 800aaa8:	4650      	mov	r0, sl
 800aaaa:	f7f5 fbb1 	bl	8000210 <memchr>
 800aaae:	b140      	cbz	r0, 800aac2 <_svfiprintf_r+0x152>
 800aab0:	2340      	movs	r3, #64	; 0x40
 800aab2:	eba0 000a 	sub.w	r0, r0, sl
 800aab6:	fa03 f000 	lsl.w	r0, r3, r0
 800aaba:	9b04      	ldr	r3, [sp, #16]
 800aabc:	4303      	orrs	r3, r0
 800aabe:	3401      	adds	r4, #1
 800aac0:	9304      	str	r3, [sp, #16]
 800aac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac6:	4826      	ldr	r0, [pc, #152]	; (800ab60 <_svfiprintf_r+0x1f0>)
 800aac8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aacc:	2206      	movs	r2, #6
 800aace:	f7f5 fb9f 	bl	8000210 <memchr>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d038      	beq.n	800ab48 <_svfiprintf_r+0x1d8>
 800aad6:	4b23      	ldr	r3, [pc, #140]	; (800ab64 <_svfiprintf_r+0x1f4>)
 800aad8:	bb1b      	cbnz	r3, 800ab22 <_svfiprintf_r+0x1b2>
 800aada:	9b03      	ldr	r3, [sp, #12]
 800aadc:	3307      	adds	r3, #7
 800aade:	f023 0307 	bic.w	r3, r3, #7
 800aae2:	3308      	adds	r3, #8
 800aae4:	9303      	str	r3, [sp, #12]
 800aae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae8:	4433      	add	r3, r6
 800aaea:	9309      	str	r3, [sp, #36]	; 0x24
 800aaec:	e767      	b.n	800a9be <_svfiprintf_r+0x4e>
 800aaee:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	2001      	movs	r0, #1
 800aaf6:	e7a5      	b.n	800aa44 <_svfiprintf_r+0xd4>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	3401      	adds	r4, #1
 800aafc:	9305      	str	r3, [sp, #20]
 800aafe:	4619      	mov	r1, r3
 800ab00:	f04f 0c0a 	mov.w	ip, #10
 800ab04:	4620      	mov	r0, r4
 800ab06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab0a:	3a30      	subs	r2, #48	; 0x30
 800ab0c:	2a09      	cmp	r2, #9
 800ab0e:	d903      	bls.n	800ab18 <_svfiprintf_r+0x1a8>
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d0c5      	beq.n	800aaa0 <_svfiprintf_r+0x130>
 800ab14:	9105      	str	r1, [sp, #20]
 800ab16:	e7c3      	b.n	800aaa0 <_svfiprintf_r+0x130>
 800ab18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e7f0      	b.n	800ab04 <_svfiprintf_r+0x194>
 800ab22:	ab03      	add	r3, sp, #12
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	462a      	mov	r2, r5
 800ab28:	4b0f      	ldr	r3, [pc, #60]	; (800ab68 <_svfiprintf_r+0x1f8>)
 800ab2a:	a904      	add	r1, sp, #16
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	f3af 8000 	nop.w
 800ab32:	1c42      	adds	r2, r0, #1
 800ab34:	4606      	mov	r6, r0
 800ab36:	d1d6      	bne.n	800aae6 <_svfiprintf_r+0x176>
 800ab38:	89ab      	ldrh	r3, [r5, #12]
 800ab3a:	065b      	lsls	r3, r3, #25
 800ab3c:	f53f af2c 	bmi.w	800a998 <_svfiprintf_r+0x28>
 800ab40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab42:	b01d      	add	sp, #116	; 0x74
 800ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab48:	ab03      	add	r3, sp, #12
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	462a      	mov	r2, r5
 800ab4e:	4b06      	ldr	r3, [pc, #24]	; (800ab68 <_svfiprintf_r+0x1f8>)
 800ab50:	a904      	add	r1, sp, #16
 800ab52:	4638      	mov	r0, r7
 800ab54:	f000 fba6 	bl	800b2a4 <_printf_i>
 800ab58:	e7eb      	b.n	800ab32 <_svfiprintf_r+0x1c2>
 800ab5a:	bf00      	nop
 800ab5c:	0800c51c 	.word	0x0800c51c
 800ab60:	0800c526 	.word	0x0800c526
 800ab64:	00000000 	.word	0x00000000
 800ab68:	0800a8b9 	.word	0x0800a8b9
 800ab6c:	0800c522 	.word	0x0800c522

0800ab70 <_sungetc_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	1c4b      	adds	r3, r1, #1
 800ab74:	4614      	mov	r4, r2
 800ab76:	d103      	bne.n	800ab80 <_sungetc_r+0x10>
 800ab78:	f04f 35ff 	mov.w	r5, #4294967295
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	8993      	ldrh	r3, [r2, #12]
 800ab82:	f023 0320 	bic.w	r3, r3, #32
 800ab86:	8193      	strh	r3, [r2, #12]
 800ab88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab8a:	6852      	ldr	r2, [r2, #4]
 800ab8c:	b2cd      	uxtb	r5, r1
 800ab8e:	b18b      	cbz	r3, 800abb4 <_sungetc_r+0x44>
 800ab90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ab92:	4293      	cmp	r3, r2
 800ab94:	dd08      	ble.n	800aba8 <_sungetc_r+0x38>
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	1e5a      	subs	r2, r3, #1
 800ab9a:	6022      	str	r2, [r4, #0]
 800ab9c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800aba0:	6863      	ldr	r3, [r4, #4]
 800aba2:	3301      	adds	r3, #1
 800aba4:	6063      	str	r3, [r4, #4]
 800aba6:	e7e9      	b.n	800ab7c <_sungetc_r+0xc>
 800aba8:	4621      	mov	r1, r4
 800abaa:	f000 ff4d 	bl	800ba48 <__submore>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d0f1      	beq.n	800ab96 <_sungetc_r+0x26>
 800abb2:	e7e1      	b.n	800ab78 <_sungetc_r+0x8>
 800abb4:	6921      	ldr	r1, [r4, #16]
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	b151      	cbz	r1, 800abd0 <_sungetc_r+0x60>
 800abba:	4299      	cmp	r1, r3
 800abbc:	d208      	bcs.n	800abd0 <_sungetc_r+0x60>
 800abbe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800abc2:	42a9      	cmp	r1, r5
 800abc4:	d104      	bne.n	800abd0 <_sungetc_r+0x60>
 800abc6:	3b01      	subs	r3, #1
 800abc8:	3201      	adds	r2, #1
 800abca:	6023      	str	r3, [r4, #0]
 800abcc:	6062      	str	r2, [r4, #4]
 800abce:	e7d5      	b.n	800ab7c <_sungetc_r+0xc>
 800abd0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800abd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abd8:	6363      	str	r3, [r4, #52]	; 0x34
 800abda:	2303      	movs	r3, #3
 800abdc:	63a3      	str	r3, [r4, #56]	; 0x38
 800abde:	4623      	mov	r3, r4
 800abe0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	2301      	movs	r3, #1
 800abe8:	e7dc      	b.n	800aba4 <_sungetc_r+0x34>

0800abea <__ssrefill_r>:
 800abea:	b510      	push	{r4, lr}
 800abec:	460c      	mov	r4, r1
 800abee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800abf0:	b169      	cbz	r1, 800ac0e <__ssrefill_r+0x24>
 800abf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abf6:	4299      	cmp	r1, r3
 800abf8:	d001      	beq.n	800abfe <__ssrefill_r+0x14>
 800abfa:	f001 f979 	bl	800bef0 <_free_r>
 800abfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac00:	6063      	str	r3, [r4, #4]
 800ac02:	2000      	movs	r0, #0
 800ac04:	6360      	str	r0, [r4, #52]	; 0x34
 800ac06:	b113      	cbz	r3, 800ac0e <__ssrefill_r+0x24>
 800ac08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ac0a:	6023      	str	r3, [r4, #0]
 800ac0c:	bd10      	pop	{r4, pc}
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	2300      	movs	r3, #0
 800ac14:	6063      	str	r3, [r4, #4]
 800ac16:	89a3      	ldrh	r3, [r4, #12]
 800ac18:	f043 0320 	orr.w	r3, r3, #32
 800ac1c:	81a3      	strh	r3, [r4, #12]
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac22:	e7f3      	b.n	800ac0c <__ssrefill_r+0x22>

0800ac24 <__ssvfiscanf_r>:
 800ac24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac28:	460c      	mov	r4, r1
 800ac2a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800ac2e:	2100      	movs	r1, #0
 800ac30:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ac34:	49b2      	ldr	r1, [pc, #712]	; (800af00 <__ssvfiscanf_r+0x2dc>)
 800ac36:	91a0      	str	r1, [sp, #640]	; 0x280
 800ac38:	f10d 0804 	add.w	r8, sp, #4
 800ac3c:	49b1      	ldr	r1, [pc, #708]	; (800af04 <__ssvfiscanf_r+0x2e0>)
 800ac3e:	4fb2      	ldr	r7, [pc, #712]	; (800af08 <__ssvfiscanf_r+0x2e4>)
 800ac40:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800af0c <__ssvfiscanf_r+0x2e8>
 800ac44:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ac48:	4606      	mov	r6, r0
 800ac4a:	91a1      	str	r1, [sp, #644]	; 0x284
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	f892 a000 	ldrb.w	sl, [r2]
 800ac52:	f1ba 0f00 	cmp.w	sl, #0
 800ac56:	f000 8151 	beq.w	800aefc <__ssvfiscanf_r+0x2d8>
 800ac5a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800ac5e:	f013 0308 	ands.w	r3, r3, #8
 800ac62:	f102 0501 	add.w	r5, r2, #1
 800ac66:	d019      	beq.n	800ac9c <__ssvfiscanf_r+0x78>
 800ac68:	6863      	ldr	r3, [r4, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	dd0f      	ble.n	800ac8e <__ssvfiscanf_r+0x6a>
 800ac6e:	6823      	ldr	r3, [r4, #0]
 800ac70:	781a      	ldrb	r2, [r3, #0]
 800ac72:	5cba      	ldrb	r2, [r7, r2]
 800ac74:	0712      	lsls	r2, r2, #28
 800ac76:	d401      	bmi.n	800ac7c <__ssvfiscanf_r+0x58>
 800ac78:	462a      	mov	r2, r5
 800ac7a:	e7e8      	b.n	800ac4e <__ssvfiscanf_r+0x2a>
 800ac7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ac7e:	3201      	adds	r2, #1
 800ac80:	9245      	str	r2, [sp, #276]	; 0x114
 800ac82:	6862      	ldr	r2, [r4, #4]
 800ac84:	3301      	adds	r3, #1
 800ac86:	3a01      	subs	r2, #1
 800ac88:	6062      	str	r2, [r4, #4]
 800ac8a:	6023      	str	r3, [r4, #0]
 800ac8c:	e7ec      	b.n	800ac68 <__ssvfiscanf_r+0x44>
 800ac8e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac90:	4621      	mov	r1, r4
 800ac92:	4630      	mov	r0, r6
 800ac94:	4798      	blx	r3
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d0e9      	beq.n	800ac6e <__ssvfiscanf_r+0x4a>
 800ac9a:	e7ed      	b.n	800ac78 <__ssvfiscanf_r+0x54>
 800ac9c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800aca0:	f040 8083 	bne.w	800adaa <__ssvfiscanf_r+0x186>
 800aca4:	9341      	str	r3, [sp, #260]	; 0x104
 800aca6:	9343      	str	r3, [sp, #268]	; 0x10c
 800aca8:	7853      	ldrb	r3, [r2, #1]
 800acaa:	2b2a      	cmp	r3, #42	; 0x2a
 800acac:	bf02      	ittt	eq
 800acae:	2310      	moveq	r3, #16
 800acb0:	1c95      	addeq	r5, r2, #2
 800acb2:	9341      	streq	r3, [sp, #260]	; 0x104
 800acb4:	220a      	movs	r2, #10
 800acb6:	46ab      	mov	fp, r5
 800acb8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800acbc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800acc0:	2b09      	cmp	r3, #9
 800acc2:	d91d      	bls.n	800ad00 <__ssvfiscanf_r+0xdc>
 800acc4:	4891      	ldr	r0, [pc, #580]	; (800af0c <__ssvfiscanf_r+0x2e8>)
 800acc6:	2203      	movs	r2, #3
 800acc8:	f7f5 faa2 	bl	8000210 <memchr>
 800accc:	b140      	cbz	r0, 800ace0 <__ssvfiscanf_r+0xbc>
 800acce:	2301      	movs	r3, #1
 800acd0:	eba0 0009 	sub.w	r0, r0, r9
 800acd4:	fa03 f000 	lsl.w	r0, r3, r0
 800acd8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800acda:	4318      	orrs	r0, r3
 800acdc:	9041      	str	r0, [sp, #260]	; 0x104
 800acde:	465d      	mov	r5, fp
 800ace0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ace4:	2b78      	cmp	r3, #120	; 0x78
 800ace6:	d806      	bhi.n	800acf6 <__ssvfiscanf_r+0xd2>
 800ace8:	2b57      	cmp	r3, #87	; 0x57
 800acea:	d810      	bhi.n	800ad0e <__ssvfiscanf_r+0xea>
 800acec:	2b25      	cmp	r3, #37	; 0x25
 800acee:	d05c      	beq.n	800adaa <__ssvfiscanf_r+0x186>
 800acf0:	d856      	bhi.n	800ada0 <__ssvfiscanf_r+0x17c>
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d074      	beq.n	800ade0 <__ssvfiscanf_r+0x1bc>
 800acf6:	2303      	movs	r3, #3
 800acf8:	9347      	str	r3, [sp, #284]	; 0x11c
 800acfa:	230a      	movs	r3, #10
 800acfc:	9342      	str	r3, [sp, #264]	; 0x108
 800acfe:	e081      	b.n	800ae04 <__ssvfiscanf_r+0x1e0>
 800ad00:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ad02:	fb02 1303 	mla	r3, r2, r3, r1
 800ad06:	3b30      	subs	r3, #48	; 0x30
 800ad08:	9343      	str	r3, [sp, #268]	; 0x10c
 800ad0a:	465d      	mov	r5, fp
 800ad0c:	e7d3      	b.n	800acb6 <__ssvfiscanf_r+0x92>
 800ad0e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ad12:	2a20      	cmp	r2, #32
 800ad14:	d8ef      	bhi.n	800acf6 <__ssvfiscanf_r+0xd2>
 800ad16:	a101      	add	r1, pc, #4	; (adr r1, 800ad1c <__ssvfiscanf_r+0xf8>)
 800ad18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad1c:	0800adef 	.word	0x0800adef
 800ad20:	0800acf7 	.word	0x0800acf7
 800ad24:	0800acf7 	.word	0x0800acf7
 800ad28:	0800ae4d 	.word	0x0800ae4d
 800ad2c:	0800acf7 	.word	0x0800acf7
 800ad30:	0800acf7 	.word	0x0800acf7
 800ad34:	0800acf7 	.word	0x0800acf7
 800ad38:	0800acf7 	.word	0x0800acf7
 800ad3c:	0800acf7 	.word	0x0800acf7
 800ad40:	0800acf7 	.word	0x0800acf7
 800ad44:	0800acf7 	.word	0x0800acf7
 800ad48:	0800ae63 	.word	0x0800ae63
 800ad4c:	0800ae39 	.word	0x0800ae39
 800ad50:	0800ada7 	.word	0x0800ada7
 800ad54:	0800ada7 	.word	0x0800ada7
 800ad58:	0800ada7 	.word	0x0800ada7
 800ad5c:	0800acf7 	.word	0x0800acf7
 800ad60:	0800ae3d 	.word	0x0800ae3d
 800ad64:	0800acf7 	.word	0x0800acf7
 800ad68:	0800acf7 	.word	0x0800acf7
 800ad6c:	0800acf7 	.word	0x0800acf7
 800ad70:	0800acf7 	.word	0x0800acf7
 800ad74:	0800ae73 	.word	0x0800ae73
 800ad78:	0800ae45 	.word	0x0800ae45
 800ad7c:	0800ade7 	.word	0x0800ade7
 800ad80:	0800acf7 	.word	0x0800acf7
 800ad84:	0800acf7 	.word	0x0800acf7
 800ad88:	0800ae6f 	.word	0x0800ae6f
 800ad8c:	0800acf7 	.word	0x0800acf7
 800ad90:	0800ae39 	.word	0x0800ae39
 800ad94:	0800acf7 	.word	0x0800acf7
 800ad98:	0800acf7 	.word	0x0800acf7
 800ad9c:	0800adef 	.word	0x0800adef
 800ada0:	3b45      	subs	r3, #69	; 0x45
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d8a7      	bhi.n	800acf6 <__ssvfiscanf_r+0xd2>
 800ada6:	2305      	movs	r3, #5
 800ada8:	e02b      	b.n	800ae02 <__ssvfiscanf_r+0x1de>
 800adaa:	6863      	ldr	r3, [r4, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	dd0d      	ble.n	800adcc <__ssvfiscanf_r+0x1a8>
 800adb0:	6823      	ldr	r3, [r4, #0]
 800adb2:	781a      	ldrb	r2, [r3, #0]
 800adb4:	4552      	cmp	r2, sl
 800adb6:	f040 80a1 	bne.w	800aefc <__ssvfiscanf_r+0x2d8>
 800adba:	3301      	adds	r3, #1
 800adbc:	6862      	ldr	r2, [r4, #4]
 800adbe:	6023      	str	r3, [r4, #0]
 800adc0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800adc2:	3a01      	subs	r2, #1
 800adc4:	3301      	adds	r3, #1
 800adc6:	6062      	str	r2, [r4, #4]
 800adc8:	9345      	str	r3, [sp, #276]	; 0x114
 800adca:	e755      	b.n	800ac78 <__ssvfiscanf_r+0x54>
 800adcc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800adce:	4621      	mov	r1, r4
 800add0:	4630      	mov	r0, r6
 800add2:	4798      	blx	r3
 800add4:	2800      	cmp	r0, #0
 800add6:	d0eb      	beq.n	800adb0 <__ssvfiscanf_r+0x18c>
 800add8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800adda:	2800      	cmp	r0, #0
 800addc:	f040 8084 	bne.w	800aee8 <__ssvfiscanf_r+0x2c4>
 800ade0:	f04f 30ff 	mov.w	r0, #4294967295
 800ade4:	e086      	b.n	800aef4 <__ssvfiscanf_r+0x2d0>
 800ade6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ade8:	f042 0220 	orr.w	r2, r2, #32
 800adec:	9241      	str	r2, [sp, #260]	; 0x104
 800adee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800adf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adf4:	9241      	str	r2, [sp, #260]	; 0x104
 800adf6:	2210      	movs	r2, #16
 800adf8:	2b6f      	cmp	r3, #111	; 0x6f
 800adfa:	9242      	str	r2, [sp, #264]	; 0x108
 800adfc:	bf34      	ite	cc
 800adfe:	2303      	movcc	r3, #3
 800ae00:	2304      	movcs	r3, #4
 800ae02:	9347      	str	r3, [sp, #284]	; 0x11c
 800ae04:	6863      	ldr	r3, [r4, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	dd41      	ble.n	800ae8e <__ssvfiscanf_r+0x26a>
 800ae0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae0c:	0659      	lsls	r1, r3, #25
 800ae0e:	d404      	bmi.n	800ae1a <__ssvfiscanf_r+0x1f6>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	781a      	ldrb	r2, [r3, #0]
 800ae14:	5cba      	ldrb	r2, [r7, r2]
 800ae16:	0712      	lsls	r2, r2, #28
 800ae18:	d440      	bmi.n	800ae9c <__ssvfiscanf_r+0x278>
 800ae1a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	dc4f      	bgt.n	800aec0 <__ssvfiscanf_r+0x29c>
 800ae20:	466b      	mov	r3, sp
 800ae22:	4622      	mov	r2, r4
 800ae24:	a941      	add	r1, sp, #260	; 0x104
 800ae26:	4630      	mov	r0, r6
 800ae28:	f000 fb62 	bl	800b4f0 <_scanf_chars>
 800ae2c:	2801      	cmp	r0, #1
 800ae2e:	d065      	beq.n	800aefc <__ssvfiscanf_r+0x2d8>
 800ae30:	2802      	cmp	r0, #2
 800ae32:	f47f af21 	bne.w	800ac78 <__ssvfiscanf_r+0x54>
 800ae36:	e7cf      	b.n	800add8 <__ssvfiscanf_r+0x1b4>
 800ae38:	220a      	movs	r2, #10
 800ae3a:	e7dd      	b.n	800adf8 <__ssvfiscanf_r+0x1d4>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9342      	str	r3, [sp, #264]	; 0x108
 800ae40:	2303      	movs	r3, #3
 800ae42:	e7de      	b.n	800ae02 <__ssvfiscanf_r+0x1de>
 800ae44:	2308      	movs	r3, #8
 800ae46:	9342      	str	r3, [sp, #264]	; 0x108
 800ae48:	2304      	movs	r3, #4
 800ae4a:	e7da      	b.n	800ae02 <__ssvfiscanf_r+0x1de>
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	4640      	mov	r0, r8
 800ae50:	f000 fcbc 	bl	800b7cc <__sccl>
 800ae54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae5a:	9341      	str	r3, [sp, #260]	; 0x104
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e7cf      	b.n	800ae02 <__ssvfiscanf_r+0x1de>
 800ae62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ae64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae68:	9341      	str	r3, [sp, #260]	; 0x104
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e7c9      	b.n	800ae02 <__ssvfiscanf_r+0x1de>
 800ae6e:	2302      	movs	r3, #2
 800ae70:	e7c7      	b.n	800ae02 <__ssvfiscanf_r+0x1de>
 800ae72:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ae74:	06c3      	lsls	r3, r0, #27
 800ae76:	f53f aeff 	bmi.w	800ac78 <__ssvfiscanf_r+0x54>
 800ae7a:	9b00      	ldr	r3, [sp, #0]
 800ae7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae7e:	1d19      	adds	r1, r3, #4
 800ae80:	9100      	str	r1, [sp, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	07c0      	lsls	r0, r0, #31
 800ae86:	bf4c      	ite	mi
 800ae88:	801a      	strhmi	r2, [r3, #0]
 800ae8a:	601a      	strpl	r2, [r3, #0]
 800ae8c:	e6f4      	b.n	800ac78 <__ssvfiscanf_r+0x54>
 800ae8e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ae90:	4621      	mov	r1, r4
 800ae92:	4630      	mov	r0, r6
 800ae94:	4798      	blx	r3
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d0b7      	beq.n	800ae0a <__ssvfiscanf_r+0x1e6>
 800ae9a:	e79d      	b.n	800add8 <__ssvfiscanf_r+0x1b4>
 800ae9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae9e:	3201      	adds	r2, #1
 800aea0:	9245      	str	r2, [sp, #276]	; 0x114
 800aea2:	6862      	ldr	r2, [r4, #4]
 800aea4:	3a01      	subs	r2, #1
 800aea6:	2a00      	cmp	r2, #0
 800aea8:	6062      	str	r2, [r4, #4]
 800aeaa:	dd02      	ble.n	800aeb2 <__ssvfiscanf_r+0x28e>
 800aeac:	3301      	adds	r3, #1
 800aeae:	6023      	str	r3, [r4, #0]
 800aeb0:	e7ae      	b.n	800ae10 <__ssvfiscanf_r+0x1ec>
 800aeb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	4798      	blx	r3
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d0a8      	beq.n	800ae10 <__ssvfiscanf_r+0x1ec>
 800aebe:	e78b      	b.n	800add8 <__ssvfiscanf_r+0x1b4>
 800aec0:	2b04      	cmp	r3, #4
 800aec2:	dc06      	bgt.n	800aed2 <__ssvfiscanf_r+0x2ae>
 800aec4:	466b      	mov	r3, sp
 800aec6:	4622      	mov	r2, r4
 800aec8:	a941      	add	r1, sp, #260	; 0x104
 800aeca:	4630      	mov	r0, r6
 800aecc:	f000 fb68 	bl	800b5a0 <_scanf_i>
 800aed0:	e7ac      	b.n	800ae2c <__ssvfiscanf_r+0x208>
 800aed2:	4b0f      	ldr	r3, [pc, #60]	; (800af10 <__ssvfiscanf_r+0x2ec>)
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f43f aecf 	beq.w	800ac78 <__ssvfiscanf_r+0x54>
 800aeda:	466b      	mov	r3, sp
 800aedc:	4622      	mov	r2, r4
 800aede:	a941      	add	r1, sp, #260	; 0x104
 800aee0:	4630      	mov	r0, r6
 800aee2:	f3af 8000 	nop.w
 800aee6:	e7a1      	b.n	800ae2c <__ssvfiscanf_r+0x208>
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aeee:	bf18      	it	ne
 800aef0:	f04f 30ff 	movne.w	r0, #4294967295
 800aef4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aefe:	e7f9      	b.n	800aef4 <__ssvfiscanf_r+0x2d0>
 800af00:	0800ab71 	.word	0x0800ab71
 800af04:	0800abeb 	.word	0x0800abeb
 800af08:	0800c56b 	.word	0x0800c56b
 800af0c:	0800c522 	.word	0x0800c522
 800af10:	00000000 	.word	0x00000000

0800af14 <__sfputc_r>:
 800af14:	6893      	ldr	r3, [r2, #8]
 800af16:	3b01      	subs	r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	b410      	push	{r4}
 800af1c:	6093      	str	r3, [r2, #8]
 800af1e:	da08      	bge.n	800af32 <__sfputc_r+0x1e>
 800af20:	6994      	ldr	r4, [r2, #24]
 800af22:	42a3      	cmp	r3, r4
 800af24:	db01      	blt.n	800af2a <__sfputc_r+0x16>
 800af26:	290a      	cmp	r1, #10
 800af28:	d103      	bne.n	800af32 <__sfputc_r+0x1e>
 800af2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af2e:	f000 bdc5 	b.w	800babc <__swbuf_r>
 800af32:	6813      	ldr	r3, [r2, #0]
 800af34:	1c58      	adds	r0, r3, #1
 800af36:	6010      	str	r0, [r2, #0]
 800af38:	7019      	strb	r1, [r3, #0]
 800af3a:	4608      	mov	r0, r1
 800af3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <__sfputs_r>:
 800af42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af44:	4606      	mov	r6, r0
 800af46:	460f      	mov	r7, r1
 800af48:	4614      	mov	r4, r2
 800af4a:	18d5      	adds	r5, r2, r3
 800af4c:	42ac      	cmp	r4, r5
 800af4e:	d101      	bne.n	800af54 <__sfputs_r+0x12>
 800af50:	2000      	movs	r0, #0
 800af52:	e007      	b.n	800af64 <__sfputs_r+0x22>
 800af54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af58:	463a      	mov	r2, r7
 800af5a:	4630      	mov	r0, r6
 800af5c:	f7ff ffda 	bl	800af14 <__sfputc_r>
 800af60:	1c43      	adds	r3, r0, #1
 800af62:	d1f3      	bne.n	800af4c <__sfputs_r+0xa>
 800af64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af68 <_vfiprintf_r>:
 800af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	460d      	mov	r5, r1
 800af6e:	b09d      	sub	sp, #116	; 0x74
 800af70:	4614      	mov	r4, r2
 800af72:	4698      	mov	r8, r3
 800af74:	4606      	mov	r6, r0
 800af76:	b118      	cbz	r0, 800af80 <_vfiprintf_r+0x18>
 800af78:	6983      	ldr	r3, [r0, #24]
 800af7a:	b90b      	cbnz	r3, 800af80 <_vfiprintf_r+0x18>
 800af7c:	f7ff fb90 	bl	800a6a0 <__sinit>
 800af80:	4b89      	ldr	r3, [pc, #548]	; (800b1a8 <_vfiprintf_r+0x240>)
 800af82:	429d      	cmp	r5, r3
 800af84:	d11b      	bne.n	800afbe <_vfiprintf_r+0x56>
 800af86:	6875      	ldr	r5, [r6, #4]
 800af88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af8a:	07d9      	lsls	r1, r3, #31
 800af8c:	d405      	bmi.n	800af9a <_vfiprintf_r+0x32>
 800af8e:	89ab      	ldrh	r3, [r5, #12]
 800af90:	059a      	lsls	r2, r3, #22
 800af92:	d402      	bmi.n	800af9a <_vfiprintf_r+0x32>
 800af94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af96:	f7ff fc21 	bl	800a7dc <__retarget_lock_acquire_recursive>
 800af9a:	89ab      	ldrh	r3, [r5, #12]
 800af9c:	071b      	lsls	r3, r3, #28
 800af9e:	d501      	bpl.n	800afa4 <_vfiprintf_r+0x3c>
 800afa0:	692b      	ldr	r3, [r5, #16]
 800afa2:	b9eb      	cbnz	r3, 800afe0 <_vfiprintf_r+0x78>
 800afa4:	4629      	mov	r1, r5
 800afa6:	4630      	mov	r0, r6
 800afa8:	f000 fdda 	bl	800bb60 <__swsetup_r>
 800afac:	b1c0      	cbz	r0, 800afe0 <_vfiprintf_r+0x78>
 800afae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afb0:	07dc      	lsls	r4, r3, #31
 800afb2:	d50e      	bpl.n	800afd2 <_vfiprintf_r+0x6a>
 800afb4:	f04f 30ff 	mov.w	r0, #4294967295
 800afb8:	b01d      	add	sp, #116	; 0x74
 800afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbe:	4b7b      	ldr	r3, [pc, #492]	; (800b1ac <_vfiprintf_r+0x244>)
 800afc0:	429d      	cmp	r5, r3
 800afc2:	d101      	bne.n	800afc8 <_vfiprintf_r+0x60>
 800afc4:	68b5      	ldr	r5, [r6, #8]
 800afc6:	e7df      	b.n	800af88 <_vfiprintf_r+0x20>
 800afc8:	4b79      	ldr	r3, [pc, #484]	; (800b1b0 <_vfiprintf_r+0x248>)
 800afca:	429d      	cmp	r5, r3
 800afcc:	bf08      	it	eq
 800afce:	68f5      	ldreq	r5, [r6, #12]
 800afd0:	e7da      	b.n	800af88 <_vfiprintf_r+0x20>
 800afd2:	89ab      	ldrh	r3, [r5, #12]
 800afd4:	0598      	lsls	r0, r3, #22
 800afd6:	d4ed      	bmi.n	800afb4 <_vfiprintf_r+0x4c>
 800afd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afda:	f7ff fc00 	bl	800a7de <__retarget_lock_release_recursive>
 800afde:	e7e9      	b.n	800afb4 <_vfiprintf_r+0x4c>
 800afe0:	2300      	movs	r3, #0
 800afe2:	9309      	str	r3, [sp, #36]	; 0x24
 800afe4:	2320      	movs	r3, #32
 800afe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afea:	f8cd 800c 	str.w	r8, [sp, #12]
 800afee:	2330      	movs	r3, #48	; 0x30
 800aff0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1b4 <_vfiprintf_r+0x24c>
 800aff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aff8:	f04f 0901 	mov.w	r9, #1
 800affc:	4623      	mov	r3, r4
 800affe:	469a      	mov	sl, r3
 800b000:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b004:	b10a      	cbz	r2, 800b00a <_vfiprintf_r+0xa2>
 800b006:	2a25      	cmp	r2, #37	; 0x25
 800b008:	d1f9      	bne.n	800affe <_vfiprintf_r+0x96>
 800b00a:	ebba 0b04 	subs.w	fp, sl, r4
 800b00e:	d00b      	beq.n	800b028 <_vfiprintf_r+0xc0>
 800b010:	465b      	mov	r3, fp
 800b012:	4622      	mov	r2, r4
 800b014:	4629      	mov	r1, r5
 800b016:	4630      	mov	r0, r6
 800b018:	f7ff ff93 	bl	800af42 <__sfputs_r>
 800b01c:	3001      	adds	r0, #1
 800b01e:	f000 80aa 	beq.w	800b176 <_vfiprintf_r+0x20e>
 800b022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b024:	445a      	add	r2, fp
 800b026:	9209      	str	r2, [sp, #36]	; 0x24
 800b028:	f89a 3000 	ldrb.w	r3, [sl]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 80a2 	beq.w	800b176 <_vfiprintf_r+0x20e>
 800b032:	2300      	movs	r3, #0
 800b034:	f04f 32ff 	mov.w	r2, #4294967295
 800b038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b03c:	f10a 0a01 	add.w	sl, sl, #1
 800b040:	9304      	str	r3, [sp, #16]
 800b042:	9307      	str	r3, [sp, #28]
 800b044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b048:	931a      	str	r3, [sp, #104]	; 0x68
 800b04a:	4654      	mov	r4, sl
 800b04c:	2205      	movs	r2, #5
 800b04e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b052:	4858      	ldr	r0, [pc, #352]	; (800b1b4 <_vfiprintf_r+0x24c>)
 800b054:	f7f5 f8dc 	bl	8000210 <memchr>
 800b058:	9a04      	ldr	r2, [sp, #16]
 800b05a:	b9d8      	cbnz	r0, 800b094 <_vfiprintf_r+0x12c>
 800b05c:	06d1      	lsls	r1, r2, #27
 800b05e:	bf44      	itt	mi
 800b060:	2320      	movmi	r3, #32
 800b062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b066:	0713      	lsls	r3, r2, #28
 800b068:	bf44      	itt	mi
 800b06a:	232b      	movmi	r3, #43	; 0x2b
 800b06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b070:	f89a 3000 	ldrb.w	r3, [sl]
 800b074:	2b2a      	cmp	r3, #42	; 0x2a
 800b076:	d015      	beq.n	800b0a4 <_vfiprintf_r+0x13c>
 800b078:	9a07      	ldr	r2, [sp, #28]
 800b07a:	4654      	mov	r4, sl
 800b07c:	2000      	movs	r0, #0
 800b07e:	f04f 0c0a 	mov.w	ip, #10
 800b082:	4621      	mov	r1, r4
 800b084:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b088:	3b30      	subs	r3, #48	; 0x30
 800b08a:	2b09      	cmp	r3, #9
 800b08c:	d94e      	bls.n	800b12c <_vfiprintf_r+0x1c4>
 800b08e:	b1b0      	cbz	r0, 800b0be <_vfiprintf_r+0x156>
 800b090:	9207      	str	r2, [sp, #28]
 800b092:	e014      	b.n	800b0be <_vfiprintf_r+0x156>
 800b094:	eba0 0308 	sub.w	r3, r0, r8
 800b098:	fa09 f303 	lsl.w	r3, r9, r3
 800b09c:	4313      	orrs	r3, r2
 800b09e:	9304      	str	r3, [sp, #16]
 800b0a0:	46a2      	mov	sl, r4
 800b0a2:	e7d2      	b.n	800b04a <_vfiprintf_r+0xe2>
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	1d19      	adds	r1, r3, #4
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	9103      	str	r1, [sp, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	bfbb      	ittet	lt
 800b0b0:	425b      	neglt	r3, r3
 800b0b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b0b6:	9307      	strge	r3, [sp, #28]
 800b0b8:	9307      	strlt	r3, [sp, #28]
 800b0ba:	bfb8      	it	lt
 800b0bc:	9204      	strlt	r2, [sp, #16]
 800b0be:	7823      	ldrb	r3, [r4, #0]
 800b0c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b0c2:	d10c      	bne.n	800b0de <_vfiprintf_r+0x176>
 800b0c4:	7863      	ldrb	r3, [r4, #1]
 800b0c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c8:	d135      	bne.n	800b136 <_vfiprintf_r+0x1ce>
 800b0ca:	9b03      	ldr	r3, [sp, #12]
 800b0cc:	1d1a      	adds	r2, r3, #4
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	9203      	str	r2, [sp, #12]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	bfb8      	it	lt
 800b0d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0da:	3402      	adds	r4, #2
 800b0dc:	9305      	str	r3, [sp, #20]
 800b0de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1c4 <_vfiprintf_r+0x25c>
 800b0e2:	7821      	ldrb	r1, [r4, #0]
 800b0e4:	2203      	movs	r2, #3
 800b0e6:	4650      	mov	r0, sl
 800b0e8:	f7f5 f892 	bl	8000210 <memchr>
 800b0ec:	b140      	cbz	r0, 800b100 <_vfiprintf_r+0x198>
 800b0ee:	2340      	movs	r3, #64	; 0x40
 800b0f0:	eba0 000a 	sub.w	r0, r0, sl
 800b0f4:	fa03 f000 	lsl.w	r0, r3, r0
 800b0f8:	9b04      	ldr	r3, [sp, #16]
 800b0fa:	4303      	orrs	r3, r0
 800b0fc:	3401      	adds	r4, #1
 800b0fe:	9304      	str	r3, [sp, #16]
 800b100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b104:	482c      	ldr	r0, [pc, #176]	; (800b1b8 <_vfiprintf_r+0x250>)
 800b106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b10a:	2206      	movs	r2, #6
 800b10c:	f7f5 f880 	bl	8000210 <memchr>
 800b110:	2800      	cmp	r0, #0
 800b112:	d03f      	beq.n	800b194 <_vfiprintf_r+0x22c>
 800b114:	4b29      	ldr	r3, [pc, #164]	; (800b1bc <_vfiprintf_r+0x254>)
 800b116:	bb1b      	cbnz	r3, 800b160 <_vfiprintf_r+0x1f8>
 800b118:	9b03      	ldr	r3, [sp, #12]
 800b11a:	3307      	adds	r3, #7
 800b11c:	f023 0307 	bic.w	r3, r3, #7
 800b120:	3308      	adds	r3, #8
 800b122:	9303      	str	r3, [sp, #12]
 800b124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b126:	443b      	add	r3, r7
 800b128:	9309      	str	r3, [sp, #36]	; 0x24
 800b12a:	e767      	b.n	800affc <_vfiprintf_r+0x94>
 800b12c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b130:	460c      	mov	r4, r1
 800b132:	2001      	movs	r0, #1
 800b134:	e7a5      	b.n	800b082 <_vfiprintf_r+0x11a>
 800b136:	2300      	movs	r3, #0
 800b138:	3401      	adds	r4, #1
 800b13a:	9305      	str	r3, [sp, #20]
 800b13c:	4619      	mov	r1, r3
 800b13e:	f04f 0c0a 	mov.w	ip, #10
 800b142:	4620      	mov	r0, r4
 800b144:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b148:	3a30      	subs	r2, #48	; 0x30
 800b14a:	2a09      	cmp	r2, #9
 800b14c:	d903      	bls.n	800b156 <_vfiprintf_r+0x1ee>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d0c5      	beq.n	800b0de <_vfiprintf_r+0x176>
 800b152:	9105      	str	r1, [sp, #20]
 800b154:	e7c3      	b.n	800b0de <_vfiprintf_r+0x176>
 800b156:	fb0c 2101 	mla	r1, ip, r1, r2
 800b15a:	4604      	mov	r4, r0
 800b15c:	2301      	movs	r3, #1
 800b15e:	e7f0      	b.n	800b142 <_vfiprintf_r+0x1da>
 800b160:	ab03      	add	r3, sp, #12
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	462a      	mov	r2, r5
 800b166:	4b16      	ldr	r3, [pc, #88]	; (800b1c0 <_vfiprintf_r+0x258>)
 800b168:	a904      	add	r1, sp, #16
 800b16a:	4630      	mov	r0, r6
 800b16c:	f3af 8000 	nop.w
 800b170:	4607      	mov	r7, r0
 800b172:	1c78      	adds	r0, r7, #1
 800b174:	d1d6      	bne.n	800b124 <_vfiprintf_r+0x1bc>
 800b176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b178:	07d9      	lsls	r1, r3, #31
 800b17a:	d405      	bmi.n	800b188 <_vfiprintf_r+0x220>
 800b17c:	89ab      	ldrh	r3, [r5, #12]
 800b17e:	059a      	lsls	r2, r3, #22
 800b180:	d402      	bmi.n	800b188 <_vfiprintf_r+0x220>
 800b182:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b184:	f7ff fb2b 	bl	800a7de <__retarget_lock_release_recursive>
 800b188:	89ab      	ldrh	r3, [r5, #12]
 800b18a:	065b      	lsls	r3, r3, #25
 800b18c:	f53f af12 	bmi.w	800afb4 <_vfiprintf_r+0x4c>
 800b190:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b192:	e711      	b.n	800afb8 <_vfiprintf_r+0x50>
 800b194:	ab03      	add	r3, sp, #12
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	462a      	mov	r2, r5
 800b19a:	4b09      	ldr	r3, [pc, #36]	; (800b1c0 <_vfiprintf_r+0x258>)
 800b19c:	a904      	add	r1, sp, #16
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f000 f880 	bl	800b2a4 <_printf_i>
 800b1a4:	e7e4      	b.n	800b170 <_vfiprintf_r+0x208>
 800b1a6:	bf00      	nop
 800b1a8:	0800c4dc 	.word	0x0800c4dc
 800b1ac:	0800c4fc 	.word	0x0800c4fc
 800b1b0:	0800c4bc 	.word	0x0800c4bc
 800b1b4:	0800c51c 	.word	0x0800c51c
 800b1b8:	0800c526 	.word	0x0800c526
 800b1bc:	00000000 	.word	0x00000000
 800b1c0:	0800af43 	.word	0x0800af43
 800b1c4:	0800c522 	.word	0x0800c522

0800b1c8 <_printf_common>:
 800b1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1cc:	4616      	mov	r6, r2
 800b1ce:	4699      	mov	r9, r3
 800b1d0:	688a      	ldr	r2, [r1, #8]
 800b1d2:	690b      	ldr	r3, [r1, #16]
 800b1d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	bfb8      	it	lt
 800b1dc:	4613      	movlt	r3, r2
 800b1de:	6033      	str	r3, [r6, #0]
 800b1e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	b10a      	cbz	r2, 800b1ee <_printf_common+0x26>
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	6033      	str	r3, [r6, #0]
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	0699      	lsls	r1, r3, #26
 800b1f2:	bf42      	ittt	mi
 800b1f4:	6833      	ldrmi	r3, [r6, #0]
 800b1f6:	3302      	addmi	r3, #2
 800b1f8:	6033      	strmi	r3, [r6, #0]
 800b1fa:	6825      	ldr	r5, [r4, #0]
 800b1fc:	f015 0506 	ands.w	r5, r5, #6
 800b200:	d106      	bne.n	800b210 <_printf_common+0x48>
 800b202:	f104 0a19 	add.w	sl, r4, #25
 800b206:	68e3      	ldr	r3, [r4, #12]
 800b208:	6832      	ldr	r2, [r6, #0]
 800b20a:	1a9b      	subs	r3, r3, r2
 800b20c:	42ab      	cmp	r3, r5
 800b20e:	dc26      	bgt.n	800b25e <_printf_common+0x96>
 800b210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b214:	1e13      	subs	r3, r2, #0
 800b216:	6822      	ldr	r2, [r4, #0]
 800b218:	bf18      	it	ne
 800b21a:	2301      	movne	r3, #1
 800b21c:	0692      	lsls	r2, r2, #26
 800b21e:	d42b      	bmi.n	800b278 <_printf_common+0xb0>
 800b220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b224:	4649      	mov	r1, r9
 800b226:	4638      	mov	r0, r7
 800b228:	47c0      	blx	r8
 800b22a:	3001      	adds	r0, #1
 800b22c:	d01e      	beq.n	800b26c <_printf_common+0xa4>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	68e5      	ldr	r5, [r4, #12]
 800b232:	6832      	ldr	r2, [r6, #0]
 800b234:	f003 0306 	and.w	r3, r3, #6
 800b238:	2b04      	cmp	r3, #4
 800b23a:	bf08      	it	eq
 800b23c:	1aad      	subeq	r5, r5, r2
 800b23e:	68a3      	ldr	r3, [r4, #8]
 800b240:	6922      	ldr	r2, [r4, #16]
 800b242:	bf0c      	ite	eq
 800b244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b248:	2500      	movne	r5, #0
 800b24a:	4293      	cmp	r3, r2
 800b24c:	bfc4      	itt	gt
 800b24e:	1a9b      	subgt	r3, r3, r2
 800b250:	18ed      	addgt	r5, r5, r3
 800b252:	2600      	movs	r6, #0
 800b254:	341a      	adds	r4, #26
 800b256:	42b5      	cmp	r5, r6
 800b258:	d11a      	bne.n	800b290 <_printf_common+0xc8>
 800b25a:	2000      	movs	r0, #0
 800b25c:	e008      	b.n	800b270 <_printf_common+0xa8>
 800b25e:	2301      	movs	r3, #1
 800b260:	4652      	mov	r2, sl
 800b262:	4649      	mov	r1, r9
 800b264:	4638      	mov	r0, r7
 800b266:	47c0      	blx	r8
 800b268:	3001      	adds	r0, #1
 800b26a:	d103      	bne.n	800b274 <_printf_common+0xac>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295
 800b270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b274:	3501      	adds	r5, #1
 800b276:	e7c6      	b.n	800b206 <_printf_common+0x3e>
 800b278:	18e1      	adds	r1, r4, r3
 800b27a:	1c5a      	adds	r2, r3, #1
 800b27c:	2030      	movs	r0, #48	; 0x30
 800b27e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b282:	4422      	add	r2, r4
 800b284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b288:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b28c:	3302      	adds	r3, #2
 800b28e:	e7c7      	b.n	800b220 <_printf_common+0x58>
 800b290:	2301      	movs	r3, #1
 800b292:	4622      	mov	r2, r4
 800b294:	4649      	mov	r1, r9
 800b296:	4638      	mov	r0, r7
 800b298:	47c0      	blx	r8
 800b29a:	3001      	adds	r0, #1
 800b29c:	d0e6      	beq.n	800b26c <_printf_common+0xa4>
 800b29e:	3601      	adds	r6, #1
 800b2a0:	e7d9      	b.n	800b256 <_printf_common+0x8e>
	...

0800b2a4 <_printf_i>:
 800b2a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	4691      	mov	r9, r2
 800b2ac:	7e27      	ldrb	r7, [r4, #24]
 800b2ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2b0:	2f78      	cmp	r7, #120	; 0x78
 800b2b2:	4680      	mov	r8, r0
 800b2b4:	469a      	mov	sl, r3
 800b2b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2ba:	d807      	bhi.n	800b2cc <_printf_i+0x28>
 800b2bc:	2f62      	cmp	r7, #98	; 0x62
 800b2be:	d80a      	bhi.n	800b2d6 <_printf_i+0x32>
 800b2c0:	2f00      	cmp	r7, #0
 800b2c2:	f000 80d8 	beq.w	800b476 <_printf_i+0x1d2>
 800b2c6:	2f58      	cmp	r7, #88	; 0x58
 800b2c8:	f000 80a3 	beq.w	800b412 <_printf_i+0x16e>
 800b2cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b2d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2d4:	e03a      	b.n	800b34c <_printf_i+0xa8>
 800b2d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2da:	2b15      	cmp	r3, #21
 800b2dc:	d8f6      	bhi.n	800b2cc <_printf_i+0x28>
 800b2de:	a001      	add	r0, pc, #4	; (adr r0, 800b2e4 <_printf_i+0x40>)
 800b2e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b2e4:	0800b33d 	.word	0x0800b33d
 800b2e8:	0800b351 	.word	0x0800b351
 800b2ec:	0800b2cd 	.word	0x0800b2cd
 800b2f0:	0800b2cd 	.word	0x0800b2cd
 800b2f4:	0800b2cd 	.word	0x0800b2cd
 800b2f8:	0800b2cd 	.word	0x0800b2cd
 800b2fc:	0800b351 	.word	0x0800b351
 800b300:	0800b2cd 	.word	0x0800b2cd
 800b304:	0800b2cd 	.word	0x0800b2cd
 800b308:	0800b2cd 	.word	0x0800b2cd
 800b30c:	0800b2cd 	.word	0x0800b2cd
 800b310:	0800b45d 	.word	0x0800b45d
 800b314:	0800b381 	.word	0x0800b381
 800b318:	0800b43f 	.word	0x0800b43f
 800b31c:	0800b2cd 	.word	0x0800b2cd
 800b320:	0800b2cd 	.word	0x0800b2cd
 800b324:	0800b47f 	.word	0x0800b47f
 800b328:	0800b2cd 	.word	0x0800b2cd
 800b32c:	0800b381 	.word	0x0800b381
 800b330:	0800b2cd 	.word	0x0800b2cd
 800b334:	0800b2cd 	.word	0x0800b2cd
 800b338:	0800b447 	.word	0x0800b447
 800b33c:	680b      	ldr	r3, [r1, #0]
 800b33e:	1d1a      	adds	r2, r3, #4
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	600a      	str	r2, [r1, #0]
 800b344:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b34c:	2301      	movs	r3, #1
 800b34e:	e0a3      	b.n	800b498 <_printf_i+0x1f4>
 800b350:	6825      	ldr	r5, [r4, #0]
 800b352:	6808      	ldr	r0, [r1, #0]
 800b354:	062e      	lsls	r6, r5, #24
 800b356:	f100 0304 	add.w	r3, r0, #4
 800b35a:	d50a      	bpl.n	800b372 <_printf_i+0xce>
 800b35c:	6805      	ldr	r5, [r0, #0]
 800b35e:	600b      	str	r3, [r1, #0]
 800b360:	2d00      	cmp	r5, #0
 800b362:	da03      	bge.n	800b36c <_printf_i+0xc8>
 800b364:	232d      	movs	r3, #45	; 0x2d
 800b366:	426d      	negs	r5, r5
 800b368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b36c:	485e      	ldr	r0, [pc, #376]	; (800b4e8 <_printf_i+0x244>)
 800b36e:	230a      	movs	r3, #10
 800b370:	e019      	b.n	800b3a6 <_printf_i+0x102>
 800b372:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b376:	6805      	ldr	r5, [r0, #0]
 800b378:	600b      	str	r3, [r1, #0]
 800b37a:	bf18      	it	ne
 800b37c:	b22d      	sxthne	r5, r5
 800b37e:	e7ef      	b.n	800b360 <_printf_i+0xbc>
 800b380:	680b      	ldr	r3, [r1, #0]
 800b382:	6825      	ldr	r5, [r4, #0]
 800b384:	1d18      	adds	r0, r3, #4
 800b386:	6008      	str	r0, [r1, #0]
 800b388:	0628      	lsls	r0, r5, #24
 800b38a:	d501      	bpl.n	800b390 <_printf_i+0xec>
 800b38c:	681d      	ldr	r5, [r3, #0]
 800b38e:	e002      	b.n	800b396 <_printf_i+0xf2>
 800b390:	0669      	lsls	r1, r5, #25
 800b392:	d5fb      	bpl.n	800b38c <_printf_i+0xe8>
 800b394:	881d      	ldrh	r5, [r3, #0]
 800b396:	4854      	ldr	r0, [pc, #336]	; (800b4e8 <_printf_i+0x244>)
 800b398:	2f6f      	cmp	r7, #111	; 0x6f
 800b39a:	bf0c      	ite	eq
 800b39c:	2308      	moveq	r3, #8
 800b39e:	230a      	movne	r3, #10
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3a6:	6866      	ldr	r6, [r4, #4]
 800b3a8:	60a6      	str	r6, [r4, #8]
 800b3aa:	2e00      	cmp	r6, #0
 800b3ac:	bfa2      	ittt	ge
 800b3ae:	6821      	ldrge	r1, [r4, #0]
 800b3b0:	f021 0104 	bicge.w	r1, r1, #4
 800b3b4:	6021      	strge	r1, [r4, #0]
 800b3b6:	b90d      	cbnz	r5, 800b3bc <_printf_i+0x118>
 800b3b8:	2e00      	cmp	r6, #0
 800b3ba:	d04d      	beq.n	800b458 <_printf_i+0x1b4>
 800b3bc:	4616      	mov	r6, r2
 800b3be:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3c2:	fb03 5711 	mls	r7, r3, r1, r5
 800b3c6:	5dc7      	ldrb	r7, [r0, r7]
 800b3c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3cc:	462f      	mov	r7, r5
 800b3ce:	42bb      	cmp	r3, r7
 800b3d0:	460d      	mov	r5, r1
 800b3d2:	d9f4      	bls.n	800b3be <_printf_i+0x11a>
 800b3d4:	2b08      	cmp	r3, #8
 800b3d6:	d10b      	bne.n	800b3f0 <_printf_i+0x14c>
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	07df      	lsls	r7, r3, #31
 800b3dc:	d508      	bpl.n	800b3f0 <_printf_i+0x14c>
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	6861      	ldr	r1, [r4, #4]
 800b3e2:	4299      	cmp	r1, r3
 800b3e4:	bfde      	ittt	le
 800b3e6:	2330      	movle	r3, #48	; 0x30
 800b3e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b3f0:	1b92      	subs	r2, r2, r6
 800b3f2:	6122      	str	r2, [r4, #16]
 800b3f4:	f8cd a000 	str.w	sl, [sp]
 800b3f8:	464b      	mov	r3, r9
 800b3fa:	aa03      	add	r2, sp, #12
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	4640      	mov	r0, r8
 800b400:	f7ff fee2 	bl	800b1c8 <_printf_common>
 800b404:	3001      	adds	r0, #1
 800b406:	d14c      	bne.n	800b4a2 <_printf_i+0x1fe>
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	b004      	add	sp, #16
 800b40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b412:	4835      	ldr	r0, [pc, #212]	; (800b4e8 <_printf_i+0x244>)
 800b414:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	680e      	ldr	r6, [r1, #0]
 800b41c:	061f      	lsls	r7, r3, #24
 800b41e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b422:	600e      	str	r6, [r1, #0]
 800b424:	d514      	bpl.n	800b450 <_printf_i+0x1ac>
 800b426:	07d9      	lsls	r1, r3, #31
 800b428:	bf44      	itt	mi
 800b42a:	f043 0320 	orrmi.w	r3, r3, #32
 800b42e:	6023      	strmi	r3, [r4, #0]
 800b430:	b91d      	cbnz	r5, 800b43a <_printf_i+0x196>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	f023 0320 	bic.w	r3, r3, #32
 800b438:	6023      	str	r3, [r4, #0]
 800b43a:	2310      	movs	r3, #16
 800b43c:	e7b0      	b.n	800b3a0 <_printf_i+0xfc>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	f043 0320 	orr.w	r3, r3, #32
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	2378      	movs	r3, #120	; 0x78
 800b448:	4828      	ldr	r0, [pc, #160]	; (800b4ec <_printf_i+0x248>)
 800b44a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b44e:	e7e3      	b.n	800b418 <_printf_i+0x174>
 800b450:	065e      	lsls	r6, r3, #25
 800b452:	bf48      	it	mi
 800b454:	b2ad      	uxthmi	r5, r5
 800b456:	e7e6      	b.n	800b426 <_printf_i+0x182>
 800b458:	4616      	mov	r6, r2
 800b45a:	e7bb      	b.n	800b3d4 <_printf_i+0x130>
 800b45c:	680b      	ldr	r3, [r1, #0]
 800b45e:	6826      	ldr	r6, [r4, #0]
 800b460:	6960      	ldr	r0, [r4, #20]
 800b462:	1d1d      	adds	r5, r3, #4
 800b464:	600d      	str	r5, [r1, #0]
 800b466:	0635      	lsls	r5, r6, #24
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	d501      	bpl.n	800b470 <_printf_i+0x1cc>
 800b46c:	6018      	str	r0, [r3, #0]
 800b46e:	e002      	b.n	800b476 <_printf_i+0x1d2>
 800b470:	0671      	lsls	r1, r6, #25
 800b472:	d5fb      	bpl.n	800b46c <_printf_i+0x1c8>
 800b474:	8018      	strh	r0, [r3, #0]
 800b476:	2300      	movs	r3, #0
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	4616      	mov	r6, r2
 800b47c:	e7ba      	b.n	800b3f4 <_printf_i+0x150>
 800b47e:	680b      	ldr	r3, [r1, #0]
 800b480:	1d1a      	adds	r2, r3, #4
 800b482:	600a      	str	r2, [r1, #0]
 800b484:	681e      	ldr	r6, [r3, #0]
 800b486:	6862      	ldr	r2, [r4, #4]
 800b488:	2100      	movs	r1, #0
 800b48a:	4630      	mov	r0, r6
 800b48c:	f7f4 fec0 	bl	8000210 <memchr>
 800b490:	b108      	cbz	r0, 800b496 <_printf_i+0x1f2>
 800b492:	1b80      	subs	r0, r0, r6
 800b494:	6060      	str	r0, [r4, #4]
 800b496:	6863      	ldr	r3, [r4, #4]
 800b498:	6123      	str	r3, [r4, #16]
 800b49a:	2300      	movs	r3, #0
 800b49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4a0:	e7a8      	b.n	800b3f4 <_printf_i+0x150>
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	4649      	mov	r1, r9
 800b4a8:	4640      	mov	r0, r8
 800b4aa:	47d0      	blx	sl
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d0ab      	beq.n	800b408 <_printf_i+0x164>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	079b      	lsls	r3, r3, #30
 800b4b4:	d413      	bmi.n	800b4de <_printf_i+0x23a>
 800b4b6:	68e0      	ldr	r0, [r4, #12]
 800b4b8:	9b03      	ldr	r3, [sp, #12]
 800b4ba:	4298      	cmp	r0, r3
 800b4bc:	bfb8      	it	lt
 800b4be:	4618      	movlt	r0, r3
 800b4c0:	e7a4      	b.n	800b40c <_printf_i+0x168>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	4632      	mov	r2, r6
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	4640      	mov	r0, r8
 800b4ca:	47d0      	blx	sl
 800b4cc:	3001      	adds	r0, #1
 800b4ce:	d09b      	beq.n	800b408 <_printf_i+0x164>
 800b4d0:	3501      	adds	r5, #1
 800b4d2:	68e3      	ldr	r3, [r4, #12]
 800b4d4:	9903      	ldr	r1, [sp, #12]
 800b4d6:	1a5b      	subs	r3, r3, r1
 800b4d8:	42ab      	cmp	r3, r5
 800b4da:	dcf2      	bgt.n	800b4c2 <_printf_i+0x21e>
 800b4dc:	e7eb      	b.n	800b4b6 <_printf_i+0x212>
 800b4de:	2500      	movs	r5, #0
 800b4e0:	f104 0619 	add.w	r6, r4, #25
 800b4e4:	e7f5      	b.n	800b4d2 <_printf_i+0x22e>
 800b4e6:	bf00      	nop
 800b4e8:	0800c52d 	.word	0x0800c52d
 800b4ec:	0800c53e 	.word	0x0800c53e

0800b4f0 <_scanf_chars>:
 800b4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f4:	4615      	mov	r5, r2
 800b4f6:	688a      	ldr	r2, [r1, #8]
 800b4f8:	4680      	mov	r8, r0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	b932      	cbnz	r2, 800b50c <_scanf_chars+0x1c>
 800b4fe:	698a      	ldr	r2, [r1, #24]
 800b500:	2a00      	cmp	r2, #0
 800b502:	bf0c      	ite	eq
 800b504:	2201      	moveq	r2, #1
 800b506:	f04f 32ff 	movne.w	r2, #4294967295
 800b50a:	608a      	str	r2, [r1, #8]
 800b50c:	6822      	ldr	r2, [r4, #0]
 800b50e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b59c <_scanf_chars+0xac>
 800b512:	06d1      	lsls	r1, r2, #27
 800b514:	bf5f      	itttt	pl
 800b516:	681a      	ldrpl	r2, [r3, #0]
 800b518:	1d11      	addpl	r1, r2, #4
 800b51a:	6019      	strpl	r1, [r3, #0]
 800b51c:	6816      	ldrpl	r6, [r2, #0]
 800b51e:	2700      	movs	r7, #0
 800b520:	69a0      	ldr	r0, [r4, #24]
 800b522:	b188      	cbz	r0, 800b548 <_scanf_chars+0x58>
 800b524:	2801      	cmp	r0, #1
 800b526:	d107      	bne.n	800b538 <_scanf_chars+0x48>
 800b528:	682b      	ldr	r3, [r5, #0]
 800b52a:	781a      	ldrb	r2, [r3, #0]
 800b52c:	6963      	ldr	r3, [r4, #20]
 800b52e:	5c9b      	ldrb	r3, [r3, r2]
 800b530:	b953      	cbnz	r3, 800b548 <_scanf_chars+0x58>
 800b532:	bb27      	cbnz	r7, 800b57e <_scanf_chars+0x8e>
 800b534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b538:	2802      	cmp	r0, #2
 800b53a:	d120      	bne.n	800b57e <_scanf_chars+0x8e>
 800b53c:	682b      	ldr	r3, [r5, #0]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b544:	071b      	lsls	r3, r3, #28
 800b546:	d41a      	bmi.n	800b57e <_scanf_chars+0x8e>
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	06da      	lsls	r2, r3, #27
 800b54c:	bf5e      	ittt	pl
 800b54e:	682b      	ldrpl	r3, [r5, #0]
 800b550:	781b      	ldrbpl	r3, [r3, #0]
 800b552:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b556:	682a      	ldr	r2, [r5, #0]
 800b558:	686b      	ldr	r3, [r5, #4]
 800b55a:	3201      	adds	r2, #1
 800b55c:	602a      	str	r2, [r5, #0]
 800b55e:	68a2      	ldr	r2, [r4, #8]
 800b560:	3b01      	subs	r3, #1
 800b562:	3a01      	subs	r2, #1
 800b564:	606b      	str	r3, [r5, #4]
 800b566:	3701      	adds	r7, #1
 800b568:	60a2      	str	r2, [r4, #8]
 800b56a:	b142      	cbz	r2, 800b57e <_scanf_chars+0x8e>
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	dcd7      	bgt.n	800b520 <_scanf_chars+0x30>
 800b570:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b574:	4629      	mov	r1, r5
 800b576:	4640      	mov	r0, r8
 800b578:	4798      	blx	r3
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d0d0      	beq.n	800b520 <_scanf_chars+0x30>
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	f013 0310 	ands.w	r3, r3, #16
 800b584:	d105      	bne.n	800b592 <_scanf_chars+0xa2>
 800b586:	68e2      	ldr	r2, [r4, #12]
 800b588:	3201      	adds	r2, #1
 800b58a:	60e2      	str	r2, [r4, #12]
 800b58c:	69a2      	ldr	r2, [r4, #24]
 800b58e:	b102      	cbz	r2, 800b592 <_scanf_chars+0xa2>
 800b590:	7033      	strb	r3, [r6, #0]
 800b592:	6923      	ldr	r3, [r4, #16]
 800b594:	441f      	add	r7, r3
 800b596:	6127      	str	r7, [r4, #16]
 800b598:	2000      	movs	r0, #0
 800b59a:	e7cb      	b.n	800b534 <_scanf_chars+0x44>
 800b59c:	0800c56b 	.word	0x0800c56b

0800b5a0 <_scanf_i>:
 800b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a4:	4698      	mov	r8, r3
 800b5a6:	4b74      	ldr	r3, [pc, #464]	; (800b778 <_scanf_i+0x1d8>)
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	4682      	mov	sl, r0
 800b5ac:	4616      	mov	r6, r2
 800b5ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	ab03      	add	r3, sp, #12
 800b5b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b5ba:	4b70      	ldr	r3, [pc, #448]	; (800b77c <_scanf_i+0x1dc>)
 800b5bc:	69a1      	ldr	r1, [r4, #24]
 800b5be:	4a70      	ldr	r2, [pc, #448]	; (800b780 <_scanf_i+0x1e0>)
 800b5c0:	2903      	cmp	r1, #3
 800b5c2:	bf18      	it	ne
 800b5c4:	461a      	movne	r2, r3
 800b5c6:	68a3      	ldr	r3, [r4, #8]
 800b5c8:	9201      	str	r2, [sp, #4]
 800b5ca:	1e5a      	subs	r2, r3, #1
 800b5cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b5d0:	bf88      	it	hi
 800b5d2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b5d6:	4627      	mov	r7, r4
 800b5d8:	bf82      	ittt	hi
 800b5da:	eb03 0905 	addhi.w	r9, r3, r5
 800b5de:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b5e2:	60a3      	strhi	r3, [r4, #8]
 800b5e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b5e8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b5ec:	bf98      	it	ls
 800b5ee:	f04f 0900 	movls.w	r9, #0
 800b5f2:	6023      	str	r3, [r4, #0]
 800b5f4:	463d      	mov	r5, r7
 800b5f6:	f04f 0b00 	mov.w	fp, #0
 800b5fa:	6831      	ldr	r1, [r6, #0]
 800b5fc:	ab03      	add	r3, sp, #12
 800b5fe:	7809      	ldrb	r1, [r1, #0]
 800b600:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b604:	2202      	movs	r2, #2
 800b606:	f7f4 fe03 	bl	8000210 <memchr>
 800b60a:	b328      	cbz	r0, 800b658 <_scanf_i+0xb8>
 800b60c:	f1bb 0f01 	cmp.w	fp, #1
 800b610:	d159      	bne.n	800b6c6 <_scanf_i+0x126>
 800b612:	6862      	ldr	r2, [r4, #4]
 800b614:	b92a      	cbnz	r2, 800b622 <_scanf_i+0x82>
 800b616:	6822      	ldr	r2, [r4, #0]
 800b618:	2308      	movs	r3, #8
 800b61a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b61e:	6063      	str	r3, [r4, #4]
 800b620:	6022      	str	r2, [r4, #0]
 800b622:	6822      	ldr	r2, [r4, #0]
 800b624:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b628:	6022      	str	r2, [r4, #0]
 800b62a:	68a2      	ldr	r2, [r4, #8]
 800b62c:	1e51      	subs	r1, r2, #1
 800b62e:	60a1      	str	r1, [r4, #8]
 800b630:	b192      	cbz	r2, 800b658 <_scanf_i+0xb8>
 800b632:	6832      	ldr	r2, [r6, #0]
 800b634:	1c51      	adds	r1, r2, #1
 800b636:	6031      	str	r1, [r6, #0]
 800b638:	7812      	ldrb	r2, [r2, #0]
 800b63a:	f805 2b01 	strb.w	r2, [r5], #1
 800b63e:	6872      	ldr	r2, [r6, #4]
 800b640:	3a01      	subs	r2, #1
 800b642:	2a00      	cmp	r2, #0
 800b644:	6072      	str	r2, [r6, #4]
 800b646:	dc07      	bgt.n	800b658 <_scanf_i+0xb8>
 800b648:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b64c:	4631      	mov	r1, r6
 800b64e:	4650      	mov	r0, sl
 800b650:	4790      	blx	r2
 800b652:	2800      	cmp	r0, #0
 800b654:	f040 8085 	bne.w	800b762 <_scanf_i+0x1c2>
 800b658:	f10b 0b01 	add.w	fp, fp, #1
 800b65c:	f1bb 0f03 	cmp.w	fp, #3
 800b660:	d1cb      	bne.n	800b5fa <_scanf_i+0x5a>
 800b662:	6863      	ldr	r3, [r4, #4]
 800b664:	b90b      	cbnz	r3, 800b66a <_scanf_i+0xca>
 800b666:	230a      	movs	r3, #10
 800b668:	6063      	str	r3, [r4, #4]
 800b66a:	6863      	ldr	r3, [r4, #4]
 800b66c:	4945      	ldr	r1, [pc, #276]	; (800b784 <_scanf_i+0x1e4>)
 800b66e:	6960      	ldr	r0, [r4, #20]
 800b670:	1ac9      	subs	r1, r1, r3
 800b672:	f000 f8ab 	bl	800b7cc <__sccl>
 800b676:	f04f 0b00 	mov.w	fp, #0
 800b67a:	68a3      	ldr	r3, [r4, #8]
 800b67c:	6822      	ldr	r2, [r4, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d03d      	beq.n	800b6fe <_scanf_i+0x15e>
 800b682:	6831      	ldr	r1, [r6, #0]
 800b684:	6960      	ldr	r0, [r4, #20]
 800b686:	f891 c000 	ldrb.w	ip, [r1]
 800b68a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b68e:	2800      	cmp	r0, #0
 800b690:	d035      	beq.n	800b6fe <_scanf_i+0x15e>
 800b692:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b696:	d124      	bne.n	800b6e2 <_scanf_i+0x142>
 800b698:	0510      	lsls	r0, r2, #20
 800b69a:	d522      	bpl.n	800b6e2 <_scanf_i+0x142>
 800b69c:	f10b 0b01 	add.w	fp, fp, #1
 800b6a0:	f1b9 0f00 	cmp.w	r9, #0
 800b6a4:	d003      	beq.n	800b6ae <_scanf_i+0x10e>
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	f109 39ff 	add.w	r9, r9, #4294967295
 800b6ac:	60a3      	str	r3, [r4, #8]
 800b6ae:	6873      	ldr	r3, [r6, #4]
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	6073      	str	r3, [r6, #4]
 800b6b6:	dd1b      	ble.n	800b6f0 <_scanf_i+0x150>
 800b6b8:	6833      	ldr	r3, [r6, #0]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	6033      	str	r3, [r6, #0]
 800b6be:	68a3      	ldr	r3, [r4, #8]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	60a3      	str	r3, [r4, #8]
 800b6c4:	e7d9      	b.n	800b67a <_scanf_i+0xda>
 800b6c6:	f1bb 0f02 	cmp.w	fp, #2
 800b6ca:	d1ae      	bne.n	800b62a <_scanf_i+0x8a>
 800b6cc:	6822      	ldr	r2, [r4, #0]
 800b6ce:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b6d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b6d6:	d1bf      	bne.n	800b658 <_scanf_i+0xb8>
 800b6d8:	2310      	movs	r3, #16
 800b6da:	6063      	str	r3, [r4, #4]
 800b6dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6e0:	e7a2      	b.n	800b628 <_scanf_i+0x88>
 800b6e2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b6e6:	6022      	str	r2, [r4, #0]
 800b6e8:	780b      	ldrb	r3, [r1, #0]
 800b6ea:	f805 3b01 	strb.w	r3, [r5], #1
 800b6ee:	e7de      	b.n	800b6ae <_scanf_i+0x10e>
 800b6f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4650      	mov	r0, sl
 800b6f8:	4798      	blx	r3
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d0df      	beq.n	800b6be <_scanf_i+0x11e>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	05d9      	lsls	r1, r3, #23
 800b702:	d50d      	bpl.n	800b720 <_scanf_i+0x180>
 800b704:	42bd      	cmp	r5, r7
 800b706:	d909      	bls.n	800b71c <_scanf_i+0x17c>
 800b708:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b70c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b710:	4632      	mov	r2, r6
 800b712:	4650      	mov	r0, sl
 800b714:	4798      	blx	r3
 800b716:	f105 39ff 	add.w	r9, r5, #4294967295
 800b71a:	464d      	mov	r5, r9
 800b71c:	42bd      	cmp	r5, r7
 800b71e:	d028      	beq.n	800b772 <_scanf_i+0x1d2>
 800b720:	6822      	ldr	r2, [r4, #0]
 800b722:	f012 0210 	ands.w	r2, r2, #16
 800b726:	d113      	bne.n	800b750 <_scanf_i+0x1b0>
 800b728:	702a      	strb	r2, [r5, #0]
 800b72a:	6863      	ldr	r3, [r4, #4]
 800b72c:	9e01      	ldr	r6, [sp, #4]
 800b72e:	4639      	mov	r1, r7
 800b730:	4650      	mov	r0, sl
 800b732:	47b0      	blx	r6
 800b734:	f8d8 3000 	ldr.w	r3, [r8]
 800b738:	6821      	ldr	r1, [r4, #0]
 800b73a:	1d1a      	adds	r2, r3, #4
 800b73c:	f8c8 2000 	str.w	r2, [r8]
 800b740:	f011 0f20 	tst.w	r1, #32
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	d00f      	beq.n	800b768 <_scanf_i+0x1c8>
 800b748:	6018      	str	r0, [r3, #0]
 800b74a:	68e3      	ldr	r3, [r4, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	60e3      	str	r3, [r4, #12]
 800b750:	1bed      	subs	r5, r5, r7
 800b752:	44ab      	add	fp, r5
 800b754:	6925      	ldr	r5, [r4, #16]
 800b756:	445d      	add	r5, fp
 800b758:	6125      	str	r5, [r4, #16]
 800b75a:	2000      	movs	r0, #0
 800b75c:	b007      	add	sp, #28
 800b75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b762:	f04f 0b00 	mov.w	fp, #0
 800b766:	e7ca      	b.n	800b6fe <_scanf_i+0x15e>
 800b768:	07ca      	lsls	r2, r1, #31
 800b76a:	bf4c      	ite	mi
 800b76c:	8018      	strhmi	r0, [r3, #0]
 800b76e:	6018      	strpl	r0, [r3, #0]
 800b770:	e7eb      	b.n	800b74a <_scanf_i+0x1aa>
 800b772:	2001      	movs	r0, #1
 800b774:	e7f2      	b.n	800b75c <_scanf_i+0x1bc>
 800b776:	bf00      	nop
 800b778:	0800c474 	.word	0x0800c474
 800b77c:	0800ba45 	.word	0x0800ba45
 800b780:	0800b949 	.word	0x0800b949
 800b784:	0800c568 	.word	0x0800c568

0800b788 <_read_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4d07      	ldr	r5, [pc, #28]	; (800b7a8 <_read_r+0x20>)
 800b78c:	4604      	mov	r4, r0
 800b78e:	4608      	mov	r0, r1
 800b790:	4611      	mov	r1, r2
 800b792:	2200      	movs	r2, #0
 800b794:	602a      	str	r2, [r5, #0]
 800b796:	461a      	mov	r2, r3
 800b798:	f7f6 fc3e 	bl	8002018 <_read>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d102      	bne.n	800b7a6 <_read_r+0x1e>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	b103      	cbz	r3, 800b7a6 <_read_r+0x1e>
 800b7a4:	6023      	str	r3, [r4, #0]
 800b7a6:	bd38      	pop	{r3, r4, r5, pc}
 800b7a8:	20000a38 	.word	0x20000a38

0800b7ac <_sbrk_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d06      	ldr	r5, [pc, #24]	; (800b7c8 <_sbrk_r+0x1c>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f7f6 fc9c 	bl	80020f4 <_sbrk>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_sbrk_r+0x1a>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_sbrk_r+0x1a>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	20000a38 	.word	0x20000a38

0800b7cc <__sccl>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	780b      	ldrb	r3, [r1, #0]
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	2b5e      	cmp	r3, #94	; 0x5e
 800b7d4:	bf0b      	itete	eq
 800b7d6:	784b      	ldrbeq	r3, [r1, #1]
 800b7d8:	1c48      	addne	r0, r1, #1
 800b7da:	1c88      	addeq	r0, r1, #2
 800b7dc:	2200      	movne	r2, #0
 800b7de:	bf08      	it	eq
 800b7e0:	2201      	moveq	r2, #1
 800b7e2:	1e61      	subs	r1, r4, #1
 800b7e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b7e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b7ec:	42a9      	cmp	r1, r5
 800b7ee:	d1fb      	bne.n	800b7e8 <__sccl+0x1c>
 800b7f0:	b90b      	cbnz	r3, 800b7f6 <__sccl+0x2a>
 800b7f2:	3801      	subs	r0, #1
 800b7f4:	bd70      	pop	{r4, r5, r6, pc}
 800b7f6:	f082 0101 	eor.w	r1, r2, #1
 800b7fa:	54e1      	strb	r1, [r4, r3]
 800b7fc:	1c42      	adds	r2, r0, #1
 800b7fe:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800b802:	2d2d      	cmp	r5, #45	; 0x2d
 800b804:	f102 36ff 	add.w	r6, r2, #4294967295
 800b808:	4610      	mov	r0, r2
 800b80a:	d006      	beq.n	800b81a <__sccl+0x4e>
 800b80c:	2d5d      	cmp	r5, #93	; 0x5d
 800b80e:	d0f1      	beq.n	800b7f4 <__sccl+0x28>
 800b810:	b90d      	cbnz	r5, 800b816 <__sccl+0x4a>
 800b812:	4630      	mov	r0, r6
 800b814:	e7ee      	b.n	800b7f4 <__sccl+0x28>
 800b816:	462b      	mov	r3, r5
 800b818:	e7ef      	b.n	800b7fa <__sccl+0x2e>
 800b81a:	7816      	ldrb	r6, [r2, #0]
 800b81c:	2e5d      	cmp	r6, #93	; 0x5d
 800b81e:	d0fa      	beq.n	800b816 <__sccl+0x4a>
 800b820:	42b3      	cmp	r3, r6
 800b822:	dcf8      	bgt.n	800b816 <__sccl+0x4a>
 800b824:	4618      	mov	r0, r3
 800b826:	3001      	adds	r0, #1
 800b828:	4286      	cmp	r6, r0
 800b82a:	5421      	strb	r1, [r4, r0]
 800b82c:	dcfb      	bgt.n	800b826 <__sccl+0x5a>
 800b82e:	43d8      	mvns	r0, r3
 800b830:	4430      	add	r0, r6
 800b832:	1c5d      	adds	r5, r3, #1
 800b834:	42b3      	cmp	r3, r6
 800b836:	bfa8      	it	ge
 800b838:	2000      	movge	r0, #0
 800b83a:	182b      	adds	r3, r5, r0
 800b83c:	3202      	adds	r2, #2
 800b83e:	e7de      	b.n	800b7fe <__sccl+0x32>

0800b840 <_strtol_l.isra.0>:
 800b840:	2b01      	cmp	r3, #1
 800b842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b846:	d001      	beq.n	800b84c <_strtol_l.isra.0+0xc>
 800b848:	2b24      	cmp	r3, #36	; 0x24
 800b84a:	d906      	bls.n	800b85a <_strtol_l.isra.0+0x1a>
 800b84c:	f7fe fdd2 	bl	800a3f4 <__errno>
 800b850:	2316      	movs	r3, #22
 800b852:	6003      	str	r3, [r0, #0]
 800b854:	2000      	movs	r0, #0
 800b856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85a:	4f3a      	ldr	r7, [pc, #232]	; (800b944 <_strtol_l.isra.0+0x104>)
 800b85c:	468e      	mov	lr, r1
 800b85e:	4676      	mov	r6, lr
 800b860:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b864:	5de5      	ldrb	r5, [r4, r7]
 800b866:	f015 0508 	ands.w	r5, r5, #8
 800b86a:	d1f8      	bne.n	800b85e <_strtol_l.isra.0+0x1e>
 800b86c:	2c2d      	cmp	r4, #45	; 0x2d
 800b86e:	d134      	bne.n	800b8da <_strtol_l.isra.0+0x9a>
 800b870:	f89e 4000 	ldrb.w	r4, [lr]
 800b874:	f04f 0801 	mov.w	r8, #1
 800b878:	f106 0e02 	add.w	lr, r6, #2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d05c      	beq.n	800b93a <_strtol_l.isra.0+0xfa>
 800b880:	2b10      	cmp	r3, #16
 800b882:	d10c      	bne.n	800b89e <_strtol_l.isra.0+0x5e>
 800b884:	2c30      	cmp	r4, #48	; 0x30
 800b886:	d10a      	bne.n	800b89e <_strtol_l.isra.0+0x5e>
 800b888:	f89e 4000 	ldrb.w	r4, [lr]
 800b88c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b890:	2c58      	cmp	r4, #88	; 0x58
 800b892:	d14d      	bne.n	800b930 <_strtol_l.isra.0+0xf0>
 800b894:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b898:	2310      	movs	r3, #16
 800b89a:	f10e 0e02 	add.w	lr, lr, #2
 800b89e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b8a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b8a6:	2600      	movs	r6, #0
 800b8a8:	fbbc f9f3 	udiv	r9, ip, r3
 800b8ac:	4635      	mov	r5, r6
 800b8ae:	fb03 ca19 	mls	sl, r3, r9, ip
 800b8b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b8b6:	2f09      	cmp	r7, #9
 800b8b8:	d818      	bhi.n	800b8ec <_strtol_l.isra.0+0xac>
 800b8ba:	463c      	mov	r4, r7
 800b8bc:	42a3      	cmp	r3, r4
 800b8be:	dd24      	ble.n	800b90a <_strtol_l.isra.0+0xca>
 800b8c0:	2e00      	cmp	r6, #0
 800b8c2:	db1f      	blt.n	800b904 <_strtol_l.isra.0+0xc4>
 800b8c4:	45a9      	cmp	r9, r5
 800b8c6:	d31d      	bcc.n	800b904 <_strtol_l.isra.0+0xc4>
 800b8c8:	d101      	bne.n	800b8ce <_strtol_l.isra.0+0x8e>
 800b8ca:	45a2      	cmp	sl, r4
 800b8cc:	db1a      	blt.n	800b904 <_strtol_l.isra.0+0xc4>
 800b8ce:	fb05 4503 	mla	r5, r5, r3, r4
 800b8d2:	2601      	movs	r6, #1
 800b8d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b8d8:	e7eb      	b.n	800b8b2 <_strtol_l.isra.0+0x72>
 800b8da:	2c2b      	cmp	r4, #43	; 0x2b
 800b8dc:	bf08      	it	eq
 800b8de:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b8e2:	46a8      	mov	r8, r5
 800b8e4:	bf08      	it	eq
 800b8e6:	f106 0e02 	addeq.w	lr, r6, #2
 800b8ea:	e7c7      	b.n	800b87c <_strtol_l.isra.0+0x3c>
 800b8ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b8f0:	2f19      	cmp	r7, #25
 800b8f2:	d801      	bhi.n	800b8f8 <_strtol_l.isra.0+0xb8>
 800b8f4:	3c37      	subs	r4, #55	; 0x37
 800b8f6:	e7e1      	b.n	800b8bc <_strtol_l.isra.0+0x7c>
 800b8f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b8fc:	2f19      	cmp	r7, #25
 800b8fe:	d804      	bhi.n	800b90a <_strtol_l.isra.0+0xca>
 800b900:	3c57      	subs	r4, #87	; 0x57
 800b902:	e7db      	b.n	800b8bc <_strtol_l.isra.0+0x7c>
 800b904:	f04f 36ff 	mov.w	r6, #4294967295
 800b908:	e7e4      	b.n	800b8d4 <_strtol_l.isra.0+0x94>
 800b90a:	2e00      	cmp	r6, #0
 800b90c:	da05      	bge.n	800b91a <_strtol_l.isra.0+0xda>
 800b90e:	2322      	movs	r3, #34	; 0x22
 800b910:	6003      	str	r3, [r0, #0]
 800b912:	4665      	mov	r5, ip
 800b914:	b942      	cbnz	r2, 800b928 <_strtol_l.isra.0+0xe8>
 800b916:	4628      	mov	r0, r5
 800b918:	e79d      	b.n	800b856 <_strtol_l.isra.0+0x16>
 800b91a:	f1b8 0f00 	cmp.w	r8, #0
 800b91e:	d000      	beq.n	800b922 <_strtol_l.isra.0+0xe2>
 800b920:	426d      	negs	r5, r5
 800b922:	2a00      	cmp	r2, #0
 800b924:	d0f7      	beq.n	800b916 <_strtol_l.isra.0+0xd6>
 800b926:	b10e      	cbz	r6, 800b92c <_strtol_l.isra.0+0xec>
 800b928:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b92c:	6011      	str	r1, [r2, #0]
 800b92e:	e7f2      	b.n	800b916 <_strtol_l.isra.0+0xd6>
 800b930:	2430      	movs	r4, #48	; 0x30
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1b3      	bne.n	800b89e <_strtol_l.isra.0+0x5e>
 800b936:	2308      	movs	r3, #8
 800b938:	e7b1      	b.n	800b89e <_strtol_l.isra.0+0x5e>
 800b93a:	2c30      	cmp	r4, #48	; 0x30
 800b93c:	d0a4      	beq.n	800b888 <_strtol_l.isra.0+0x48>
 800b93e:	230a      	movs	r3, #10
 800b940:	e7ad      	b.n	800b89e <_strtol_l.isra.0+0x5e>
 800b942:	bf00      	nop
 800b944:	0800c56b 	.word	0x0800c56b

0800b948 <_strtol_r>:
 800b948:	f7ff bf7a 	b.w	800b840 <_strtol_l.isra.0>

0800b94c <_strtoul_l.isra.0>:
 800b94c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b950:	4e3b      	ldr	r6, [pc, #236]	; (800ba40 <_strtoul_l.isra.0+0xf4>)
 800b952:	4686      	mov	lr, r0
 800b954:	468c      	mov	ip, r1
 800b956:	4660      	mov	r0, ip
 800b958:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b95c:	5da5      	ldrb	r5, [r4, r6]
 800b95e:	f015 0508 	ands.w	r5, r5, #8
 800b962:	d1f8      	bne.n	800b956 <_strtoul_l.isra.0+0xa>
 800b964:	2c2d      	cmp	r4, #45	; 0x2d
 800b966:	d134      	bne.n	800b9d2 <_strtoul_l.isra.0+0x86>
 800b968:	f89c 4000 	ldrb.w	r4, [ip]
 800b96c:	f04f 0801 	mov.w	r8, #1
 800b970:	f100 0c02 	add.w	ip, r0, #2
 800b974:	2b00      	cmp	r3, #0
 800b976:	d05e      	beq.n	800ba36 <_strtoul_l.isra.0+0xea>
 800b978:	2b10      	cmp	r3, #16
 800b97a:	d10c      	bne.n	800b996 <_strtoul_l.isra.0+0x4a>
 800b97c:	2c30      	cmp	r4, #48	; 0x30
 800b97e:	d10a      	bne.n	800b996 <_strtoul_l.isra.0+0x4a>
 800b980:	f89c 0000 	ldrb.w	r0, [ip]
 800b984:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b988:	2858      	cmp	r0, #88	; 0x58
 800b98a:	d14f      	bne.n	800ba2c <_strtoul_l.isra.0+0xe0>
 800b98c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b990:	2310      	movs	r3, #16
 800b992:	f10c 0c02 	add.w	ip, ip, #2
 800b996:	f04f 37ff 	mov.w	r7, #4294967295
 800b99a:	2500      	movs	r5, #0
 800b99c:	fbb7 f7f3 	udiv	r7, r7, r3
 800b9a0:	fb03 f907 	mul.w	r9, r3, r7
 800b9a4:	ea6f 0909 	mvn.w	r9, r9
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b9ae:	2e09      	cmp	r6, #9
 800b9b0:	d818      	bhi.n	800b9e4 <_strtoul_l.isra.0+0x98>
 800b9b2:	4634      	mov	r4, r6
 800b9b4:	42a3      	cmp	r3, r4
 800b9b6:	dd24      	ble.n	800ba02 <_strtoul_l.isra.0+0xb6>
 800b9b8:	2d00      	cmp	r5, #0
 800b9ba:	db1f      	blt.n	800b9fc <_strtoul_l.isra.0+0xb0>
 800b9bc:	4287      	cmp	r7, r0
 800b9be:	d31d      	bcc.n	800b9fc <_strtoul_l.isra.0+0xb0>
 800b9c0:	d101      	bne.n	800b9c6 <_strtoul_l.isra.0+0x7a>
 800b9c2:	45a1      	cmp	r9, r4
 800b9c4:	db1a      	blt.n	800b9fc <_strtoul_l.isra.0+0xb0>
 800b9c6:	fb00 4003 	mla	r0, r0, r3, r4
 800b9ca:	2501      	movs	r5, #1
 800b9cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b9d0:	e7eb      	b.n	800b9aa <_strtoul_l.isra.0+0x5e>
 800b9d2:	2c2b      	cmp	r4, #43	; 0x2b
 800b9d4:	bf08      	it	eq
 800b9d6:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b9da:	46a8      	mov	r8, r5
 800b9dc:	bf08      	it	eq
 800b9de:	f100 0c02 	addeq.w	ip, r0, #2
 800b9e2:	e7c7      	b.n	800b974 <_strtoul_l.isra.0+0x28>
 800b9e4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b9e8:	2e19      	cmp	r6, #25
 800b9ea:	d801      	bhi.n	800b9f0 <_strtoul_l.isra.0+0xa4>
 800b9ec:	3c37      	subs	r4, #55	; 0x37
 800b9ee:	e7e1      	b.n	800b9b4 <_strtoul_l.isra.0+0x68>
 800b9f0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b9f4:	2e19      	cmp	r6, #25
 800b9f6:	d804      	bhi.n	800ba02 <_strtoul_l.isra.0+0xb6>
 800b9f8:	3c57      	subs	r4, #87	; 0x57
 800b9fa:	e7db      	b.n	800b9b4 <_strtoul_l.isra.0+0x68>
 800b9fc:	f04f 35ff 	mov.w	r5, #4294967295
 800ba00:	e7e4      	b.n	800b9cc <_strtoul_l.isra.0+0x80>
 800ba02:	2d00      	cmp	r5, #0
 800ba04:	da07      	bge.n	800ba16 <_strtoul_l.isra.0+0xca>
 800ba06:	2322      	movs	r3, #34	; 0x22
 800ba08:	f8ce 3000 	str.w	r3, [lr]
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	b942      	cbnz	r2, 800ba24 <_strtoul_l.isra.0+0xd8>
 800ba12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba16:	f1b8 0f00 	cmp.w	r8, #0
 800ba1a:	d000      	beq.n	800ba1e <_strtoul_l.isra.0+0xd2>
 800ba1c:	4240      	negs	r0, r0
 800ba1e:	2a00      	cmp	r2, #0
 800ba20:	d0f7      	beq.n	800ba12 <_strtoul_l.isra.0+0xc6>
 800ba22:	b10d      	cbz	r5, 800ba28 <_strtoul_l.isra.0+0xdc>
 800ba24:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ba28:	6011      	str	r1, [r2, #0]
 800ba2a:	e7f2      	b.n	800ba12 <_strtoul_l.isra.0+0xc6>
 800ba2c:	2430      	movs	r4, #48	; 0x30
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1b1      	bne.n	800b996 <_strtoul_l.isra.0+0x4a>
 800ba32:	2308      	movs	r3, #8
 800ba34:	e7af      	b.n	800b996 <_strtoul_l.isra.0+0x4a>
 800ba36:	2c30      	cmp	r4, #48	; 0x30
 800ba38:	d0a2      	beq.n	800b980 <_strtoul_l.isra.0+0x34>
 800ba3a:	230a      	movs	r3, #10
 800ba3c:	e7ab      	b.n	800b996 <_strtoul_l.isra.0+0x4a>
 800ba3e:	bf00      	nop
 800ba40:	0800c56b 	.word	0x0800c56b

0800ba44 <_strtoul_r>:
 800ba44:	f7ff bf82 	b.w	800b94c <_strtoul_l.isra.0>

0800ba48 <__submore>:
 800ba48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ba50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba54:	4299      	cmp	r1, r3
 800ba56:	d11d      	bne.n	800ba94 <__submore+0x4c>
 800ba58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ba5c:	f7fe fed2 	bl	800a804 <_malloc_r>
 800ba60:	b918      	cbnz	r0, 800ba6a <__submore+0x22>
 800ba62:	f04f 30ff 	mov.w	r0, #4294967295
 800ba66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba6e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba70:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ba74:	6360      	str	r0, [r4, #52]	; 0x34
 800ba76:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ba7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ba7e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ba82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba86:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ba8a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ba8e:	6020      	str	r0, [r4, #0]
 800ba90:	2000      	movs	r0, #0
 800ba92:	e7e8      	b.n	800ba66 <__submore+0x1e>
 800ba94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ba96:	0077      	lsls	r7, r6, #1
 800ba98:	463a      	mov	r2, r7
 800ba9a:	f000 fa79 	bl	800bf90 <_realloc_r>
 800ba9e:	4605      	mov	r5, r0
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d0de      	beq.n	800ba62 <__submore+0x1a>
 800baa4:	eb00 0806 	add.w	r8, r0, r6
 800baa8:	4601      	mov	r1, r0
 800baaa:	4632      	mov	r2, r6
 800baac:	4640      	mov	r0, r8
 800baae:	f000 f9eb 	bl	800be88 <memcpy>
 800bab2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bab6:	f8c4 8000 	str.w	r8, [r4]
 800baba:	e7e9      	b.n	800ba90 <__submore+0x48>

0800babc <__swbuf_r>:
 800babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babe:	460e      	mov	r6, r1
 800bac0:	4614      	mov	r4, r2
 800bac2:	4605      	mov	r5, r0
 800bac4:	b118      	cbz	r0, 800bace <__swbuf_r+0x12>
 800bac6:	6983      	ldr	r3, [r0, #24]
 800bac8:	b90b      	cbnz	r3, 800bace <__swbuf_r+0x12>
 800baca:	f7fe fde9 	bl	800a6a0 <__sinit>
 800bace:	4b21      	ldr	r3, [pc, #132]	; (800bb54 <__swbuf_r+0x98>)
 800bad0:	429c      	cmp	r4, r3
 800bad2:	d12b      	bne.n	800bb2c <__swbuf_r+0x70>
 800bad4:	686c      	ldr	r4, [r5, #4]
 800bad6:	69a3      	ldr	r3, [r4, #24]
 800bad8:	60a3      	str	r3, [r4, #8]
 800bada:	89a3      	ldrh	r3, [r4, #12]
 800badc:	071a      	lsls	r2, r3, #28
 800bade:	d52f      	bpl.n	800bb40 <__swbuf_r+0x84>
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	b36b      	cbz	r3, 800bb40 <__swbuf_r+0x84>
 800bae4:	6923      	ldr	r3, [r4, #16]
 800bae6:	6820      	ldr	r0, [r4, #0]
 800bae8:	1ac0      	subs	r0, r0, r3
 800baea:	6963      	ldr	r3, [r4, #20]
 800baec:	b2f6      	uxtb	r6, r6
 800baee:	4283      	cmp	r3, r0
 800baf0:	4637      	mov	r7, r6
 800baf2:	dc04      	bgt.n	800bafe <__swbuf_r+0x42>
 800baf4:	4621      	mov	r1, r4
 800baf6:	4628      	mov	r0, r5
 800baf8:	f000 f926 	bl	800bd48 <_fflush_r>
 800bafc:	bb30      	cbnz	r0, 800bb4c <__swbuf_r+0x90>
 800bafe:	68a3      	ldr	r3, [r4, #8]
 800bb00:	3b01      	subs	r3, #1
 800bb02:	60a3      	str	r3, [r4, #8]
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	6022      	str	r2, [r4, #0]
 800bb0a:	701e      	strb	r6, [r3, #0]
 800bb0c:	6963      	ldr	r3, [r4, #20]
 800bb0e:	3001      	adds	r0, #1
 800bb10:	4283      	cmp	r3, r0
 800bb12:	d004      	beq.n	800bb1e <__swbuf_r+0x62>
 800bb14:	89a3      	ldrh	r3, [r4, #12]
 800bb16:	07db      	lsls	r3, r3, #31
 800bb18:	d506      	bpl.n	800bb28 <__swbuf_r+0x6c>
 800bb1a:	2e0a      	cmp	r6, #10
 800bb1c:	d104      	bne.n	800bb28 <__swbuf_r+0x6c>
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4628      	mov	r0, r5
 800bb22:	f000 f911 	bl	800bd48 <_fflush_r>
 800bb26:	b988      	cbnz	r0, 800bb4c <__swbuf_r+0x90>
 800bb28:	4638      	mov	r0, r7
 800bb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb2c:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <__swbuf_r+0x9c>)
 800bb2e:	429c      	cmp	r4, r3
 800bb30:	d101      	bne.n	800bb36 <__swbuf_r+0x7a>
 800bb32:	68ac      	ldr	r4, [r5, #8]
 800bb34:	e7cf      	b.n	800bad6 <__swbuf_r+0x1a>
 800bb36:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <__swbuf_r+0xa0>)
 800bb38:	429c      	cmp	r4, r3
 800bb3a:	bf08      	it	eq
 800bb3c:	68ec      	ldreq	r4, [r5, #12]
 800bb3e:	e7ca      	b.n	800bad6 <__swbuf_r+0x1a>
 800bb40:	4621      	mov	r1, r4
 800bb42:	4628      	mov	r0, r5
 800bb44:	f000 f80c 	bl	800bb60 <__swsetup_r>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d0cb      	beq.n	800bae4 <__swbuf_r+0x28>
 800bb4c:	f04f 37ff 	mov.w	r7, #4294967295
 800bb50:	e7ea      	b.n	800bb28 <__swbuf_r+0x6c>
 800bb52:	bf00      	nop
 800bb54:	0800c4dc 	.word	0x0800c4dc
 800bb58:	0800c4fc 	.word	0x0800c4fc
 800bb5c:	0800c4bc 	.word	0x0800c4bc

0800bb60 <__swsetup_r>:
 800bb60:	4b32      	ldr	r3, [pc, #200]	; (800bc2c <__swsetup_r+0xcc>)
 800bb62:	b570      	push	{r4, r5, r6, lr}
 800bb64:	681d      	ldr	r5, [r3, #0]
 800bb66:	4606      	mov	r6, r0
 800bb68:	460c      	mov	r4, r1
 800bb6a:	b125      	cbz	r5, 800bb76 <__swsetup_r+0x16>
 800bb6c:	69ab      	ldr	r3, [r5, #24]
 800bb6e:	b913      	cbnz	r3, 800bb76 <__swsetup_r+0x16>
 800bb70:	4628      	mov	r0, r5
 800bb72:	f7fe fd95 	bl	800a6a0 <__sinit>
 800bb76:	4b2e      	ldr	r3, [pc, #184]	; (800bc30 <__swsetup_r+0xd0>)
 800bb78:	429c      	cmp	r4, r3
 800bb7a:	d10f      	bne.n	800bb9c <__swsetup_r+0x3c>
 800bb7c:	686c      	ldr	r4, [r5, #4]
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb84:	0719      	lsls	r1, r3, #28
 800bb86:	d42c      	bmi.n	800bbe2 <__swsetup_r+0x82>
 800bb88:	06dd      	lsls	r5, r3, #27
 800bb8a:	d411      	bmi.n	800bbb0 <__swsetup_r+0x50>
 800bb8c:	2309      	movs	r3, #9
 800bb8e:	6033      	str	r3, [r6, #0]
 800bb90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb94:	81a3      	strh	r3, [r4, #12]
 800bb96:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9a:	e03e      	b.n	800bc1a <__swsetup_r+0xba>
 800bb9c:	4b25      	ldr	r3, [pc, #148]	; (800bc34 <__swsetup_r+0xd4>)
 800bb9e:	429c      	cmp	r4, r3
 800bba0:	d101      	bne.n	800bba6 <__swsetup_r+0x46>
 800bba2:	68ac      	ldr	r4, [r5, #8]
 800bba4:	e7eb      	b.n	800bb7e <__swsetup_r+0x1e>
 800bba6:	4b24      	ldr	r3, [pc, #144]	; (800bc38 <__swsetup_r+0xd8>)
 800bba8:	429c      	cmp	r4, r3
 800bbaa:	bf08      	it	eq
 800bbac:	68ec      	ldreq	r4, [r5, #12]
 800bbae:	e7e6      	b.n	800bb7e <__swsetup_r+0x1e>
 800bbb0:	0758      	lsls	r0, r3, #29
 800bbb2:	d512      	bpl.n	800bbda <__swsetup_r+0x7a>
 800bbb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbb6:	b141      	cbz	r1, 800bbca <__swsetup_r+0x6a>
 800bbb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbbc:	4299      	cmp	r1, r3
 800bbbe:	d002      	beq.n	800bbc6 <__swsetup_r+0x66>
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	f000 f995 	bl	800bef0 <_free_r>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	6363      	str	r3, [r4, #52]	; 0x34
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	6063      	str	r3, [r4, #4]
 800bbd6:	6923      	ldr	r3, [r4, #16]
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	89a3      	ldrh	r3, [r4, #12]
 800bbdc:	f043 0308 	orr.w	r3, r3, #8
 800bbe0:	81a3      	strh	r3, [r4, #12]
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	b94b      	cbnz	r3, 800bbfa <__swsetup_r+0x9a>
 800bbe6:	89a3      	ldrh	r3, [r4, #12]
 800bbe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbf0:	d003      	beq.n	800bbfa <__swsetup_r+0x9a>
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f000 f907 	bl	800be08 <__smakebuf_r>
 800bbfa:	89a0      	ldrh	r0, [r4, #12]
 800bbfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc00:	f010 0301 	ands.w	r3, r0, #1
 800bc04:	d00a      	beq.n	800bc1c <__swsetup_r+0xbc>
 800bc06:	2300      	movs	r3, #0
 800bc08:	60a3      	str	r3, [r4, #8]
 800bc0a:	6963      	ldr	r3, [r4, #20]
 800bc0c:	425b      	negs	r3, r3
 800bc0e:	61a3      	str	r3, [r4, #24]
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	b943      	cbnz	r3, 800bc26 <__swsetup_r+0xc6>
 800bc14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc18:	d1ba      	bne.n	800bb90 <__swsetup_r+0x30>
 800bc1a:	bd70      	pop	{r4, r5, r6, pc}
 800bc1c:	0781      	lsls	r1, r0, #30
 800bc1e:	bf58      	it	pl
 800bc20:	6963      	ldrpl	r3, [r4, #20]
 800bc22:	60a3      	str	r3, [r4, #8]
 800bc24:	e7f4      	b.n	800bc10 <__swsetup_r+0xb0>
 800bc26:	2000      	movs	r0, #0
 800bc28:	e7f7      	b.n	800bc1a <__swsetup_r+0xba>
 800bc2a:	bf00      	nop
 800bc2c:	20000088 	.word	0x20000088
 800bc30:	0800c4dc 	.word	0x0800c4dc
 800bc34:	0800c4fc 	.word	0x0800c4fc
 800bc38:	0800c4bc 	.word	0x0800c4bc

0800bc3c <__sflush_r>:
 800bc3c:	898a      	ldrh	r2, [r1, #12]
 800bc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc42:	4605      	mov	r5, r0
 800bc44:	0710      	lsls	r0, r2, #28
 800bc46:	460c      	mov	r4, r1
 800bc48:	d458      	bmi.n	800bcfc <__sflush_r+0xc0>
 800bc4a:	684b      	ldr	r3, [r1, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dc05      	bgt.n	800bc5c <__sflush_r+0x20>
 800bc50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	dc02      	bgt.n	800bc5c <__sflush_r+0x20>
 800bc56:	2000      	movs	r0, #0
 800bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc5e:	2e00      	cmp	r6, #0
 800bc60:	d0f9      	beq.n	800bc56 <__sflush_r+0x1a>
 800bc62:	2300      	movs	r3, #0
 800bc64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc68:	682f      	ldr	r7, [r5, #0]
 800bc6a:	602b      	str	r3, [r5, #0]
 800bc6c:	d032      	beq.n	800bcd4 <__sflush_r+0x98>
 800bc6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	075a      	lsls	r2, r3, #29
 800bc74:	d505      	bpl.n	800bc82 <__sflush_r+0x46>
 800bc76:	6863      	ldr	r3, [r4, #4]
 800bc78:	1ac0      	subs	r0, r0, r3
 800bc7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc7c:	b10b      	cbz	r3, 800bc82 <__sflush_r+0x46>
 800bc7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc80:	1ac0      	subs	r0, r0, r3
 800bc82:	2300      	movs	r3, #0
 800bc84:	4602      	mov	r2, r0
 800bc86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc88:	6a21      	ldr	r1, [r4, #32]
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	47b0      	blx	r6
 800bc8e:	1c43      	adds	r3, r0, #1
 800bc90:	89a3      	ldrh	r3, [r4, #12]
 800bc92:	d106      	bne.n	800bca2 <__sflush_r+0x66>
 800bc94:	6829      	ldr	r1, [r5, #0]
 800bc96:	291d      	cmp	r1, #29
 800bc98:	d82c      	bhi.n	800bcf4 <__sflush_r+0xb8>
 800bc9a:	4a2a      	ldr	r2, [pc, #168]	; (800bd44 <__sflush_r+0x108>)
 800bc9c:	40ca      	lsrs	r2, r1
 800bc9e:	07d6      	lsls	r6, r2, #31
 800bca0:	d528      	bpl.n	800bcf4 <__sflush_r+0xb8>
 800bca2:	2200      	movs	r2, #0
 800bca4:	6062      	str	r2, [r4, #4]
 800bca6:	04d9      	lsls	r1, r3, #19
 800bca8:	6922      	ldr	r2, [r4, #16]
 800bcaa:	6022      	str	r2, [r4, #0]
 800bcac:	d504      	bpl.n	800bcb8 <__sflush_r+0x7c>
 800bcae:	1c42      	adds	r2, r0, #1
 800bcb0:	d101      	bne.n	800bcb6 <__sflush_r+0x7a>
 800bcb2:	682b      	ldr	r3, [r5, #0]
 800bcb4:	b903      	cbnz	r3, 800bcb8 <__sflush_r+0x7c>
 800bcb6:	6560      	str	r0, [r4, #84]	; 0x54
 800bcb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcba:	602f      	str	r7, [r5, #0]
 800bcbc:	2900      	cmp	r1, #0
 800bcbe:	d0ca      	beq.n	800bc56 <__sflush_r+0x1a>
 800bcc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcc4:	4299      	cmp	r1, r3
 800bcc6:	d002      	beq.n	800bcce <__sflush_r+0x92>
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f000 f911 	bl	800bef0 <_free_r>
 800bcce:	2000      	movs	r0, #0
 800bcd0:	6360      	str	r0, [r4, #52]	; 0x34
 800bcd2:	e7c1      	b.n	800bc58 <__sflush_r+0x1c>
 800bcd4:	6a21      	ldr	r1, [r4, #32]
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	4628      	mov	r0, r5
 800bcda:	47b0      	blx	r6
 800bcdc:	1c41      	adds	r1, r0, #1
 800bcde:	d1c7      	bne.n	800bc70 <__sflush_r+0x34>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0c4      	beq.n	800bc70 <__sflush_r+0x34>
 800bce6:	2b1d      	cmp	r3, #29
 800bce8:	d001      	beq.n	800bcee <__sflush_r+0xb2>
 800bcea:	2b16      	cmp	r3, #22
 800bcec:	d101      	bne.n	800bcf2 <__sflush_r+0xb6>
 800bcee:	602f      	str	r7, [r5, #0]
 800bcf0:	e7b1      	b.n	800bc56 <__sflush_r+0x1a>
 800bcf2:	89a3      	ldrh	r3, [r4, #12]
 800bcf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf8:	81a3      	strh	r3, [r4, #12]
 800bcfa:	e7ad      	b.n	800bc58 <__sflush_r+0x1c>
 800bcfc:	690f      	ldr	r7, [r1, #16]
 800bcfe:	2f00      	cmp	r7, #0
 800bd00:	d0a9      	beq.n	800bc56 <__sflush_r+0x1a>
 800bd02:	0793      	lsls	r3, r2, #30
 800bd04:	680e      	ldr	r6, [r1, #0]
 800bd06:	bf08      	it	eq
 800bd08:	694b      	ldreq	r3, [r1, #20]
 800bd0a:	600f      	str	r7, [r1, #0]
 800bd0c:	bf18      	it	ne
 800bd0e:	2300      	movne	r3, #0
 800bd10:	eba6 0807 	sub.w	r8, r6, r7
 800bd14:	608b      	str	r3, [r1, #8]
 800bd16:	f1b8 0f00 	cmp.w	r8, #0
 800bd1a:	dd9c      	ble.n	800bc56 <__sflush_r+0x1a>
 800bd1c:	6a21      	ldr	r1, [r4, #32]
 800bd1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd20:	4643      	mov	r3, r8
 800bd22:	463a      	mov	r2, r7
 800bd24:	4628      	mov	r0, r5
 800bd26:	47b0      	blx	r6
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	dc06      	bgt.n	800bd3a <__sflush_r+0xfe>
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd32:	81a3      	strh	r3, [r4, #12]
 800bd34:	f04f 30ff 	mov.w	r0, #4294967295
 800bd38:	e78e      	b.n	800bc58 <__sflush_r+0x1c>
 800bd3a:	4407      	add	r7, r0
 800bd3c:	eba8 0800 	sub.w	r8, r8, r0
 800bd40:	e7e9      	b.n	800bd16 <__sflush_r+0xda>
 800bd42:	bf00      	nop
 800bd44:	20400001 	.word	0x20400001

0800bd48 <_fflush_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	690b      	ldr	r3, [r1, #16]
 800bd4c:	4605      	mov	r5, r0
 800bd4e:	460c      	mov	r4, r1
 800bd50:	b913      	cbnz	r3, 800bd58 <_fflush_r+0x10>
 800bd52:	2500      	movs	r5, #0
 800bd54:	4628      	mov	r0, r5
 800bd56:	bd38      	pop	{r3, r4, r5, pc}
 800bd58:	b118      	cbz	r0, 800bd62 <_fflush_r+0x1a>
 800bd5a:	6983      	ldr	r3, [r0, #24]
 800bd5c:	b90b      	cbnz	r3, 800bd62 <_fflush_r+0x1a>
 800bd5e:	f7fe fc9f 	bl	800a6a0 <__sinit>
 800bd62:	4b14      	ldr	r3, [pc, #80]	; (800bdb4 <_fflush_r+0x6c>)
 800bd64:	429c      	cmp	r4, r3
 800bd66:	d11b      	bne.n	800bda0 <_fflush_r+0x58>
 800bd68:	686c      	ldr	r4, [r5, #4]
 800bd6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d0ef      	beq.n	800bd52 <_fflush_r+0xa>
 800bd72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd74:	07d0      	lsls	r0, r2, #31
 800bd76:	d404      	bmi.n	800bd82 <_fflush_r+0x3a>
 800bd78:	0599      	lsls	r1, r3, #22
 800bd7a:	d402      	bmi.n	800bd82 <_fflush_r+0x3a>
 800bd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd7e:	f7fe fd2d 	bl	800a7dc <__retarget_lock_acquire_recursive>
 800bd82:	4628      	mov	r0, r5
 800bd84:	4621      	mov	r1, r4
 800bd86:	f7ff ff59 	bl	800bc3c <__sflush_r>
 800bd8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd8c:	07da      	lsls	r2, r3, #31
 800bd8e:	4605      	mov	r5, r0
 800bd90:	d4e0      	bmi.n	800bd54 <_fflush_r+0xc>
 800bd92:	89a3      	ldrh	r3, [r4, #12]
 800bd94:	059b      	lsls	r3, r3, #22
 800bd96:	d4dd      	bmi.n	800bd54 <_fflush_r+0xc>
 800bd98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd9a:	f7fe fd20 	bl	800a7de <__retarget_lock_release_recursive>
 800bd9e:	e7d9      	b.n	800bd54 <_fflush_r+0xc>
 800bda0:	4b05      	ldr	r3, [pc, #20]	; (800bdb8 <_fflush_r+0x70>)
 800bda2:	429c      	cmp	r4, r3
 800bda4:	d101      	bne.n	800bdaa <_fflush_r+0x62>
 800bda6:	68ac      	ldr	r4, [r5, #8]
 800bda8:	e7df      	b.n	800bd6a <_fflush_r+0x22>
 800bdaa:	4b04      	ldr	r3, [pc, #16]	; (800bdbc <_fflush_r+0x74>)
 800bdac:	429c      	cmp	r4, r3
 800bdae:	bf08      	it	eq
 800bdb0:	68ec      	ldreq	r4, [r5, #12]
 800bdb2:	e7da      	b.n	800bd6a <_fflush_r+0x22>
 800bdb4:	0800c4dc 	.word	0x0800c4dc
 800bdb8:	0800c4fc 	.word	0x0800c4fc
 800bdbc:	0800c4bc 	.word	0x0800c4bc

0800bdc0 <__swhatbuf_r>:
 800bdc0:	b570      	push	{r4, r5, r6, lr}
 800bdc2:	460e      	mov	r6, r1
 800bdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc8:	2900      	cmp	r1, #0
 800bdca:	b096      	sub	sp, #88	; 0x58
 800bdcc:	4614      	mov	r4, r2
 800bdce:	461d      	mov	r5, r3
 800bdd0:	da07      	bge.n	800bde2 <__swhatbuf_r+0x22>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	602b      	str	r3, [r5, #0]
 800bdd6:	89b3      	ldrh	r3, [r6, #12]
 800bdd8:	061a      	lsls	r2, r3, #24
 800bdda:	d410      	bmi.n	800bdfe <__swhatbuf_r+0x3e>
 800bddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bde0:	e00e      	b.n	800be00 <__swhatbuf_r+0x40>
 800bde2:	466a      	mov	r2, sp
 800bde4:	f000 f8fa 	bl	800bfdc <_fstat_r>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	dbf2      	blt.n	800bdd2 <__swhatbuf_r+0x12>
 800bdec:	9a01      	ldr	r2, [sp, #4]
 800bdee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bdf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bdf6:	425a      	negs	r2, r3
 800bdf8:	415a      	adcs	r2, r3
 800bdfa:	602a      	str	r2, [r5, #0]
 800bdfc:	e7ee      	b.n	800bddc <__swhatbuf_r+0x1c>
 800bdfe:	2340      	movs	r3, #64	; 0x40
 800be00:	2000      	movs	r0, #0
 800be02:	6023      	str	r3, [r4, #0]
 800be04:	b016      	add	sp, #88	; 0x58
 800be06:	bd70      	pop	{r4, r5, r6, pc}

0800be08 <__smakebuf_r>:
 800be08:	898b      	ldrh	r3, [r1, #12]
 800be0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be0c:	079d      	lsls	r5, r3, #30
 800be0e:	4606      	mov	r6, r0
 800be10:	460c      	mov	r4, r1
 800be12:	d507      	bpl.n	800be24 <__smakebuf_r+0x1c>
 800be14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	6123      	str	r3, [r4, #16]
 800be1c:	2301      	movs	r3, #1
 800be1e:	6163      	str	r3, [r4, #20]
 800be20:	b002      	add	sp, #8
 800be22:	bd70      	pop	{r4, r5, r6, pc}
 800be24:	ab01      	add	r3, sp, #4
 800be26:	466a      	mov	r2, sp
 800be28:	f7ff ffca 	bl	800bdc0 <__swhatbuf_r>
 800be2c:	9900      	ldr	r1, [sp, #0]
 800be2e:	4605      	mov	r5, r0
 800be30:	4630      	mov	r0, r6
 800be32:	f7fe fce7 	bl	800a804 <_malloc_r>
 800be36:	b948      	cbnz	r0, 800be4c <__smakebuf_r+0x44>
 800be38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be3c:	059a      	lsls	r2, r3, #22
 800be3e:	d4ef      	bmi.n	800be20 <__smakebuf_r+0x18>
 800be40:	f023 0303 	bic.w	r3, r3, #3
 800be44:	f043 0302 	orr.w	r3, r3, #2
 800be48:	81a3      	strh	r3, [r4, #12]
 800be4a:	e7e3      	b.n	800be14 <__smakebuf_r+0xc>
 800be4c:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <__smakebuf_r+0x7c>)
 800be4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	6020      	str	r0, [r4, #0]
 800be54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be58:	81a3      	strh	r3, [r4, #12]
 800be5a:	9b00      	ldr	r3, [sp, #0]
 800be5c:	6163      	str	r3, [r4, #20]
 800be5e:	9b01      	ldr	r3, [sp, #4]
 800be60:	6120      	str	r0, [r4, #16]
 800be62:	b15b      	cbz	r3, 800be7c <__smakebuf_r+0x74>
 800be64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be68:	4630      	mov	r0, r6
 800be6a:	f000 f8c9 	bl	800c000 <_isatty_r>
 800be6e:	b128      	cbz	r0, 800be7c <__smakebuf_r+0x74>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	f023 0303 	bic.w	r3, r3, #3
 800be76:	f043 0301 	orr.w	r3, r3, #1
 800be7a:	81a3      	strh	r3, [r4, #12]
 800be7c:	89a0      	ldrh	r0, [r4, #12]
 800be7e:	4305      	orrs	r5, r0
 800be80:	81a5      	strh	r5, [r4, #12]
 800be82:	e7cd      	b.n	800be20 <__smakebuf_r+0x18>
 800be84:	0800a639 	.word	0x0800a639

0800be88 <memcpy>:
 800be88:	440a      	add	r2, r1
 800be8a:	4291      	cmp	r1, r2
 800be8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800be90:	d100      	bne.n	800be94 <memcpy+0xc>
 800be92:	4770      	bx	lr
 800be94:	b510      	push	{r4, lr}
 800be96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be9e:	4291      	cmp	r1, r2
 800bea0:	d1f9      	bne.n	800be96 <memcpy+0xe>
 800bea2:	bd10      	pop	{r4, pc}

0800bea4 <memmove>:
 800bea4:	4288      	cmp	r0, r1
 800bea6:	b510      	push	{r4, lr}
 800bea8:	eb01 0402 	add.w	r4, r1, r2
 800beac:	d902      	bls.n	800beb4 <memmove+0x10>
 800beae:	4284      	cmp	r4, r0
 800beb0:	4623      	mov	r3, r4
 800beb2:	d807      	bhi.n	800bec4 <memmove+0x20>
 800beb4:	1e43      	subs	r3, r0, #1
 800beb6:	42a1      	cmp	r1, r4
 800beb8:	d008      	beq.n	800becc <memmove+0x28>
 800beba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bec2:	e7f8      	b.n	800beb6 <memmove+0x12>
 800bec4:	4402      	add	r2, r0
 800bec6:	4601      	mov	r1, r0
 800bec8:	428a      	cmp	r2, r1
 800beca:	d100      	bne.n	800bece <memmove+0x2a>
 800becc:	bd10      	pop	{r4, pc}
 800bece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bed6:	e7f7      	b.n	800bec8 <memmove+0x24>

0800bed8 <__malloc_lock>:
 800bed8:	4801      	ldr	r0, [pc, #4]	; (800bee0 <__malloc_lock+0x8>)
 800beda:	f7fe bc7f 	b.w	800a7dc <__retarget_lock_acquire_recursive>
 800bede:	bf00      	nop
 800bee0:	20000a30 	.word	0x20000a30

0800bee4 <__malloc_unlock>:
 800bee4:	4801      	ldr	r0, [pc, #4]	; (800beec <__malloc_unlock+0x8>)
 800bee6:	f7fe bc7a 	b.w	800a7de <__retarget_lock_release_recursive>
 800beea:	bf00      	nop
 800beec:	20000a30 	.word	0x20000a30

0800bef0 <_free_r>:
 800bef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bef2:	2900      	cmp	r1, #0
 800bef4:	d048      	beq.n	800bf88 <_free_r+0x98>
 800bef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800befa:	9001      	str	r0, [sp, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	f1a1 0404 	sub.w	r4, r1, #4
 800bf02:	bfb8      	it	lt
 800bf04:	18e4      	addlt	r4, r4, r3
 800bf06:	f7ff ffe7 	bl	800bed8 <__malloc_lock>
 800bf0a:	4a20      	ldr	r2, [pc, #128]	; (800bf8c <_free_r+0x9c>)
 800bf0c:	9801      	ldr	r0, [sp, #4]
 800bf0e:	6813      	ldr	r3, [r2, #0]
 800bf10:	4615      	mov	r5, r2
 800bf12:	b933      	cbnz	r3, 800bf22 <_free_r+0x32>
 800bf14:	6063      	str	r3, [r4, #4]
 800bf16:	6014      	str	r4, [r2, #0]
 800bf18:	b003      	add	sp, #12
 800bf1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf1e:	f7ff bfe1 	b.w	800bee4 <__malloc_unlock>
 800bf22:	42a3      	cmp	r3, r4
 800bf24:	d90b      	bls.n	800bf3e <_free_r+0x4e>
 800bf26:	6821      	ldr	r1, [r4, #0]
 800bf28:	1862      	adds	r2, r4, r1
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	bf04      	itt	eq
 800bf2e:	681a      	ldreq	r2, [r3, #0]
 800bf30:	685b      	ldreq	r3, [r3, #4]
 800bf32:	6063      	str	r3, [r4, #4]
 800bf34:	bf04      	itt	eq
 800bf36:	1852      	addeq	r2, r2, r1
 800bf38:	6022      	streq	r2, [r4, #0]
 800bf3a:	602c      	str	r4, [r5, #0]
 800bf3c:	e7ec      	b.n	800bf18 <_free_r+0x28>
 800bf3e:	461a      	mov	r2, r3
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	b10b      	cbz	r3, 800bf48 <_free_r+0x58>
 800bf44:	42a3      	cmp	r3, r4
 800bf46:	d9fa      	bls.n	800bf3e <_free_r+0x4e>
 800bf48:	6811      	ldr	r1, [r2, #0]
 800bf4a:	1855      	adds	r5, r2, r1
 800bf4c:	42a5      	cmp	r5, r4
 800bf4e:	d10b      	bne.n	800bf68 <_free_r+0x78>
 800bf50:	6824      	ldr	r4, [r4, #0]
 800bf52:	4421      	add	r1, r4
 800bf54:	1854      	adds	r4, r2, r1
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	6011      	str	r1, [r2, #0]
 800bf5a:	d1dd      	bne.n	800bf18 <_free_r+0x28>
 800bf5c:	681c      	ldr	r4, [r3, #0]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	6053      	str	r3, [r2, #4]
 800bf62:	4421      	add	r1, r4
 800bf64:	6011      	str	r1, [r2, #0]
 800bf66:	e7d7      	b.n	800bf18 <_free_r+0x28>
 800bf68:	d902      	bls.n	800bf70 <_free_r+0x80>
 800bf6a:	230c      	movs	r3, #12
 800bf6c:	6003      	str	r3, [r0, #0]
 800bf6e:	e7d3      	b.n	800bf18 <_free_r+0x28>
 800bf70:	6825      	ldr	r5, [r4, #0]
 800bf72:	1961      	adds	r1, r4, r5
 800bf74:	428b      	cmp	r3, r1
 800bf76:	bf04      	itt	eq
 800bf78:	6819      	ldreq	r1, [r3, #0]
 800bf7a:	685b      	ldreq	r3, [r3, #4]
 800bf7c:	6063      	str	r3, [r4, #4]
 800bf7e:	bf04      	itt	eq
 800bf80:	1949      	addeq	r1, r1, r5
 800bf82:	6021      	streq	r1, [r4, #0]
 800bf84:	6054      	str	r4, [r2, #4]
 800bf86:	e7c7      	b.n	800bf18 <_free_r+0x28>
 800bf88:	b003      	add	sp, #12
 800bf8a:	bd30      	pop	{r4, r5, pc}
 800bf8c:	20000160 	.word	0x20000160

0800bf90 <_realloc_r>:
 800bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf92:	4607      	mov	r7, r0
 800bf94:	4614      	mov	r4, r2
 800bf96:	460e      	mov	r6, r1
 800bf98:	b921      	cbnz	r1, 800bfa4 <_realloc_r+0x14>
 800bf9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	f7fe bc30 	b.w	800a804 <_malloc_r>
 800bfa4:	b922      	cbnz	r2, 800bfb0 <_realloc_r+0x20>
 800bfa6:	f7ff ffa3 	bl	800bef0 <_free_r>
 800bfaa:	4625      	mov	r5, r4
 800bfac:	4628      	mov	r0, r5
 800bfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb0:	f000 f836 	bl	800c020 <_malloc_usable_size_r>
 800bfb4:	42a0      	cmp	r0, r4
 800bfb6:	d20f      	bcs.n	800bfd8 <_realloc_r+0x48>
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4638      	mov	r0, r7
 800bfbc:	f7fe fc22 	bl	800a804 <_malloc_r>
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d0f2      	beq.n	800bfac <_realloc_r+0x1c>
 800bfc6:	4631      	mov	r1, r6
 800bfc8:	4622      	mov	r2, r4
 800bfca:	f7ff ff5d 	bl	800be88 <memcpy>
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4638      	mov	r0, r7
 800bfd2:	f7ff ff8d 	bl	800bef0 <_free_r>
 800bfd6:	e7e9      	b.n	800bfac <_realloc_r+0x1c>
 800bfd8:	4635      	mov	r5, r6
 800bfda:	e7e7      	b.n	800bfac <_realloc_r+0x1c>

0800bfdc <_fstat_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4d07      	ldr	r5, [pc, #28]	; (800bffc <_fstat_r+0x20>)
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	602b      	str	r3, [r5, #0]
 800bfea:	f7f6 f85a 	bl	80020a2 <_fstat>
 800bfee:	1c43      	adds	r3, r0, #1
 800bff0:	d102      	bne.n	800bff8 <_fstat_r+0x1c>
 800bff2:	682b      	ldr	r3, [r5, #0]
 800bff4:	b103      	cbz	r3, 800bff8 <_fstat_r+0x1c>
 800bff6:	6023      	str	r3, [r4, #0]
 800bff8:	bd38      	pop	{r3, r4, r5, pc}
 800bffa:	bf00      	nop
 800bffc:	20000a38 	.word	0x20000a38

0800c000 <_isatty_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4d06      	ldr	r5, [pc, #24]	; (800c01c <_isatty_r+0x1c>)
 800c004:	2300      	movs	r3, #0
 800c006:	4604      	mov	r4, r0
 800c008:	4608      	mov	r0, r1
 800c00a:	602b      	str	r3, [r5, #0]
 800c00c:	f7f6 f859 	bl	80020c2 <_isatty>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_isatty_r+0x1a>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	b103      	cbz	r3, 800c01a <_isatty_r+0x1a>
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	20000a38 	.word	0x20000a38

0800c020 <_malloc_usable_size_r>:
 800c020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c024:	1f18      	subs	r0, r3, #4
 800c026:	2b00      	cmp	r3, #0
 800c028:	bfbc      	itt	lt
 800c02a:	580b      	ldrlt	r3, [r1, r0]
 800c02c:	18c0      	addlt	r0, r0, r3
 800c02e:	4770      	bx	lr

0800c030 <_init>:
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c032:	bf00      	nop
 800c034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c036:	bc08      	pop	{r3}
 800c038:	469e      	mov	lr, r3
 800c03a:	4770      	bx	lr

0800c03c <_fini>:
 800c03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03e:	bf00      	nop
 800c040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c042:	bc08      	pop	{r3}
 800c044:	469e      	mov	lr, r3
 800c046:	4770      	bx	lr
